
../build/target/bootloader/platform-6-lto/bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .module_info  00000018  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .flashtext    00000000  0800019c  0800019c  00023b7c  2**0
                  CONTENTS
  3 .text         00003804  0800019c  0800019c  0001019c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data         000001b0  20002300  080039a0  00022300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .backup       00000000  40024000  40024000  00023b7c  2**0
                  CONTENTS
  6 .bss          00001730  200024b0  200024b0  000324b0  2**2
                  ALLOC
  7 ._usrstack    00001400  20003be0  20003be0  000324b0  2**0
                  ALLOC
  8 .comment      0000006e  00000000  00000000  00023b7c  2**0
                  CONTENTS, READONLY
  9 .ARM.attributes 00000031  00000000  00000000  00023bea  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000005b8  00000000  00000000  00023c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00014066  00000000  00000000  000241d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000027c2  00000000  00000000  0003823e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003dfa  00000000  00000000  0003aa00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ecc  00000000  00000000  0003e7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004e37  00000000  00000000  0003f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00007e3a  00000000  00000000  000444ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .module_info_suffix 00000028  08003b50  08003b50  00023b50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .module_info_crc 00000004  08003b78  08003b78  00023b78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .debug_ranges 00001150  00000000  00000000  0004c340  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800019c <main>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
int main(void)
{
 800019c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80001a0:	b08f      	sub	sp, #60	; 0x3c
 80001a2:	4ab6      	ldr	r2, [pc, #728]	; (800047c <link_module_info_end+0x2e0>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80001a4:	4db6      	ldr	r5, [pc, #728]	; (8000480 <link_module_info_end+0x2e4>)
 80001a6:	6813      	ldr	r3, [r2, #0]
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80001a8:	2601      	movs	r6, #1
 80001aa:	f043 0310 	orr.w	r3, r3, #16
 80001ae:	6013      	str	r3, [r2, #0]
 80001b0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80001b2:	f04f 0800 	mov.w	r8, #0
 80001b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001ba:	642b      	str	r3, [r5, #64]	; 0x40
 80001bc:	4bb1      	ldr	r3, [pc, #708]	; (8000484 <link_module_info_end+0x2e8>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80001be:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80001c2:	601e      	str	r6, [r3, #0]
 80001c4:	4bb0      	ldr	r3, [pc, #704]	; (8000488 <link_module_info_end+0x2ec>)
 80001c6:	af04      	add	r7, sp, #16
 80001c8:	685a      	ldr	r2, [r3, #4]
 80001ca:	4641      	mov	r1, r8
 80001cc:	f042 0207 	orr.w	r2, r2, #7
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	689a      	ldr	r2, [r3, #8]
 80001d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d8:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	4aab      	ldr	r2, [pc, #684]	; (800048c <link_module_info_end+0x2f0>)
 80001e0:	68d3      	ldr	r3, [r2, #12]
 80001e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001e6:	60d3      	str	r3, [r2, #12]
 80001e8:	4ba9      	ldr	r3, [pc, #676]	; (8000490 <link_module_info_end+0x2f4>)
 80001ea:	f8c3 8004 	str.w	r8, [r3, #4]
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4332      	orrs	r2, r6
 80001f2:	601a      	str	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001f4:	4aa7      	ldr	r2, [pc, #668]	; (8000494 <link_module_info_end+0x2f8>)
 80001f6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80001fa:	60da      	str	r2, [r3, #12]
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80001fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80001fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000202:	632b      	str	r3, [r5, #48]	; 0x30
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000204:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800020a:	646b      	str	r3, [r5, #68]	; 0x44
 800020c:	f001 fbfc 	bl	8001a08 <Timer_Configure.lto_priv.126>
 8000210:	8c23      	ldrh	r3, [r4, #32]
 8000212:	4620      	mov	r0, r4
 8000214:	f023 0301 	bic.w	r3, r3, #1
 8000218:	041b      	lsls	r3, r3, #16
 800021a:	0c1b      	lsrs	r3, r3, #16
 800021c:	8423      	strh	r3, [r4, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800021e:	8c23      	ldrh	r3, [r4, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000220:	88a1      	ldrh	r1, [r4, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000222:	8b22      	ldrh	r2, [r4, #24]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8000224:	f023 0302 	bic.w	r3, r3, #2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8000228:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800022c:	041b      	lsls	r3, r3, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800022e:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8000230:	0c1b      	lsrs	r3, r3, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8000232:	0c12      	lsrs	r2, r2, #16
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000234:	b289      	uxth	r1, r1
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000236:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000238:	80a1      	strh	r1, [r4, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800023a:	8322      	strh	r2, [r4, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800023c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000240:	8423      	strh	r3, [r4, #32]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000242:	8b23      	ldrh	r3, [r4, #24]
 8000244:	2104      	movs	r1, #4

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8000246:	f023 0308 	bic.w	r3, r3, #8
 800024a:	041b      	lsls	r3, r3, #16
 800024c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800024e:	8323      	strh	r3, [r4, #24]
 8000250:	f001 fb0e 	bl	8001870 <Timer_Configure_Pwm.lto_priv.125>
 8000254:	4620      	mov	r0, r4
 8000256:	2108      	movs	r1, #8
 8000258:	f001 fb0a 	bl	8001870 <Timer_Configure_Pwm.lto_priv.125>
 800025c:	4620      	mov	r0, r4
 800025e:	210c      	movs	r1, #12
 8000260:	f001 fb06 	bl	8001870 <Timer_Configure_Pwm.lto_priv.125>
 8000264:	4620      	mov	r0, r4
 8000266:	4631      	mov	r1, r6
 8000268:	f001 fbce 	bl	8001a08 <Timer_Configure.lto_priv.126>
 800026c:	2260      	movs	r2, #96	; 0x60
 800026e:	498a      	ldr	r1, [pc, #552]	; (8000498 <link_module_info_end+0x2fc>)
 8000270:	488a      	ldr	r0, [pc, #552]	; (800049c <link_module_info_end+0x300>)
 8000272:	f002 ff5a 	bl	800312a <memcpy>
 8000276:	4c8a      	ldr	r4, [pc, #552]	; (80004a0 <link_module_info_end+0x304>)
 8000278:	2e03      	cmp	r6, #3
 800027a:	dd25      	ble.n	80002c8 <main+0x12c>
 800027c:	2218      	movs	r2, #24
 800027e:	fb02 f006 	mul.w	r0, r2, r6
 8000282:	f107 0110 	add.w	r1, r7, #16
 8000286:	f600 50ef 	addw	r0, r0, #3567	; 0xdef
 800028a:	f002 ffc1 	bl	8003210 <dct_read_app_data_copy>
 800028e:	2800      	cmp	r0, #0
 8000290:	d145      	bne.n	800031e <main+0x182>
 8000292:	7c3b      	ldrb	r3, [r7, #16]
 8000294:	2bff      	cmp	r3, #255	; 0xff
 8000296:	d042      	beq.n	800031e <main+0x182>
 8000298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800029c:	f003 0309 	and.w	r3, r3, #9
 80002a0:	2b09      	cmp	r3, #9
 80002a2:	d13c      	bne.n	800031e <main+0x182>
 80002a4:	46a6      	mov	lr, r4
 80002a6:	f107 0c10 	add.w	ip, r7, #16
 80002aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80002ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80002b2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80002b6:	e88e 0003 	stmia.w	lr, {r0, r1}
 80002ba:	2101      	movs	r1, #1
 80002bc:	f001 fba4 	bl	8001a08 <Timer_Configure.lto_priv.126>
 80002c0:	8aa1      	ldrh	r1, [r4, #20]
 80002c2:	6920      	ldr	r0, [r4, #16]
 80002c4:	f001 fad4 	bl	8001870 <Timer_Configure_Pwm.lto_priv.125>
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80002c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80002ca:	8962      	ldrh	r2, [r4, #10]
 80002cc:	f107 0110 	add.w	r1, r7, #16
 80002d0:	4313      	orrs	r3, r2
 80002d2:	632b      	str	r3, [r5, #48]	; 0x30
 80002d4:	8923      	ldrh	r3, [r4, #8]
 80002d6:	6860      	ldr	r0, [r4, #4]
 80002d8:	613b      	str	r3, [r7, #16]
 80002da:	7b23      	ldrb	r3, [r4, #12]
 80002dc:	f887 8016 	strb.w	r8, [r7, #22]
 80002e0:	753b      	strb	r3, [r7, #20]
 80002e2:	2303      	movs	r3, #3
 80002e4:	757b      	strb	r3, [r7, #21]
 80002e6:	f887 8017 	strb.w	r8, [r7, #23]
 80002ea:	f002 fe23 	bl	8002f34 <GPIO_Init>
 80002ee:	7b23      	ldrb	r3, [r4, #12]
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	d114      	bne.n	800031e <main+0x182>
 80002f4:	7ba3      	ldrb	r3, [r4, #14]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80002f6:	7be0      	ldrb	r0, [r4, #15]
 80002f8:	08d9      	lsrs	r1, r3, #3
 80002fa:	f003 0207 	and.w	r2, r3, #7
 80002fe:	6863      	ldr	r3, [r4, #4]
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000306:	6a19      	ldr	r1, [r3, #32]
 8000308:	f04f 0e0f 	mov.w	lr, #15
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800030c:	4090      	lsls	r0, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800030e:	fa0e f202 	lsl.w	r2, lr, r2
 8000312:	ea21 0202 	bic.w	r2, r1, r2
 8000316:	621a      	str	r2, [r3, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000318:	6a1a      	ldr	r2, [r3, #32]
 800031a:	4302      	orrs	r2, r0
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800031c:	621a      	str	r2, [r3, #32]
 800031e:	3601      	adds	r6, #1
 8000320:	2e08      	cmp	r6, #8
 8000322:	f104 0418 	add.w	r4, r4, #24
 8000326:	d1a7      	bne.n	8000278 <main+0xdc>
 8000328:	2000      	movs	r0, #0
 800032a:	f003 f845 	bl	80033b8 <BUTTON_Init.constprop.55>
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));

  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800032e:	4b5d      	ldr	r3, [pc, #372]	; (80004a4 <link_module_info_end+0x308>)
 8000330:	22f3      	movs	r2, #243	; 0xf3
 8000332:	60da      	str	r2, [r3, #12]
    memcpy(ptr, data, size);
    return 0;
}

const void* dct_read_app_data_lock(uint32_t offset) {
    return dct_read_app_data(offset);
 8000334:	f640 602f 	movw	r0, #3631	; 0xe2f
 8000338:	f002 ff54 	bl	80031e4 <dct_read_app_data>
}

void BUTTON_Init_Ext() {
    const button_config_t* conf = (const button_config_t*)dct_read_app_data_lock(DCT_MODE_BUTTON_MIRROR_OFFSET);

    if (conf && conf->active == 0xAA && conf->debounce_time == 0xBBCC) {
 800033c:	4601      	mov	r1, r0
 800033e:	b1a0      	cbz	r0, 800036a <main+0x1ce>
 8000340:	7803      	ldrb	r3, [r0, #0]
 8000342:	2baa      	cmp	r3, #170	; 0xaa
 8000344:	d111      	bne.n	800036a <main+0x1ce>
 8000346:	f64b 32cc 	movw	r2, #48076	; 0xbbcc
 800034a:	8a03      	ldrh	r3, [r0, #16]
 800034c:	b29b      	uxth	r3, r3
 800034e:	4293      	cmp	r3, r2
 8000350:	d10b      	bne.n	800036a <main+0x1ce>
        //int32_t state = HAL_disable_irq();
        memcpy((void*)&HAL_Buttons[BUTTON1_MIRROR], (void*)conf, sizeof(button_config_t));
 8000352:	2220      	movs	r2, #32
 8000354:	4854      	ldr	r0, [pc, #336]	; (80004a8 <link_module_info_end+0x30c>)
 8000356:	f002 fee8 	bl	800312a <memcpy>
        HAL_Buttons[BUTTON1_MIRROR].active = 0;
 800035a:	4b54      	ldr	r3, [pc, #336]	; (80004ac <link_module_info_end+0x310>)
 800035c:	2200      	movs	r2, #0
 800035e:	f883 2020 	strb.w	r2, [r3, #32]
        HAL_Buttons[BUTTON1_MIRROR].debounce_time = 0;
        BUTTON_Init(BUTTON1_MIRROR, BUTTON_MODE_EXTI);
 8000362:	2001      	movs	r0, #1

    if (conf && conf->active == 0xAA && conf->debounce_time == 0xBBCC) {
        //int32_t state = HAL_disable_irq();
        memcpy((void*)&HAL_Buttons[BUTTON1_MIRROR], (void*)conf, sizeof(button_config_t));
        HAL_Buttons[BUTTON1_MIRROR].active = 0;
        HAL_Buttons[BUTTON1_MIRROR].debounce_time = 0;
 8000364:	861a      	strh	r2, [r3, #48]	; 0x30
        BUTTON_Init(BUTTON1_MIRROR, BUTTON_MODE_EXTI);
 8000366:	f003 f827 	bl	80033b8 <BUTTON_Init.constprop.55>
        //HAL_enable_irq(state);
    }

    dct_read_app_data_unlock(DCT_MODE_BUTTON_MIRROR_OFFSET);

    if (BUTTON_Debounce())
 800036a:	f002 ff89 	bl	8003280 <BUTTON_Debounce>
 800036e:	b130      	cbz	r0, 800037e <main+0x1e2>
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000374:	8993      	ldrh	r3, [r2, #12]
 8000376:	b29b      	uxth	r3, r3
 8000378:	f043 0302 	orr.w	r3, r3, #2
 800037c:	8193      	strh	r3, [r2, #12]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800037e:	4b4c      	ldr	r3, [pc, #304]	; (80004b0 <link_module_info_end+0x314>)
 8000380:	4a4c      	ldr	r2, [pc, #304]	; (80004b4 <link_module_info_end+0x318>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000382:	21f0      	movs	r1, #240	; 0xf0
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000384:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000386:	4a4c      	ldr	r2, [pc, #304]	; (80004b8 <link_module_info_end+0x31c>)
 8000388:	4c4c      	ldr	r4, [pc, #304]	; (80004bc <link_module_info_end+0x320>)
 800038a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800038e:	2100      	movs	r1, #0
 8000390:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	2107      	movs	r1, #7
 8000394:	6019      	str	r1, [r3, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000396:	23d0      	movs	r3, #208	; 0xd0
 8000398:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    //  Bootloader_Version_SysFlag
    //  NVMEM_SPARK_Reset_SysFlag
    //  FLASH_OTA_Update_SysFlag
    //  Factory_Reset_SysFlag
    //--------------------------------------------------------------------------
    Load_SystemFlags();
 800039c:	f001 f9c4 	bl	8001728 <Load_SystemFlags>
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <link_module_info_end+0x2e4>)
 80003a2:	6962      	ldr	r2, [r4, #20]
 80003a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d002      	beq.n	80003b0 <main+0x214>
 80003aa:	6163      	str	r3, [r4, #20]
 80003ac:	f001 f95c 	bl	8001668 <Save_SystemFlags>

    Save_Reset_Syndrome();

    //BOOTLOADER_VERSION defined in bootloader/import.mk
    //This can also be overridden via make command line arguments
    if (SYSTEM_FLAG(Bootloader_Version_SysFlag) != BOOTLOADER_VERSION)
 80003b0:	88a2      	ldrh	r2, [r4, #4]
 80003b2:	4b42      	ldr	r3, [pc, #264]	; (80004bc <link_module_info_end+0x320>)
 80003b4:	2a65      	cmp	r2, #101	; 0x65
 80003b6:	d005      	beq.n	80003c4 <main+0x228>
 80003b8:	2265      	movs	r2, #101	; 0x65
 80003ba:	711a      	strb	r2, [r3, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	715a      	strb	r2, [r3, #5]
 80003c0:	f001 f952 	bl	8001668 <Save_SystemFlags>
    {
        Bootloader_Update_Version(BOOTLOADER_VERSION);
    }

    if (SYSTEM_FLAG(StartupMode_SysFlag) != 0) {
 80003c4:	7ca3      	ldrb	r3, [r4, #18]
 80003c6:	b123      	cbz	r3, 80003d2 <main+0x236>
        SYSTEM_FLAG(StartupMode_SysFlag) = 0;
 80003c8:	4b3c      	ldr	r3, [pc, #240]	; (80004bc <link_module_info_end+0x320>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	749a      	strb	r2, [r3, #18]
        Save_SystemFlags();
 80003ce:	f001 f94b 	bl	8001668 <Save_SystemFlags>
 80003d2:	f640 60af 	movw	r0, #3759	; 0xeaf
 80003d6:	f002 ff05 	bl	80031e4 <dct_read_app_data>
}

void get_led_theme_colors(uint32_t* firmware_update, uint32_t* safe_mode, uint32_t* dfu_mode) {
    // Check if theme data is initialized in DCT
    const uint8_t* d = (const uint8_t*)dct_read_app_data_lock(DCT_LED_THEME_OFFSET);
    if (d && *d == LED_SIGNAL_THEME_VERSION) {
 80003da:	4605      	mov	r5, r0
 80003dc:	b1a0      	cbz	r0, 8000408 <main+0x26c>
 80003de:	7803      	ldrb	r3, [r0, #0]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d111      	bne.n	8000408 <main+0x26c>
        *firmware_update = led_signal_color(LED_SIGNAL_FIRMWARE_UPDATE, d);
 80003e4:	4601      	mov	r1, r0
 80003e6:	200b      	movs	r0, #11
 80003e8:	f002 fc80 	bl	8002cec <led_signal_color.lto_priv.124>
 80003ec:	4b34      	ldr	r3, [pc, #208]	; (80004c0 <link_module_info_end+0x324>)
        *safe_mode = led_signal_color(LED_SIGNAL_SAFE_MODE, d);
 80003ee:	4629      	mov	r1, r5

void get_led_theme_colors(uint32_t* firmware_update, uint32_t* safe_mode, uint32_t* dfu_mode) {
    // Check if theme data is initialized in DCT
    const uint8_t* d = (const uint8_t*)dct_read_app_data_lock(DCT_LED_THEME_OFFSET);
    if (d && *d == LED_SIGNAL_THEME_VERSION) {
        *firmware_update = led_signal_color(LED_SIGNAL_FIRMWARE_UPDATE, d);
 80003f0:	6018      	str	r0, [r3, #0]
        *safe_mode = led_signal_color(LED_SIGNAL_SAFE_MODE, d);
 80003f2:	2008      	movs	r0, #8
 80003f4:	f002 fc7a 	bl	8002cec <led_signal_color.lto_priv.124>
 80003f8:	4b32      	ldr	r3, [pc, #200]	; (80004c4 <link_module_info_end+0x328>)
        *dfu_mode = led_signal_color(LED_SIGNAL_DFU_MODE, d);
 80003fa:	4629      	mov	r1, r5
void get_led_theme_colors(uint32_t* firmware_update, uint32_t* safe_mode, uint32_t* dfu_mode) {
    // Check if theme data is initialized in DCT
    const uint8_t* d = (const uint8_t*)dct_read_app_data_lock(DCT_LED_THEME_OFFSET);
    if (d && *d == LED_SIGNAL_THEME_VERSION) {
        *firmware_update = led_signal_color(LED_SIGNAL_FIRMWARE_UPDATE, d);
        *safe_mode = led_signal_color(LED_SIGNAL_SAFE_MODE, d);
 80003fc:	6018      	str	r0, [r3, #0]
        *dfu_mode = led_signal_color(LED_SIGNAL_DFU_MODE, d);
 80003fe:	200a      	movs	r0, #10
 8000400:	f002 fc74 	bl	8002cec <led_signal_color.lto_priv.124>
 8000404:	4b30      	ldr	r3, [pc, #192]	; (80004c8 <link_module_info_end+0x32c>)
 8000406:	6018      	str	r0, [r3, #0]
    //--------------------------------------------------------------------------

    /*
     * Check that firmware is valid at this address.
     */
    ApplicationAddress = CORE_FW_ADDRESS;
 8000408:	4a30      	ldr	r2, [pc, #192]	; (80004cc <link_module_info_end+0x330>)
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <link_module_info_end+0x334>)
 800040c:	6013      	str	r3, [r2, #0]

    // 0x0005 is written to the backup register at the end of firmware update.
    // if the register reads 0x0005, it signifies that the firmware update
    // was successful
    if((BACKUP_REGISTER(BKP_DR_10) == 0x0005) ||
            (SYSTEM_FLAG(FLASH_OTA_Update_SysFlag) == 0x0005))
 800040e:	8923      	ldrh	r3, [r4, #8]
 8000410:	607a      	str	r2, [r7, #4]
    ApplicationAddress = CORE_FW_ADDRESS;

    // 0x0005 is written to the backup register at the end of firmware update.
    // if the register reads 0x0005, it signifies that the firmware update
    // was successful
    if((BACKUP_REGISTER(BKP_DR_10) == 0x0005) ||
 8000412:	2b05      	cmp	r3, #5
 8000414:	d102      	bne.n	800041c <main+0x280>
            (SYSTEM_FLAG(FLASH_OTA_Update_SysFlag) == 0x0005))
    {
        // OTA was complete and the firmware is now available to be transfered to
        // the internal flash memory
        OTA_FLASH_AVAILABLE = 1;
 8000416:	2201      	movs	r2, #1
 8000418:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <link_module_info_end+0x338>)
 800041a:	e008      	b.n	800042e <main+0x292>
    }

    // 0x5555 is written to the backup register at the beginning of firmware update
    // if the register still reads 0x5555, it signifies that the firmware update
    // was never completed => FAIL
    else if((BACKUP_REGISTER(BKP_DR_10) == 0x5555) ||
 800041c:	f245 5255 	movw	r2, #21845	; 0x5555
 8000420:	4293      	cmp	r3, r2
 8000422:	d105      	bne.n	8000430 <main+0x294>
            (SYSTEM_FLAG(FLASH_OTA_Update_SysFlag) == 0x5555))
    {
        // OTA transfer failed, hence, load firmware from the backup address
        OTA_FLASH_AVAILABLE = 0;
 8000424:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <link_module_info_end+0x338>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
        REFLASH_FROM_BACKUP = 1;
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <link_module_info_end+0x33c>)
 800042c:	2201      	movs	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]
    }

    // 0xAAAA is written to the Factory_Reset_SysFlag in order to trigger a factory reset
    if (0xAAAA == SYSTEM_FLAG(Factory_Reset_SysFlag))
 8000430:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000434:	89a2      	ldrh	r2, [r4, #12]
uint32_t HAL_Core_Read_Backup_Register(uint32_t BKP_DR)
{
    uint32_t BKP_DR_Address = HAL_Core_Backup_Register(BKP_DR);
    if (BKP_DR_Address != -1)
    {
        return RTC_ReadBackupRegister(BKP_DR_Address);
 8000436:	2001      	movs	r0, #1
 8000438:	429a      	cmp	r2, r3
    {
        FACTORY_RESET_MODE = 1;
 800043a:	bf02      	ittt	eq
 800043c:	4b27      	ldreq	r3, [pc, #156]	; (80004dc <link_module_info_end+0x340>)
 800043e:	2201      	moveq	r2, #1
 8000440:	701a      	strbeq	r2, [r3, #0]
 8000442:	f002 fdcd 	bl	8002fe0 <RTC_ReadBackupRegister>
    }

    // Get the Bootloader Mode that will be used when IWDG reset occurs due to invalid firmware
    volatile uint16_t BKP_DR1_Value = HAL_Core_Read_Backup_Register(BKP_DR_01);

    if(BKP_DR1_Value != 0xFFFF)
 8000446:	f64f 71ff 	movw	r1, #65535	; 0xffff
    {
        FACTORY_RESET_MODE = 1;
    }

    // Get the Bootloader Mode that will be used when IWDG reset occurs due to invalid firmware
    volatile uint16_t BKP_DR1_Value = HAL_Core_Read_Backup_Register(BKP_DR_01);
 800044a:	b280      	uxth	r0, r0
 800044c:	8178      	strh	r0, [r7, #10]

    if(BKP_DR1_Value != 0xFFFF)
 800044e:	897b      	ldrh	r3, [r7, #10]
 8000450:	b29b      	uxth	r3, r3
 8000452:	428b      	cmp	r3, r1
 8000454:	d07a      	beq.n	800054c <link_module_info_end+0x3b0>
    {
        // Check if application requested to enter DFU mode
        if (BKP_DR1_Value == ENTER_DFU_APP_REQUEST)
 8000456:	f64e 52fa 	movw	r2, #60922	; 0xedfa
 800045a:	897b      	ldrh	r3, [r7, #10]
 800045c:	b29b      	uxth	r3, r3
 800045e:	4293      	cmp	r3, r2
 8000460:	d102      	bne.n	8000468 <main+0x2cc>
        {
            USB_DFU_MODE = 1;
 8000462:	2001      	movs	r0, #1
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <link_module_info_end+0x344>)
 8000466:	e007      	b.n	8000478 <main+0x2dc>
            //Subsequent system reset or power on-off should execute normal firmware
            HAL_Core_Write_Backup_Register(BKP_DR_01, 0xFFFF);
        }
        else if (BKP_DR1_Value == ENTER_SAFE_MODE_APP_REQUEST)
 8000468:	f645 22fe 	movw	r2, #23294	; 0x5afe
 800046c:	897b      	ldrh	r3, [r7, #10]
 800046e:	b29b      	uxth	r3, r3
 8000470:	4293      	cmp	r3, r2
 8000472:	d139      	bne.n	80004e8 <link_module_info_end+0x34c>
        {
            SAFE_MODE = 1;
 8000474:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <link_module_info_end+0x348>)
 8000476:	2001      	movs	r0, #1
 8000478:	7018      	strb	r0, [r3, #0]
 800047a:	e06b      	b.n	8000554 <link_module_info_end+0x3b8>
 800047c:	e000ed14 	.word	0xe000ed14
 8000480:	40023800 	.word	0x40023800
 8000484:	420e0020 	.word	0x420e0020
 8000488:	e0042000 	.word	0xe0042000
 800048c:	e000edf0 	.word	0xe000edf0
 8000490:	e0001000 	.word	0xe0001000
 8000494:	05fa0300 	.word	0x05fa0300
 8000498:	08003754 	.word	0x08003754
 800049c:	200024e8 	.word	0x200024e8
 80004a0:	20002500 	.word	0x20002500
 80004a4:	40023c00 	.word	0x40023c00
 80004a8:	20002490 	.word	0x20002490
 80004ac:	20002470 	.word	0x20002470
 80004b0:	e000e010 	.word	0xe000e010
 80004b4:	0001d4bf 	.word	0x0001d4bf
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	200024c8 	.word	0x200024c8
 80004c0:	20002320 	.word	0x20002320
 80004c4:	20002328 	.word	0x20002328
 80004c8:	20002324 	.word	0x20002324
 80004cc:	200024b0 	.word	0x200024b0
 80004d0:	08020000 	.word	0x08020000
 80004d4:	200035c2 	.word	0x200035c2
 80004d8:	200035c3 	.word	0x200035c3
 80004dc:	200035d1 	.word	0x200035d1
 80004e0:	200035d0 	.word	0x200035d0
 80004e4:	200035c1 	.word	0x200035c1
            HAL_Core_Write_Backup_Register(BKP_DR_01, 0xFFFF);
        }
        // Else check if the system has resumed from IWDG reset
        else if (RCC_GetFlagStatus(RCC_FLAG_IWDGRST) != RESET)
 80004e8:	207d      	movs	r0, #125	; 0x7d
 80004ea:	f002 fd65 	bl	8002fb8 <RCC_GetFlagStatus>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d032      	beq.n	8000558 <link_module_info_end+0x3bc>
            // REFLASH_FROM_BACKUP = 0;
            // OTA_FLASH_AVAILABLE = 0;
            // USB_DFU_MODE = 0;
            // FACTORY_RESET_MODE = 0;

            switch(BKP_DR1_Value)
 80004f2:	897b      	ldrh	r3, [r7, #10]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d008      	beq.n	800050c <link_module_info_end+0x370>
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d010      	beq.n	8000520 <link_module_info_end+0x384>
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d111      	bne.n	8000526 <link_module_info_end+0x38a>
            {
                case FIRST_RETRY:	// On 1st retry attempt, try to recover using sFlash - Backup Area
                    REFLASH_FROM_BACKUP = 1;
 8000502:	4a9b      	ldr	r2, [pc, #620]	; (8000770 <link_module_info_end+0x5d4>)
 8000504:	7013      	strb	r3, [r2, #0]
                    BKP_DR1_Value += 1;
 8000506:	897b      	ldrh	r3, [r7, #10]
 8000508:	3301      	adds	r3, #1
 800050a:	e007      	b.n	800051c <link_module_info_end+0x380>
                    break;

                case SECOND_RETRY:	// On 2nd retry attempt, try to recover using sFlash - Factory Reset
                    FACTORY_RESET_MODE = 1;
 800050c:	4b99      	ldr	r3, [pc, #612]	; (8000774 <link_module_info_end+0x5d8>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
                    SYSTEM_FLAG(NVMEM_SPARK_Reset_SysFlag) = 0x0000;
 8000512:	2300      	movs	r3, #0
 8000514:	71a3      	strb	r3, [r4, #6]
 8000516:	71e3      	strb	r3, [r4, #7]
                    BKP_DR1_Value += 1;
 8000518:	897b      	ldrh	r3, [r7, #10]
 800051a:	4413      	add	r3, r2
 800051c:	b29b      	uxth	r3, r3
 800051e:	e004      	b.n	800052a <link_module_info_end+0x38e>
                    break;

                case THIRD_RETRY:	// On 3rd retry attempt, try to recover using USB DFU Mode (Final attempt)
                    USB_DFU_MODE = 1;
 8000520:	4b95      	ldr	r3, [pc, #596]	; (8000778 <link_module_info_end+0x5dc>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
                case ENTERED_Loop:
                case RAN_Loop:
                case PRESERVE_APP:

                default:
                    BKP_DR1_Value = 0xFFFF;
 8000526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800052a:	817b      	strh	r3, [r7, #10]
                    break;
            }

            HAL_Core_Write_Backup_Register(BKP_DR_01, BKP_DR1_Value);
 800052c:	8979      	ldrh	r1, [r7, #10]
void HAL_Core_Write_Backup_Register(uint32_t BKP_DR, uint32_t Data)
{
    uint32_t BKP_DR_Address = HAL_Core_Backup_Register(BKP_DR);
    if (BKP_DR_Address != -1)
    {
        RTC_WriteBackupRegister(BKP_DR_Address, Data);
 800052e:	2001      	movs	r0, #1
 8000530:	b289      	uxth	r1, r1
 8000532:	f002 fd65 	bl	8003000 <RTC_WriteBackupRegister>
 8000536:	2300      	movs	r3, #0
 8000538:	72a3      	strb	r3, [r4, #10]
 800053a:	72e3      	strb	r3, [r4, #11]
 800053c:	f001 f894 	bl	8001668 <Save_SystemFlags>
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000540:	4a8e      	ldr	r2, [pc, #568]	; (800077c <link_module_info_end+0x5e0>)
 8000542:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000548:	6753      	str	r3, [r2, #116]	; 0x74
 800054a:	e005      	b.n	8000558 <link_module_info_end+0x3bc>
        }
    }
    else
    {
        // On successful firmware transition, BKP_DR1_Value is reset to default 0xFFFF
        BKP_DR1_Value = 1;	//Assume we have an invalid firmware loaded in internal flash
 800054c:	2001      	movs	r0, #1
 800054e:	8178      	strh	r0, [r7, #10]
        HAL_Core_Write_Backup_Register(BKP_DR_01, BKP_DR1_Value);
 8000550:	8979      	ldrh	r1, [r7, #10]
 8000552:	b289      	uxth	r1, r1
 8000554:	f002 fd54 	bl	8003000 <RTC_WriteBackupRegister>
    }

    //--------------------------------------------------------------------------
    //    Check if BUTTON1 is pressed and determine the status
    //--------------------------------------------------------------------------
    if (BUTTON_Is_Pressed(BUTTON1) && (features & BL_BUTTON_FEATURES))
 8000558:	2000      	movs	r0, #0
 800055a:	f002 fe7f 	bl	800325c <BUTTON_Is_Pressed>
 800055e:	b940      	cbnz	r0, 8000572 <link_module_info_end+0x3d6>
        //     USB_DFU_MODE &= !factory_reset;
        //     SAFE_MODE &= !USB_DFU_MODE;
        // }
    }

    if (SAFE_MODE) {
 8000560:	4b87      	ldr	r3, [pc, #540]	; (8000780 <link_module_info_end+0x5e4>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d071      	beq.n	800064c <link_module_info_end+0x4b0>
        SYSTEM_FLAG(StartupMode_SysFlag) = 0x0001;
 8000568:	2301      	movs	r3, #1
 800056a:	74a3      	strb	r3, [r4, #18]
        Save_SystemFlags();
 800056c:	f001 f87c 	bl	8001668 <Save_SystemFlags>
 8000570:	e06c      	b.n	800064c <link_module_info_end+0x4b0>
 8000572:	4884      	ldr	r0, [pc, #528]	; (8000784 <link_module_info_end+0x5e8>)
 8000574:	f003 f890 	bl	8003698 <FLASH_ApplyFactoryResetImage>
                // if pressed for 10 sec, enter Factory Reset Mode
                // This tells the WLAN setup to clear the WiFi user profiles on bootup
                LED_SetRGBColor(RGB_COLOR_WHITE);
                SYSTEM_FLAG(NVMEM_SPARK_Reset_SysFlag) = 0x0001;
            }
            else if(!FACTORY_RESET_MODE && BUTTON_Pressed_Time(BUTTON1) > TIMING_RESTORE_MODE)
 8000578:	4e7e      	ldr	r6, [pc, #504]	; (8000774 <link_module_info_end+0x5d8>)
#define TIMING_RESET_MODE 10000
#define TIMING_ALL 12000            // add a couple of seconds for visual feedback

        bool factory_reset_available = (features & BL_FEATURE_FACTORY_RESET) && FLASH_IsFactoryResetAvailable();

        TimingBUTTON = TIMING_ALL;
 800057a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800057e:	4681      	mov	r9, r0
 8000580:	46b2      	mov	sl, r6
 8000582:	4d81      	ldr	r5, [pc, #516]	; (8000788 <link_module_info_end+0x5ec>)
                // if pressed for > 6.5 sec, enter firmware reset
                LED_SetRGBColor(RGB_COLOR_GREEN);
                SYSTEM_FLAG(NVMEM_SPARK_Reset_SysFlag) = 0x0000;
                FACTORY_RESET_MODE = 1;
            }
            else if(!USB_DFU_MODE && BUTTON_Pressed_Time(BUTTON1) >= TIMING_DFU_MODE)
 8000584:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8000778 <link_module_info_end+0x5dc>
#define TIMING_RESET_MODE 10000
#define TIMING_ALL 12000            // add a couple of seconds for visual feedback

        bool factory_reset_available = (features & BL_FEATURE_FACTORY_RESET) && FLASH_IsFactoryResetAvailable();

        TimingBUTTON = TIMING_ALL;
 8000588:	602b      	str	r3, [r5, #0]
        // uint8_t factory_reset = 0;
        while (BUTTON_Is_Pressed(BUTTON1) && TimingBUTTON)
 800058a:	2000      	movs	r0, #0
 800058c:	f002 fe66 	bl	800325c <BUTTON_Is_Pressed>
 8000590:	2800      	cmp	r0, #0
 8000592:	d0e5      	beq.n	8000560 <link_module_info_end+0x3c4>
 8000594:	682b      	ldr	r3, [r5, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0e2      	beq.n	8000560 <link_module_info_end+0x3c4>
        {
            if(BUTTON_Pressed_Time(BUTTON1) > TIMING_RESET_MODE)
 800059a:	2000      	movs	r0, #0
 800059c:	f002 fe48 	bl	8003230 <BUTTON_Pressed_Time>
 80005a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80005a4:	4298      	cmp	r0, r3
 80005a6:	d908      	bls.n	80005ba <link_module_info_end+0x41e>
 80005a8:	4b78      	ldr	r3, [pc, #480]	; (800078c <link_module_info_end+0x5f0>)
 80005aa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80005ae:	601a      	str	r2, [r3, #0]
            {
                // if pressed for 10 sec, enter Factory Reset Mode
                // This tells the WLAN setup to clear the WiFi user profiles on bootup
                LED_SetRGBColor(RGB_COLOR_WHITE);
                SYSTEM_FLAG(NVMEM_SPARK_Reset_SysFlag) = 0x0001;
 80005b0:	2301      	movs	r3, #1
 80005b2:	71a3      	strb	r3, [r4, #6]
 80005b4:	2300      	movs	r3, #0
 80005b6:	71e3      	strb	r3, [r4, #7]
 80005b8:	e7e7      	b.n	800058a <link_module_info_end+0x3ee>
            }
            else if(!FACTORY_RESET_MODE && BUTTON_Pressed_Time(BUTTON1) > TIMING_RESTORE_MODE)
 80005ba:	7833      	ldrb	r3, [r6, #0]
 80005bc:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 80005c0:	b98b      	cbnz	r3, 80005e6 <link_module_info_end+0x44a>
 80005c2:	4658      	mov	r0, fp
 80005c4:	f002 fe34 	bl	8003230 <BUTTON_Pressed_Time>
 80005c8:	f641 1364 	movw	r3, #6500	; 0x1964
 80005cc:	4298      	cmp	r0, r3
 80005ce:	d90a      	bls.n	80005e6 <link_module_info_end+0x44a>
 80005d0:	4b6e      	ldr	r3, [pc, #440]	; (800078c <link_module_info_end+0x5f0>)
 80005d2:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80005d6:	601a      	str	r2, [r3, #0]
            {
                // if pressed for > 6.5 sec, enter firmware reset
                LED_SetRGBColor(RGB_COLOR_GREEN);
                SYSTEM_FLAG(NVMEM_SPARK_Reset_SysFlag) = 0x0000;
                FACTORY_RESET_MODE = 1;
 80005d8:	2301      	movs	r3, #1
            }
            else if(!FACTORY_RESET_MODE && BUTTON_Pressed_Time(BUTTON1) > TIMING_RESTORE_MODE)
            {
                // if pressed for > 6.5 sec, enter firmware reset
                LED_SetRGBColor(RGB_COLOR_GREEN);
                SYSTEM_FLAG(NVMEM_SPARK_Reset_SysFlag) = 0x0000;
 80005da:	f884 b006 	strb.w	fp, [r4, #6]
 80005de:	f884 b007 	strb.w	fp, [r4, #7]
                FACTORY_RESET_MODE = 1;
 80005e2:	7033      	strb	r3, [r6, #0]
 80005e4:	e7d1      	b.n	800058a <link_module_info_end+0x3ee>
            }
            else if(!USB_DFU_MODE && BUTTON_Pressed_Time(BUTTON1) >= TIMING_DFU_MODE)
 80005e6:	f898 3000 	ldrb.w	r3, [r8]
 80005ea:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80005ee:	b983      	cbnz	r3, 8000612 <link_module_info_end+0x476>
 80005f0:	f002 fe1e 	bl	8003230 <BUTTON_Pressed_Time>
 80005f4:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80005f8:	4298      	cmp	r0, r3
 80005fa:	d90a      	bls.n	8000612 <link_module_info_end+0x476>
            {
                // if pressed for > 3 sec, enter USB DFU Mode
                if (features&BL_FEATURE_DFU_MODE) {
                    LED_SetRGBColor(DFUModeColor);
 80005fc:	4b64      	ldr	r3, [pc, #400]	; (8000790 <link_module_info_end+0x5f4>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b62      	ldr	r3, [pc, #392]	; (800078c <link_module_info_end+0x5f0>)
 8000602:	601a      	str	r2, [r3, #0]
                    USB_DFU_MODE = 1;           // stay in DFU mode until the button is released so we have slow-led blinking
 8000604:	2301      	movs	r3, #1
 8000606:	f888 3000 	strb.w	r3, [r8]
                }
                if (!factory_reset_available)
 800060a:	f1b9 0f00 	cmp.w	r9, #0
 800060e:	d0bc      	beq.n	800058a <link_module_info_end+0x3ee>
 8000610:	e7a6      	b.n	8000560 <link_module_info_end+0x3c4>
                    break;
            }
            else if(!SAFE_MODE && BUTTON_Pressed_Time(BUTTON1) >= TIMING_SAFE_MODE)
 8000612:	4b5b      	ldr	r3, [pc, #364]	; (8000780 <link_module_info_end+0x5e4>)
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	f002 0bff 	and.w	fp, r2, #255	; 0xff
 800061a:	2a00      	cmp	r2, #0
 800061c:	d1b5      	bne.n	800058a <link_module_info_end+0x3ee>
 800061e:	4658      	mov	r0, fp
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	f002 fe05 	bl	8003230 <BUTTON_Pressed_Time>
 8000626:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	d3ad      	bcc.n	800058a <link_module_info_end+0x3ee>
            {
                OTA_FLASH_AVAILABLE = 0;
 800062e:	4a59      	ldr	r2, [pc, #356]	; (8000794 <link_module_info_end+0x5f8>)
                REFLASH_FROM_BACKUP = 0;
                FACTORY_RESET_MODE = 0;
 8000630:	f88a b000 	strb.w	fp, [sl]
                if (!factory_reset_available)
                    break;
            }
            else if(!SAFE_MODE && BUTTON_Pressed_Time(BUTTON1) >= TIMING_SAFE_MODE)
            {
                OTA_FLASH_AVAILABLE = 0;
 8000634:	f882 b000 	strb.w	fp, [r2]
                REFLASH_FROM_BACKUP = 0;
 8000638:	4a4d      	ldr	r2, [pc, #308]	; (8000770 <link_module_info_end+0x5d4>)
 800063a:	f882 b000 	strb.w	fp, [r2]
                FACTORY_RESET_MODE = 0;

                if (features&BL_FEATURE_SAFE_MODE) {
                    // if pressed for > 1 sec, enter Safe Mode
                    LED_SetRGBColor(SafeModeColor);
 800063e:	4a56      	ldr	r2, [pc, #344]	; (8000798 <link_module_info_end+0x5fc>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	4a52      	ldr	r2, [pc, #328]	; (800078c <link_module_info_end+0x5f0>)
 8000644:	6011      	str	r1, [r2, #0]
                    SAFE_MODE = 1;
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	e79e      	b.n	800058a <link_module_info_end+0x3ee>
        Save_SystemFlags();
    }

    //--------------------------------------------------------------------------

    if (OTA_FLASH_AVAILABLE == 1)
 800064c:	4b51      	ldr	r3, [pc, #324]	; (8000794 <link_module_info_end+0x5f8>)
 800064e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8000774 <link_module_info_end+0x5d8>
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	4698      	mov	r8, r3
 8000656:	2a01      	cmp	r2, #1
 8000658:	d104      	bne.n	8000664 <link_module_info_end+0x4c8>
    {
        LED_SetRGBColor(FirmwareUpdateColor);
 800065a:	4b50      	ldr	r3, [pc, #320]	; (800079c <link_module_info_end+0x600>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4b4b      	ldr	r3, [pc, #300]	; (800078c <link_module_info_end+0x5f0>)
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	e0fa      	b.n	800085a <link_module_info_end+0x6be>
        // Load the OTA Firmware from external flash
        OTA_Flash_Reset();
    }
    else if (FACTORY_RESET_MODE)
 8000664:	f899 3000 	ldrb.w	r3, [r9]
 8000668:	b1fb      	cbz	r3, 80006aa <link_module_info_end+0x50e>
    {
        if (FACTORY_RESET_MODE == 1)
 800066a:	f899 3000 	ldrb.w	r3, [r9]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d116      	bne.n	80006a0 <link_module_info_end+0x504>
        {
            if (SYSTEM_FLAG(NVMEM_SPARK_Reset_SysFlag) == 0x0001)
 8000672:	88e3      	ldrh	r3, [r4, #6]
 8000674:	2b01      	cmp	r3, #1
 8000676:	4b45      	ldr	r3, [pc, #276]	; (800078c <link_module_info_end+0x5f0>)
 8000678:	bf0c      	ite	eq
 800067a:	f06f 427f 	mvneq.w	r2, #4278190080	; 0xff000000
 800067e:	f44f 427f 	movne.w	r2, #65280	; 0xff00
 8000682:	601a      	str	r2, [r3, #0]
                LED_SetRGBColor(RGB_COLOR_WHITE);
            else
                LED_SetRGBColor(RGB_COLOR_GREEN);
            // Restore the Factory Firmware
            // On success the device will reset)
            if (!FACTORY_Flash_Reset()) {
 8000684:	f001 f836 	bl	80016f4 <FACTORY_Flash_Reset>
 8000688:	2800      	cmp	r0, #0
 800068a:	f040 80e6 	bne.w	800085a <link_module_info_end+0x6be>
                if (is_application_valid(ApplicationAddress)) {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	f002 fb0d 	bl	8002cb0 <is_application_valid>
 8000696:	2800      	cmp	r0, #0
 8000698:	f000 80df 	beq.w	800085a <link_module_info_end+0x6be>
                    // we have a valid image to fall back to, so just reset
                    NVIC_SystemReset();
 800069c:	f001 fc2a 	bl	8001ef4 <NVIC_SystemReset.lto_priv.96.lto_priv.99>
            }
        } else {
            // This else clause is only for JTAG debugging
            // Break and set FACTORY_RESET_MODE to 2
            // to run the current code at 0x08005000
            FACTORY_RESET_MODE = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f889 3000 	strb.w	r3, [r9]
            Finish_Update();
 80006a6:	f001 f809 	bl	80016bc <Finish_Update>
        }
    }
    else if (USB_DFU_MODE == 0)
 80006aa:	4b33      	ldr	r3, [pc, #204]	; (8000778 <link_module_info_end+0x5dc>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f040 80d1 	bne.w	800085a <link_module_info_end+0x6be>
 80006b8:	f640 3a38 	movw	sl, #2872	; 0xb38
 80006bc:	f64a 3bcd 	movw	fp, #43981	; 0xabcd
 80006c0:	f8c7 d000 	str.w	sp, [r7]
 80006c4:	b096      	sub	sp, #88	; 0x58
 80006c6:	ad04      	add	r5, sp, #16
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	2202      	movs	r2, #2
 80006ce:	f107 0110 	add.w	r1, r7, #16
 80006d2:	4650      	mov	r0, sl
 80006d4:	823b      	strh	r3, [r7, #16]
 80006d6:	f002 fd9b 	bl	8003210 <dct_read_app_data_copy>
 80006da:	2800      	cmp	r0, #0
 80006dc:	d160      	bne.n	80007a0 <link_module_info_end+0x604>
 80006de:	8a3a      	ldrh	r2, [r7, #16]
 80006e0:	455a      	cmp	r2, fp
 80006e2:	d113      	bne.n	800070c <link_module_info_end+0x570>
 80006e4:	2214      	movs	r2, #20
 80006e6:	fb02 5106 	mla	r1, r2, r6, r5
 80006ea:	4650      	mov	r0, sl
 80006ec:	f002 fd90 	bl	8003210 <dct_read_app_data_copy>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d155      	bne.n	80007a0 <link_module_info_end+0x604>
 80006f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f8:	4651      	mov	r1, sl
 80006fa:	823a      	strh	r2, [r7, #16]
 80006fc:	f107 0010 	add.w	r0, r7, #16
 8000700:	2202      	movs	r2, #2
 8000702:	f002 fd51 	bl	80031a8 <dct_write_app_data>
 8000706:	2800      	cmp	r0, #0
 8000708:	d14a      	bne.n	80007a0 <link_module_info_end+0x604>
 800070a:	3601      	adds	r6, #1
 800070c:	f640 3288 	movw	r2, #2952	; 0xb88
 8000710:	f10a 0a14 	add.w	sl, sl, #20
 8000714:	4592      	cmp	sl, r2
 8000716:	d1d7      	bne.n	80006c8 <link_module_info_end+0x52c>
void flashModulesCallback(bool isUpdating)
{
    if(isUpdating)
    {
        OTA_FLASH_AVAILABLE = 1;
        LED_SetRGBColor(FirmwareUpdateColor);
 8000718:	f8df b080 	ldr.w	fp, [pc, #128]	; 800079c <link_module_info_end+0x600>
 800071c:	3502      	adds	r5, #2
 800071e:	f04f 0a00 	mov.w	sl, #0
 8000722:	45b2      	cmp	sl, r6
 8000724:	f105 0514 	add.w	r5, r5, #20
 8000728:	d03a      	beq.n	80007a0 <link_module_info_end+0x604>

void flashModulesCallback(bool isUpdating)
{
    if(isUpdating)
    {
        OTA_FLASH_AVAILABLE = 1;
 800072a:	f04f 0301 	mov.w	r3, #1
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <link_module_info_end+0x5f0>)
 8000730:	f888 3000 	strb.w	r3, [r8]
        LED_SetRGBColor(FirmwareUpdateColor);
 8000734:	f8db 3000 	ldr.w	r3, [fp]
 8000738:	f815 0c14 	ldrb.w	r0, [r5, #-20]
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	f815 3c06 	ldrb.w	r3, [r5, #-6]
 8000742:	f815 2c13 	ldrb.w	r2, [r5, #-19]
 8000746:	9302      	str	r3, [sp, #8]
 8000748:	f815 3c05 	ldrb.w	r3, [r5, #-5]
 800074c:	f10a 0a01 	add.w	sl, sl, #1
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	f855 3c0a 	ldr.w	r3, [r5, #-10]
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f855 3c0e 	ldr.w	r3, [r5, #-14]
 800075c:	f855 1c12 	ldr.w	r1, [r5, #-18]
 8000760:	f001 f9e6 	bl	8001b30 <FLASH_CopyMemory>
    }
    else
    {
        OTA_FLASH_AVAILABLE = 0;
 8000764:	2000      	movs	r0, #0
 8000766:	f888 0000 	strb.w	r0, [r8]
 800076a:	f002 feff 	bl	800356c <Set_RGB_LED_Color>
 800076e:	e7d8      	b.n	8000722 <link_module_info_end+0x586>
 8000770:	200035c3 	.word	0x200035c3
 8000774:	200035d1 	.word	0x200035d1
 8000778:	200035d0 	.word	0x200035d0
 800077c:	40023800 	.word	0x40023800
 8000780:	200035c1 	.word	0x200035c1
 8000784:	080015b5 	.word	0x080015b5
 8000788:	200035c8 	.word	0x200035c8
 800078c:	200035e8 	.word	0x200035e8
 8000790:	20002324 	.word	0x20002324
 8000794:	200035c2 	.word	0x200035c2
 8000798:	20002328 	.word	0x20002328
 800079c:	20002320 	.word	0x20002320
    dct_read_app_data_func = dct_read;
    dct_write_app_data_func = dct_write;
}

void load_dct_functions() {
    dct_funcs_inited = 0;
 80007a0:	4ba9      	ldr	r3, [pc, #676]	; (8000a48 <link_module_info_end+0x8ac>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
        }
#endif

        // ToDo add CRC check
        // Test if user code is programmed starting from ApplicationAddress
        if (is_application_valid(ApplicationAddress))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f8d7 d000 	ldr.w	sp, [r7]
 80007ac:	681e      	ldr	r6, [r3, #0]
 80007ae:	4630      	mov	r0, r6
 80007b0:	f002 fa7e 	bl	8002cb0 <is_application_valid>
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d04a      	beq.n	800084e <link_module_info_end+0x6b2>
        {
            // Jump to user application
            JumpAddress = *(__IO uint32_t*) (ApplicationAddress + 4);
 80007b8:	6873      	ldr	r3, [r6, #4]
            Jump_To_Application = (pFunction) JumpAddress;
 80007ba:	4da4      	ldr	r5, [pc, #656]	; (8000a4c <link_module_info_end+0x8b0>)
 80007bc:	602b      	str	r3, [r5, #0]
            // Initialize user application's Stack Pointer
            __set_MSP(*(__IO uint32_t*) ApplicationAddress);
 80007be:	6833      	ldr	r3, [r6, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 80007c0:	f383 8808 	msr	MSP, r3
    }
    return func;
}

int get_main_module_version() {
    const module_info_t* module = get_module_info(&module_system_part2);
 80007c4:	48a2      	ldr	r0, [pc, #648]	; (8000a50 <link_module_info_end+0x8b4>)
 80007c6:	f002 fd93 	bl	80032f0 <get_module_info>
    if (!module) {
 80007ca:	b918      	cbnz	r0, 80007d4 <link_module_info_end+0x638>
        // Monolithic firmware?
        module = get_module_info(&module_user_mono);
 80007cc:	48a1      	ldr	r0, [pc, #644]	; (8000a54 <link_module_info_end+0x8b8>)
 80007ce:	f002 fd8f 	bl	80032f0 <get_module_info>
        if (!module) {
 80007d2:	b110      	cbz	r0, 80007da <link_module_info_end+0x63e>
            return -1;
        }
    }
    return module->module_version;
 80007d4:	8943      	ldrh	r3, [r0, #10]
            uint8_t disable_iwdg = 0;
#ifdef CHECK_FIRMWARE
            // Pre-0.7.0 firmwares were expecting IWDG flag to be set in the DCT, now it's stored in
            // the backup registers. As a workaround, we disable IWDG if an older firmware is detected
            const int module_ver = get_main_module_version();
            if (module_ver >= 0 && module_ver < SYSTEM_MODULE_VERSION_0_7_0_RC1) {
 80007d6:	2bc7      	cmp	r3, #199	; 0xc7
 80007d8:	d931      	bls.n	800083e <link_module_info_end+0x6a2>
 80007da:	f000 ffa5 	bl	8001728 <Load_SystemFlags>
 80007de:	2300      	movs	r3, #0
 80007e0:	2202      	movs	r2, #2
 80007e2:	f107 0110 	add.w	r1, r7, #16
 80007e6:	200e      	movs	r0, #14
 80007e8:	823b      	strh	r3, [r7, #16]
 80007ea:	f002 fd11 	bl	8003210 <dct_read_app_data_copy>
 80007ee:	b990      	cbnz	r0, 8000816 <link_module_info_end+0x67a>
 80007f0:	f24d 0301 	movw	r3, #53249	; 0xd001
 80007f4:	8a3a      	ldrh	r2, [r7, #16]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d10d      	bne.n	8000816 <link_module_info_end+0x67a>
 80007fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fe:	2202      	movs	r2, #2
 8000800:	210e      	movs	r1, #14
 8000802:	f107 0010 	add.w	r0, r7, #16
 8000806:	823b      	strh	r3, [r7, #16]
 8000808:	f002 fcce 	bl	80031a8 <dct_write_app_data>
 800080c:	2301      	movs	r3, #1
 800080e:	73a3      	strb	r3, [r4, #14]
 8000810:	f06f 032f 	mvn.w	r3, #47	; 0x2f
 8000814:	73e3      	strb	r3, [r4, #15]
 8000816:	f24d 0301 	movw	r3, #53249	; 0xd001
 800081a:	89e2      	ldrh	r2, [r4, #14]
 800081c:	429a      	cmp	r2, r3
 800081e:	d10e      	bne.n	800083e <link_module_info_end+0x6a2>
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8000820:	f245 5255 	movw	r2, #21845	; 0x5555
 8000824:	4b8c      	ldr	r3, [pc, #560]	; (8000a58 <link_module_info_end+0x8bc>)
 8000826:	601a      	str	r2, [r3, #0]
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8000828:	2206      	movs	r2, #6
 800082a:	605a      	str	r2, [r3, #4]
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800082c:	f240 2271 	movw	r2, #625	; 0x271
 8000830:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_RELOAD;
 8000832:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000836:	601a      	str	r2, [r3, #0]
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_ENABLE;
 8000838:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	4a87      	ldr	r2, [pc, #540]	; (8000a5c <link_module_info_end+0x8c0>)
 8000840:	6813      	ldr	r3, [r2, #0]
 8000842:	f023 0301 	bic.w	r3, r3, #1
 8000846:	6013      	str	r3, [r2, #0]
                // Set IWDG Timeout to 5 secs based on platform specific system flags
                IWDG_Reset_Enable(5 * TIMING_IWDG_RELOAD);
            }

            SysTick_Disable();
            Jump_To_Application();
 8000848:	682b      	ldr	r3, [r5, #0]
 800084a:	4798      	blx	r3
 800084c:	e005      	b.n	800085a <link_module_info_end+0x6be>
 800084e:	4b84      	ldr	r3, [pc, #528]	; (8000a60 <link_module_info_end+0x8c4>)
 8000850:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000854:	601a      	str	r2, [r3, #0]
        }
        else
        {
            LED_SetRGBColor(RGB_COLOR_RED);
            FACTORY_Flash_Reset();
 8000856:	f000 ff4d 	bl	80016f4 <FACTORY_Flash_Reset>
    }
    // Otherwise enters DFU mode to allow user to program his application

    FACTORY_RESET_MODE = 0;  // ensure the LED is slow flashing (100)
    OTA_FLASH_AVAILABLE = 0; //   |
    REFLASH_FROM_BACKUP = 0; //   |
 800085a:	4b82      	ldr	r3, [pc, #520]	; (8000a64 <link_module_info_end+0x8c8>)
        // else drop through to DFU mode

    }
    // Otherwise enters DFU mode to allow user to program his application

    FACTORY_RESET_MODE = 0;  // ensure the LED is slow flashing (100)
 800085c:	2500      	movs	r5, #0
    OTA_FLASH_AVAILABLE = 0; //   |
    REFLASH_FROM_BACKUP = 0; //   |
 800085e:	701d      	strb	r5, [r3, #0]

    LED_SetRGBColor(DFUModeColor);
 8000860:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <link_module_info_end+0x8cc>)
        // else drop through to DFU mode

    }
    // Otherwise enters DFU mode to allow user to program his application

    FACTORY_RESET_MODE = 0;  // ensure the LED is slow flashing (100)
 8000862:	f889 5000 	strb.w	r5, [r9]
    OTA_FLASH_AVAILABLE = 0; //   |
    REFLASH_FROM_BACKUP = 0; //   |

    LED_SetRGBColor(DFUModeColor);
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b7d      	ldr	r3, [pc, #500]	; (8000a60 <link_module_info_end+0x8c4>)

    }
    // Otherwise enters DFU mode to allow user to program his application

    FACTORY_RESET_MODE = 0;  // ensure the LED is slow flashing (100)
    OTA_FLASH_AVAILABLE = 0; //   |
 800086a:	f888 5000 	strb.w	r5, [r8]
 800086e:	601a      	str	r2, [r3, #0]
    REFLASH_FROM_BACKUP = 0; //   |

    LED_SetRGBColor(DFUModeColor);

    USB_DFU_MODE = 1;
 8000870:	4b7e      	ldr	r3, [pc, #504]	; (8000a6c <link_module_info_end+0x8d0>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000872:	4e7f      	ldr	r6, [pc, #508]	; (8000a70 <link_module_info_end+0x8d4>)
 8000874:	f04f 0801 	mov.w	r8, #1
 8000878:	f883 8000 	strb.w	r8, [r3]
 800087c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800087e:	4c7d      	ldr	r4, [pc, #500]	; (8000a74 <link_module_info_end+0x8d8>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6333      	str	r3, [r6, #48]	; 0x30
 8000886:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	f04f 0902 	mov.w	r9, #2
 8000890:	2303      	movs	r3, #3
 8000892:	f107 0110 	add.w	r1, r7, #16
 8000896:	4620      	mov	r0, r4
 8000898:	757b      	strb	r3, [r7, #21]
 800089a:	f887 9014 	strb.w	r9, [r7, #20]
 800089e:	f002 fb49 	bl	8002f34 <GPIO_Init>
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008a4:	4a74      	ldr	r2, [pc, #464]	; (8000a78 <link_module_info_end+0x8dc>)
 80008a6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80008aa:	6263      	str	r3, [r4, #36]	; 0x24
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008ae:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80008b2:	6263      	str	r3, [r4, #36]	; 0x24
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80008ba:	6263      	str	r3, [r4, #36]	; 0x24
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80008c2:	6263      	str	r3, [r4, #36]	; 0x24
 80008c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80008c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008ca:	6333      	str	r3, [r6, #48]	; 0x30
 80008cc:	4b6b      	ldr	r3, [pc, #428]	; (8000a7c <link_module_info_end+0x8e0>)
 80008ce:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
 80008d2:	4a6b      	ldr	r2, [pc, #428]	; (8000a80 <link_module_info_end+0x8e4>)
 80008d4:	70dd      	strb	r5, [r3, #3]
 80008d6:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
 80008da:	4a6a      	ldr	r2, [pc, #424]	; (8000a84 <link_module_info_end+0x8e8>)
 80008dc:	f883 8002 	strb.w	r8, [r3, #2]
 80008e0:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 80008e4:	2240      	movs	r2, #64	; 0x40
 80008e6:	809a      	strh	r2, [r3, #4]
 80008e8:	220c      	movs	r2, #12
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	2206      	movs	r2, #6
 80008ee:	705a      	strb	r2, [r3, #1]
 80008f0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80008f4:	80da      	strh	r2, [r3, #6]
 80008f6:	4a64      	ldr	r2, [pc, #400]	; (8000a88 <link_module_info_end+0x8ec>)
 80008f8:	72dd      	strb	r5, [r3, #11]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000906:	619a      	str	r2, [r3, #24]
 8000908:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800090c:	649a      	str	r2, [r3, #72]	; 0x48
 800090e:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 8000912:	61da      	str	r2, [r3, #28]
 8000914:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000918:	64da      	str	r2, [r3, #76]	; 0x4c
 800091a:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 800091e:	621a      	str	r2, [r3, #32]
 8000920:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000924:	651a      	str	r2, [r3, #80]	; 0x50
 8000926:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
 800092c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000930:	655a      	str	r2, [r3, #84]	; 0x54
 8000932:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 8000936:	f883 9008 	strb.w	r9, [r3, #8]
 800093a:	f883 800a 	strb.w	r8, [r3, #10]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
 8000940:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000944:	659a      	str	r2, [r3, #88]	; 0x58
 8000946:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
 800094c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000950:	65da      	str	r2, [r3, #92]	; 0x5c
 8000952:	f5a2 62f4 	sub.w	r2, r2, #1952	; 0x7a0
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	3240      	adds	r2, #64	; 0x40
 800095a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800095e:	f103 0174 	add.w	r1, r3, #116	; 0x74
 8000962:	461c      	mov	r4, r3
 8000964:	4b49      	ldr	r3, [pc, #292]	; (8000a8c <link_module_info_end+0x8f0>)
 8000966:	32c0      	adds	r2, #192	; 0xc0
 8000968:	f841 2f04 	str.w	r2, [r1, #4]!
 800096c:	3220      	adds	r2, #32
 800096e:	429a      	cmp	r2, r3
 8000970:	d1fa      	bne.n	8000968 <link_module_info_end+0x7cc>
 8000972:	4a47      	ldr	r2, [pc, #284]	; (8000a90 <link_module_info_end+0x8f4>)
 8000974:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <link_module_info_end+0x8f8>)
 8000976:	4948      	ldr	r1, [pc, #288]	; (8000a98 <link_module_info_end+0x8fc>)
 8000978:	f842 3f04 	str.w	r3, [r2, #4]!
 800097c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000980:	428b      	cmp	r3, r1
 8000982:	d1f9      	bne.n	8000978 <link_module_info_end+0x7dc>
 8000984:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <link_module_info_end+0x900>)
 8000986:	2200      	movs	r2, #0
 8000988:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800098c:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <link_module_info_end+0x8e0>)
 800098e:	4615      	mov	r5, r2
 8000990:	4619      	mov	r1, r3
 8000992:	2001      	movs	r0, #1
 8000994:	f884 00e2 	strb.w	r0, [r4, #226]	; 0xe2
 8000998:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
 800099c:	2640      	movs	r6, #64	; 0x40
 800099e:	f881 20ec 	strb.w	r2, [r1, #236]	; 0xec
 80009a2:	f8a1 20f2 	strh.w	r2, [r1, #242]	; 0xf2
 80009a6:	3201      	adds	r2, #1
 80009a8:	2a06      	cmp	r2, #6
 80009aa:	f881 00ed 	strb.w	r0, [r1, #237]	; 0xed
 80009ae:	f881 50ef 	strb.w	r5, [r1, #239]	; 0xef
 80009b2:	f8c1 60f4 	str.w	r6, [r1, #244]	; 0xf4
 80009b6:	f8c1 50f8 	str.w	r5, [r1, #248]	; 0xf8
 80009ba:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
 80009be:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80009c2:	d1ec      	bne.n	800099e <link_module_info_end+0x802>
 80009c4:	2200      	movs	r2, #0
 80009c6:	4611      	mov	r1, r2
 80009c8:	2040      	movs	r0, #64	; 0x40
 80009ca:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
 80009ce:	f8a3 22d2 	strh.w	r2, [r3, #722]	; 0x2d2
 80009d2:	3201      	adds	r2, #1
 80009d4:	2a06      	cmp	r2, #6
 80009d6:	f883 12cd 	strb.w	r1, [r3, #717]	; 0x2cd
 80009da:	f883 12cf 	strb.w	r1, [r3, #719]	; 0x2cf
 80009de:	f8c3 02d4 	str.w	r0, [r3, #724]	; 0x2d4
 80009e2:	f8c3 12d8 	str.w	r1, [r3, #728]	; 0x2d8
 80009e6:	f8c3 12e0 	str.w	r1, [r3, #736]	; 0x2e0
 80009ea:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80009ee:	d1ec      	bne.n	80009ca <link_module_info_end+0x82e>
 80009f0:	4a25      	ldr	r2, [pc, #148]	; (8000a88 <link_module_info_end+0x8ec>)
 80009f2:	2500      	movs	r5, #0
 80009f4:	6893      	ldr	r3, [r2, #8]
 80009f6:	4e21      	ldr	r6, [pc, #132]	; (8000a7c <link_module_info_end+0x8e0>)
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	6093      	str	r3, [r2, #8]
 80009fe:	7a23      	ldrb	r3, [r4, #8]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d14f      	bne.n	8000aa4 <link_module_info_end+0x908>
 8000a04:	68f2      	ldr	r2, [r6, #12]
 8000a06:	7a71      	ldrb	r1, [r6, #9]
 8000a08:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000a0a:	f365 4310 	bfi	r3, r5, #16, #1
 8000a0e:	b109      	cbz	r1, 8000a14 <link_module_info_end+0x878>
 8000a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a14:	6393      	str	r3, [r2, #56]	; 0x38
 8000a16:	68d3      	ldr	r3, [r2, #12]
 8000a18:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <link_module_info_end+0x904>)
 8000a1a:	f36f 1386 	bfc	r3, #6, #1
 8000a1e:	f36f 5396 	bfc	r3, #22, #1
 8000a22:	f36f 4351 	bfc	r3, #17, #1
 8000a26:	f36f 43d3 	bfc	r3, #19, #1
 8000a2a:	60d3      	str	r3, [r2, #12]
 8000a2c:	f000 fc0c 	bl	8001248 <USB_OTG_CoreReset.isra.1.lto_priv.123>
 8000a30:	78e3      	ldrb	r3, [r4, #3]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d14c      	bne.n	8000ad0 <link_module_info_end+0x934>
 8000a36:	2305      	movs	r3, #5
 8000a38:	f363 0544 	bfi	r5, r3, #1, #4
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <link_module_info_end+0x8e0>)
 8000a3e:	f045 0520 	orr.w	r5, r5, #32
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	609d      	str	r5, [r3, #8]
 8000a46:	e043      	b.n	8000ad0 <link_module_info_end+0x934>
 8000a48:	200035dc 	.word	0x200035dc
 8000a4c:	200024b4 	.word	0x200024b4
 8000a50:	08003958 	.word	0x08003958
 8000a54:	08003744 	.word	0x08003744
 8000a58:	40003000 	.word	0x40003000
 8000a5c:	e000e010 	.word	0xe000e010
 8000a60:	200035e8 	.word	0x200035e8
 8000a64:	200035c3 	.word	0x200035c3
 8000a68:	20002324 	.word	0x20002324
 8000a6c:	200035d0 	.word	0x200035d0
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020400 	.word	0x40020400
 8000a78:	200023a4 	.word	0x200023a4
 8000a7c:	200036ec 	.word	0x200036ec
 8000a80:	2000232c 	.word	0x2000232c
 8000a84:	20002300 	.word	0x20002300
 8000a88:	40040000 	.word	0x40040000
 8000a8c:	40040680 	.word	0x40040680
 8000a90:	20003794 	.word	0x20003794
 8000a94:	40041000 	.word	0x40041000
 8000a98:	4004d000 	.word	0x4004d000
 8000a9c:	40040e00 	.word	0x40040e00
 8000aa0:	200036f8 	.word	0x200036f8
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	f850 2f0c 	ldr.w	r2, [r0, #12]!
 8000aaa:	68d3      	ldr	r3, [r2, #12]
 8000aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab0:	60d3      	str	r3, [r2, #12]
 8000ab2:	f000 fbc9 	bl	8001248 <USB_OTG_CoreReset.isra.1.lto_priv.123>
 8000ab6:	7a73      	ldrb	r3, [r6, #9]
 8000ab8:	68e2      	ldr	r2, [r4, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	bf0c      	ite	eq
 8000abe:	f44f 1334 	moveq.w	r3, #2949120	; 0x2d0000
 8000ac2:	f44f 1374 	movne.w	r3, #3997696	; 0x3d0000
 8000ac6:	6393      	str	r3, [r2, #56]	; 0x38
 8000ac8:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000acc:	f002 fd8a 	bl	80035e4 <USB_OTG_BSP_uDelay>
 8000ad0:	78e3      	ldrb	r3, [r4, #3]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d108      	bne.n	8000ae8 <link_module_info_end+0x94c>
 8000ad6:	4b7e      	ldr	r3, [pc, #504]	; (8000cd0 <link_module_info_end+0xb34>)
 8000ad8:	2205      	movs	r2, #5
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	689d      	ldr	r5, [r3, #8]
 8000ade:	f362 0544 	bfi	r5, r2, #1, #4
 8000ae2:	f045 0520 	orr.w	r5, r5, #32
 8000ae6:	609d      	str	r5, [r3, #8]
 8000ae8:	68e2      	ldr	r2, [r4, #12]
 8000aea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000aee:	68d3      	ldr	r3, [r2, #12]
 8000af0:	4d77      	ldr	r5, [pc, #476]	; (8000cd0 <link_module_info_end+0xb34>)
 8000af2:	f36f 735d 	bfc	r3, #29, #1
 8000af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000afa:	60d3      	str	r3, [r2, #12]
 8000afc:	f002 fd72 	bl	80035e4 <USB_OTG_BSP_uDelay>
 8000b00:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 8000b04:	2100      	movs	r1, #0
 8000b06:	6011      	str	r1, [r2, #0]
 8000b08:	6920      	ldr	r0, [r4, #16]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	6802      	ldr	r2, [r0, #0]
 8000b0e:	f361 22cc 	bfi	r2, r1, #11, #2
 8000b12:	6002      	str	r2, [r0, #0]
 8000b14:	7ae2      	ldrb	r2, [r4, #11]
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d13c      	bne.n	8000b94 <link_module_info_end+0x9f8>
 8000b1a:	7a2a      	ldrb	r2, [r5, #8]
 8000b1c:	6928      	ldr	r0, [r5, #16]
 8000b1e:	2a01      	cmp	r2, #1
 8000b20:	6802      	ldr	r2, [r0, #0]
 8000b22:	bf14      	ite	ne
 8000b24:	2501      	movne	r5, #1
 8000b26:	f361 0201 	bfieq	r2, r1, #0, #2
 8000b2a:	f2c0 0140 	movt	r1, #64	; 0x40
 8000b2e:	bf18      	it	ne
 8000b30:	f365 0201 	bfine	r2, r5, #0, #2
 8000b34:	6002      	str	r2, [r0, #0]
 8000b36:	68e2      	ldr	r2, [r4, #12]
 8000b38:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b3c:	f360 010f 	bfi	r1, r0, #0, #16
 8000b40:	6250      	str	r0, [r2, #36]	; 0x24
 8000b42:	6291      	str	r1, [r2, #40]	; 0x28
 8000b44:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000b48:	f361 030f 	bfi	r3, r1, #0, #16
 8000b4c:	f360 431f 	bfi	r3, r0, #16, #16
 8000b50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b54:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8000b58:	f361 030f 	bfi	r3, r1, #0, #16
 8000b5c:	f2c0 0320 	movt	r3, #32
 8000b60:	f44f 7118 	mov.w	r1, #608	; 0x260
 8000b64:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8000b68:	f361 030f 	bfi	r3, r1, #0, #16
 8000b6c:	f360 431f 	bfi	r3, r0, #16, #16
 8000b70:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000b74:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8000b78:	f361 030f 	bfi	r3, r1, #0, #16
 8000b7c:	f2c0 0320 	movt	r3, #32
 8000b80:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000b84:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
 8000b88:	f361 030f 	bfi	r3, r1, #0, #16
 8000b8c:	f2c0 0340 	movt	r3, #64	; 0x40
 8000b90:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
 8000b94:	2010      	movs	r0, #16
 8000b96:	f002 fd2f 	bl	80035f8 <USB_OTG_FlushTxFifo.constprop.86>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f043 0310 	orr.w	r3, r3, #16
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	68e2      	ldr	r2, [r4, #12]
 8000baa:	6113      	str	r3, [r2, #16]
 8000bac:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <link_module_info_end+0xb38>)
 8000bae:	6911      	ldr	r1, [r2, #16]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	60f9      	str	r1, [r7, #12]
 8000bb4:	d002      	beq.n	8000bbc <link_module_info_end+0xa20>
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	06c9      	lsls	r1, r1, #27
 8000bba:	d4f8      	bmi.n	8000bae <link_module_info_end+0xa12>
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f002 fd11 	bl	80035e4 <USB_OTG_BSP_uDelay>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	461d      	mov	r5, r3
 8000bc6:	6922      	ldr	r2, [r4, #16]
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	6113      	str	r3, [r2, #16]
 8000bce:	6922      	ldr	r2, [r4, #16]
 8000bd0:	26ff      	movs	r6, #255	; 0xff
 8000bd2:	6153      	str	r3, [r2, #20]
 8000bd4:	6191      	str	r1, [r2, #24]
 8000bd6:	61d3      	str	r3, [r2, #28]
 8000bd8:	4a3f      	ldr	r2, [pc, #252]	; (8000cd8 <link_module_info_end+0xb3c>)
 8000bda:	7861      	ldrb	r1, [r4, #1]
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d20e      	bcs.n	8000bfe <link_module_info_end+0xa62>
 8000be0:	6810      	ldr	r0, [r2, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	6801      	ldr	r1, [r0, #0]
 8000be6:	2900      	cmp	r1, #0
 8000be8:	bfac      	ite	ge
 8000bea:	2100      	movge	r1, #0
 8000bec:	f04f 4190 	movlt.w	r1, #1207959552	; 0x48000000
 8000bf0:	6001      	str	r1, [r0, #0]
 8000bf2:	6811      	ldr	r1, [r2, #0]
 8000bf4:	610d      	str	r5, [r1, #16]
 8000bf6:	f852 1b04 	ldr.w	r1, [r2], #4
 8000bfa:	608e      	str	r6, [r1, #8]
 8000bfc:	e7ed      	b.n	8000bda <link_module_info_end+0xa3e>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	461d      	mov	r5, r3
 8000c02:	4a36      	ldr	r2, [pc, #216]	; (8000cdc <link_module_info_end+0xb40>)
 8000c04:	26ff      	movs	r6, #255	; 0xff
 8000c06:	7860      	ldrb	r0, [r4, #1]
 8000c08:	4931      	ldr	r1, [pc, #196]	; (8000cd0 <link_module_info_end+0xb34>)
 8000c0a:	4283      	cmp	r3, r0
 8000c0c:	d20e      	bcs.n	8000c2c <link_module_info_end+0xa90>
 8000c0e:	6810      	ldr	r0, [r2, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	6801      	ldr	r1, [r0, #0]
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bfac      	ite	ge
 8000c18:	2100      	movge	r1, #0
 8000c1a:	f04f 4190 	movlt.w	r1, #1207959552	; 0x48000000
 8000c1e:	6001      	str	r1, [r0, #0]
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	610d      	str	r5, [r1, #16]
 8000c24:	f852 1b04 	ldr.w	r1, [r2], #4
 8000c28:	608e      	str	r6, [r1, #8]
 8000c2a:	e7ec      	b.n	8000c06 <link_module_info_end+0xa6a>
 8000c2c:	690a      	ldr	r2, [r1, #16]
 8000c2e:	78c8      	ldrb	r0, [r1, #3]
 8000c30:	6913      	ldr	r3, [r2, #16]
 8000c32:	2801      	cmp	r0, #1
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	6113      	str	r3, [r2, #16]
 8000c3a:	d105      	bne.n	8000c48 <link_module_info_end+0xaac>
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <link_module_info_end+0xb44>)
 8000c3e:	2240      	movs	r2, #64	; 0x40
 8000c40:	f362 4359 	bfi	r3, r2, #17, #9
 8000c44:	690a      	ldr	r2, [r1, #16]
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	68e2      	ldr	r2, [r4, #12]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	6193      	str	r3, [r2, #24]
 8000c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c52:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8000c56:	6153      	str	r3, [r2, #20]
 8000c58:	6051      	str	r1, [r2, #4]
 8000c5a:	68e2      	ldr	r2, [r4, #12]
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	6153      	str	r3, [r2, #20]
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <link_module_info_end+0xb48>)
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	bf14      	ite	ne
 8000c66:	f44f 6300 	movne.w	r3, #2048	; 0x800
 8000c6a:	f44f 6301 	moveq.w	r3, #2064	; 0x810
 8000c6e:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8000c72:	6991      	ldr	r1, [r2, #24]
 8000c74:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	6893      	ldr	r3, [r2, #8]
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6093      	str	r3, [r2, #8]
 8000c88:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
 8000c8c:	b10b      	cbz	r3, 8000c92 <link_module_info_end+0xaf6>
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4798      	blx	r3
 8000c92:	234d      	movs	r3, #77	; 0x4d
 8000c94:	2602      	movs	r6, #2
 8000c96:	2500      	movs	r5, #0
 8000c98:	2401      	movs	r4, #1
 8000c9a:	f107 0010 	add.w	r0, r7, #16
 8000c9e:	743b      	strb	r3, [r7, #16]
 8000ca0:	747e      	strb	r6, [r7, #17]
 8000ca2:	74bd      	strb	r5, [r7, #18]
 8000ca4:	74fc      	strb	r4, [r7, #19]
 8000ca6:	f000 fbbf 	bl	8001428 <NVIC_Init.part.0.lto_priv.93>
 8000caa:	234a      	movs	r3, #74	; 0x4a
 8000cac:	f107 0010 	add.w	r0, r7, #16
 8000cb0:	743b      	strb	r3, [r7, #16]
 8000cb2:	747e      	strb	r6, [r7, #17]
 8000cb4:	74bd      	strb	r5, [r7, #18]
 8000cb6:	74fc      	strb	r4, [r7, #19]
 8000cb8:	f000 fbb6 	bl	8001428 <NVIC_Init.part.0.lto_priv.93>
 8000cbc:	234b      	movs	r3, #75	; 0x4b
 8000cbe:	f107 0010 	add.w	r0, r7, #16
 8000cc2:	743b      	strb	r3, [r7, #16]
 8000cc4:	747e      	strb	r6, [r7, #17]
 8000cc6:	74bd      	strb	r5, [r7, #18]
 8000cc8:	74fc      	strb	r4, [r7, #19]
 8000cca:	f000 fbad 	bl	8001428 <NVIC_Init.part.0.lto_priv.93>
 8000cce:	e7fe      	b.n	8000cce <link_module_info_end+0xb32>
 8000cd0:	200036ec 	.word	0x200036ec
 8000cd4:	00030d41 	.word	0x00030d41
 8000cd8:	20003704 	.word	0x20003704
 8000cdc:	20003734 	.word	0x20003734
 8000ce0:	00010103 	.word	0x00010103
 8000ce4:	80000800 	.word	0x80000800

08000ce8 <USBD_DataOutStage.lto_priv.101>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4604      	mov	r4, r0
 8000cec:	460d      	mov	r5, r1
 8000cee:	2900      	cmp	r1, #0
 8000cf0:	d138      	bne.n	8000d64 <USBD_DataOutStage.lto_priv.101+0x7c>
 8000cf2:	f890 30e1 	ldrb.w	r3, [r0, #225]	; 0xe1
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d13d      	bne.n	8000d76 <USBD_DataOutStage.lto_priv.101+0x8e>
 8000cfa:	f8d0 12e8 	ldr.w	r1, [r0, #744]	; 0x2e8
 8000cfe:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8000d02:	4291      	cmp	r1, r2
 8000d04:	d913      	bls.n	8000d2e <USBD_DataOutStage.lto_priv.101+0x46>
 8000d06:	1a8b      	subs	r3, r1, r2
 8000d08:	78c1      	ldrb	r1, [r0, #3]
 8000d0a:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
 8000d0e:	2901      	cmp	r1, #1
 8000d10:	bf02      	ittt	eq
 8000d12:	f8d0 12d8 	ldreq.w	r1, [r0, #728]	; 0x2d8
 8000d16:	1889      	addeq	r1, r1, r2
 8000d18:	f8c0 12d8 	streq.w	r1, [r0, #728]	; 0x2d8
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	bf28      	it	cs
 8000d20:	461a      	movcs	r2, r3
 8000d22:	f8d0 12d8 	ldr.w	r1, [r0, #728]	; 0x2d8
 8000d26:	b292      	uxth	r2, r2
 8000d28:	f002 fbbe 	bl	80034a8 <DCD_EP_PrepareRx.constprop.7>
 8000d2c:	e023      	b.n	8000d76 <USBD_DataOutStage.lto_priv.101+0x8e>
 8000d2e:	f8d0 34c8 	ldr.w	r3, [r0, #1224]	; 0x4c8
 8000d32:	b19b      	cbz	r3, 8000d5c <USBD_DataOutStage.lto_priv.101+0x74>
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	b18b      	cbz	r3, 8000d5c <USBD_DataOutStage.lto_priv.101+0x74>
 8000d38:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
 8000d3c:	2a03      	cmp	r2, #3
 8000d3e:	d10d      	bne.n	8000d5c <USBD_DataOutStage.lto_priv.101+0x74>
 8000d40:	2101      	movs	r1, #1
 8000d42:	4628      	mov	r0, r5
 8000d44:	4798      	blx	r3
 8000d46:	b148      	cbz	r0, 8000d5c <USBD_DataOutStage.lto_priv.101+0x74>
 8000d48:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	b12b      	cbz	r3, 8000d5c <USBD_DataOutStage.lto_priv.101+0x74>
 8000d50:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
 8000d54:	2a03      	cmp	r2, #3
 8000d56:	d101      	bne.n	8000d5c <USBD_DataOutStage.lto_priv.101+0x74>
 8000d58:	4620      	mov	r0, r4
 8000d5a:	4798      	blx	r3
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f001 f979 	bl	8002054 <USBD_CtlSendStatus>
 8000d62:	e008      	b.n	8000d76 <USBD_DataOutStage.lto_priv.101+0x8e>
 8000d64:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	b123      	cbz	r3, 8000d76 <USBD_DataOutStage.lto_priv.101+0x8e>
 8000d6c:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
 8000d70:	2a03      	cmp	r2, #3
 8000d72:	d100      	bne.n	8000d76 <USBD_DataOutStage.lto_priv.101+0x8e>
 8000d74:	4798      	blx	r3
 8000d76:	2000      	movs	r0, #0
 8000d78:	bd38      	pop	{r3, r4, r5, pc}

08000d7a <DCD_DevDisconnect>:
 8000d7a:	6902      	ldr	r2, [r0, #16]
 8000d7c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d80:	6853      	ldr	r3, [r2, #4]
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6053      	str	r3, [r2, #4]
 8000d88:	f002 bc2c 	b.w	80035e4 <USB_OTG_BSP_uDelay>

08000d8c <DCD_EP_Stall>:
 8000d8c:	b510      	push	{r4, lr}
 8000d8e:	b24c      	sxtb	r4, r1
 8000d90:	2c00      	cmp	r4, #0
 8000d92:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000d96:	f04f 0228 	mov.w	r2, #40	; 0x28
 8000d9a:	bfb5      	itete	lt
 8000d9c:	fb02 0103 	mlalt	r1, r2, r3, r0
 8000da0:	fb02 0101 	mlage	r1, r2, r1, r0
 8000da4:	31ec      	addlt	r1, #236	; 0xec
 8000da6:	f501 7133 	addge.w	r1, r1, #716	; 0x2cc
 8000daa:	2201      	movs	r2, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	708a      	strb	r2, [r1, #2]
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	ea4f 72d4 	mov.w	r2, r4, lsr #31
 8000db6:	700b      	strb	r3, [r1, #0]
 8000db8:	704a      	strb	r2, [r1, #1]
 8000dba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8000dbe:	da06      	bge.n	8000dce <DCD_EP_Stall+0x42>
 8000dc0:	6982      	ldr	r2, [r0, #24]
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da04      	bge.n	8000dd2 <DCD_EP_Stall+0x46>
 8000dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000dcc:	e001      	b.n	8000dd2 <DCD_EP_Stall+0x46>
 8000dce:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	2000      	movs	r0, #0
 8000dda:	bd10      	pop	{r4, pc}

08000ddc <USBD_SetupStage.lto_priv.103>:
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	f890 24af 	ldrb.w	r2, [r0, #1199]	; 0x4af
 8000de2:	f890 34ae 	ldrb.w	r3, [r0, #1198]	; 0x4ae
 8000de6:	f890 54b1 	ldrb.w	r5, [r0, #1201]	; 0x4b1
 8000dea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000dee:	f890 24b0 	ldrb.w	r2, [r0, #1200]	; 0x4b0
 8000df2:	f890 74b3 	ldrb.w	r7, [r0, #1203]	; 0x4b3
 8000df6:	eb02 2505 	add.w	r5, r2, r5, lsl #8
 8000dfa:	f890 24b2 	ldrb.w	r2, [r0, #1202]	; 0x4b2
 8000dfe:	f890 14ac 	ldrb.w	r1, [r0, #1196]	; 0x4ac
 8000e02:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 8000e06:	2701      	movs	r7, #1
 8000e08:	f890 64ad 	ldrb.w	r6, [r0, #1197]	; 0x4ad
 8000e0c:	f880 70e1 	strb.w	r7, [r0, #225]	; 0xe1
 8000e10:	f001 071f 	and.w	r7, r1, #31
 8000e14:	b085      	sub	sp, #20
 8000e16:	b292      	uxth	r2, r2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	2f01      	cmp	r7, #1
 8000e1e:	4604      	mov	r4, r0
 8000e20:	f88d 1008 	strb.w	r1, [sp, #8]
 8000e24:	f88d 6009 	strb.w	r6, [sp, #9]
 8000e28:	f8ad 300a 	strh.w	r3, [sp, #10]
 8000e2c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8000e30:	f8ad 200e 	strh.w	r2, [sp, #14]
 8000e34:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 8000e38:	f000 8172 	beq.w	8001120 <USBD_SetupStage.lto_priv.103+0x344>
 8000e3c:	d303      	bcc.n	8000e46 <USBD_SetupStage.lto_priv.103+0x6a>
 8000e3e:	2f02      	cmp	r7, #2
 8000e40:	f000 8182 	beq.w	8001148 <USBD_SetupStage.lto_priv.103+0x36c>
 8000e44:	e1ec      	b.n	8001220 <USBD_SetupStage.lto_priv.103+0x444>
 8000e46:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8000e4a:	2940      	cmp	r1, #64	; 0x40
 8000e4c:	d116      	bne.n	8000e7c <USBD_SetupStage.lto_priv.103+0xa0>
 8000e4e:	f8d0 34c8 	ldr.w	r3, [r0, #1224]	; 0x4c8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 81e8 	beq.w	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 81e4 	beq.w	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8000e60:	2100      	movs	r1, #0
 8000e62:	a802      	add	r0, sp, #8
 8000e64:	4798      	blx	r3
 8000e66:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000e6a:	b91b      	cbnz	r3, 8000e74 <USBD_SetupStage.lto_priv.103+0x98>
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	f040 815e 	bne.w	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8000e72:	e0e5      	b.n	8001040 <USBD_SetupStage.lto_priv.103+0x264>
 8000e74:	2800      	cmp	r0, #0
 8000e76:	f000 81d7 	beq.w	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8000e7a:	e158      	b.n	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8000e7c:	2e09      	cmp	r6, #9
 8000e7e:	f200 8156 	bhi.w	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8000e82:	e8df f016 	tbh	[pc, r6, lsl #1]
 8000e86:	0105      	.short	0x0105
 8000e88:	01540143 	.word	0x01540143
 8000e8c:	01540115 	.word	0x01540115
 8000e90:	000a00a8 	.word	0x000a00a8
 8000e94:	00f80154 	.word	0x00f80154
 8000e98:	00c6      	.short	0x00c6
 8000e9a:	0a1a      	lsrs	r2, r3, #8
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	2a06      	cmp	r2, #6
 8000ea0:	f200 8145 	bhi.w	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8000ea4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8000ea8:	001a0007 	.word	0x001a0007
 8000eac:	01430033 	.word	0x01430033
 8000eb0:	00640143 	.word	0x00640143
 8000eb4:	007a      	.short	0x007a
 8000eb6:	f8d0 34cc 	ldr.w	r3, [r0, #1228]	; 0x4cc
 8000eba:	f10d 0106 	add.w	r1, sp, #6
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	7880      	ldrb	r0, [r0, #2]
 8000ec2:	4798      	blx	r3
 8000ec4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000ec8:	2b40      	cmp	r3, #64	; 0x40
 8000eca:	d003      	beq.n	8000ed4 <USBD_SetupStage.lto_priv.103+0xf8>
 8000ecc:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d16f      	bne.n	8000fb4 <USBD_SetupStage.lto_priv.103+0x1d8>
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000eda:	e06b      	b.n	8000fb4 <USBD_SetupStage.lto_priv.103+0x1d8>
 8000edc:	f8d0 24c4 	ldr.w	r2, [r0, #1220]	; 0x4c4
 8000ee0:	f10d 0106 	add.w	r1, sp, #6
 8000ee4:	b2d8      	uxtb	r0, r3
 8000ee6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ee8:	4790      	blx	r2
 8000eea:	78a3      	ldrb	r3, [r4, #2]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d109      	bne.n	8000f04 <USBD_SetupStage.lto_priv.103+0x128>
 8000ef0:	7a23      	ldrb	r3, [r4, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d106      	bne.n	8000f04 <USBD_SetupStage.lto_priv.103+0x128>
 8000ef6:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
 8000efa:	f10d 0106 	add.w	r1, sp, #6
 8000efe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f00:	4618      	mov	r0, r3
 8000f02:	4790      	blx	r2
 8000f04:	2302      	movs	r3, #2
 8000f06:	7043      	strb	r3, [r0, #1]
 8000f08:	f8c4 04d0 	str.w	r0, [r4, #1232]	; 0x4d0
 8000f0c:	e052      	b.n	8000fb4 <USBD_SetupStage.lto_priv.103+0x1d8>
 8000f0e:	b2d9      	uxtb	r1, r3
 8000f10:	2903      	cmp	r1, #3
 8000f12:	7880      	ldrb	r0, [r0, #2]
 8000f14:	d014      	beq.n	8000f40 <USBD_SetupStage.lto_priv.103+0x164>
 8000f16:	d806      	bhi.n	8000f26 <USBD_SetupStage.lto_priv.103+0x14a>
 8000f18:	2901      	cmp	r1, #1
 8000f1a:	f8d4 34cc 	ldr.w	r3, [r4, #1228]	; 0x4cc
 8000f1e:	d008      	beq.n	8000f32 <USBD_SetupStage.lto_priv.103+0x156>
 8000f20:	d80c      	bhi.n	8000f3c <USBD_SetupStage.lto_priv.103+0x160>
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	e006      	b.n	8000f34 <USBD_SetupStage.lto_priv.103+0x158>
 8000f26:	2905      	cmp	r1, #5
 8000f28:	d012      	beq.n	8000f50 <USBD_SetupStage.lto_priv.103+0x174>
 8000f2a:	d30d      	bcc.n	8000f48 <USBD_SetupStage.lto_priv.103+0x16c>
 8000f2c:	29ee      	cmp	r1, #238	; 0xee
 8000f2e:	d013      	beq.n	8000f58 <USBD_SetupStage.lto_priv.103+0x17c>
 8000f30:	e017      	b.n	8000f62 <USBD_SetupStage.lto_priv.103+0x186>
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f10d 0106 	add.w	r1, sp, #6
 8000f38:	4798      	blx	r3
 8000f3a:	e03b      	b.n	8000fb4 <USBD_SetupStage.lto_priv.103+0x1d8>
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	e7f9      	b.n	8000f34 <USBD_SetupStage.lto_priv.103+0x158>
 8000f40:	f8d4 34cc 	ldr.w	r3, [r4, #1228]	; 0x4cc
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	e7f5      	b.n	8000f34 <USBD_SetupStage.lto_priv.103+0x158>
 8000f48:	f8d4 34cc 	ldr.w	r3, [r4, #1228]	; 0x4cc
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	e7f1      	b.n	8000f34 <USBD_SetupStage.lto_priv.103+0x158>
 8000f50:	f8d4 34cc 	ldr.w	r3, [r4, #1228]	; 0x4cc
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	e7ed      	b.n	8000f34 <USBD_SetupStage.lto_priv.103+0x158>
 8000f58:	f8d4 34cc 	ldr.w	r3, [r4, #1228]	; 0x4cc
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1e8      	bne.n	8000f34 <USBD_SetupStage.lto_priv.103+0x158>
 8000f62:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8000f66:	f10d 0206 	add.w	r2, sp, #6
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4798      	blx	r3
 8000f6e:	e021      	b.n	8000fb4 <USBD_SetupStage.lto_priv.103+0x1d8>
 8000f70:	7880      	ldrb	r0, [r0, #2]
 8000f72:	2800      	cmp	r0, #0
 8000f74:	f040 80db 	bne.w	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8000f78:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8000f7c:	f10d 0106 	add.w	r1, sp, #6
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f82:	4798      	blx	r3
 8000f84:	49aa      	ldr	r1, [pc, #680]	; (8001230 <USBD_SetupStage.lto_priv.103+0x454>)
 8000f86:	7b83      	ldrb	r3, [r0, #14]
 8000f88:	710b      	strb	r3, [r1, #4]
 8000f8a:	7bc3      	ldrb	r3, [r0, #15]
 8000f8c:	714b      	strb	r3, [r1, #5]
 8000f8e:	7c03      	ldrb	r3, [r0, #16]
 8000f90:	4608      	mov	r0, r1
 8000f92:	718b      	strb	r3, [r1, #6]
 8000f94:	230a      	movs	r3, #10
 8000f96:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000f9a:	e00b      	b.n	8000fb4 <USBD_SetupStage.lto_priv.103+0x1d8>
 8000f9c:	7880      	ldrb	r0, [r0, #2]
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	f040 80c5 	bne.w	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8000fa4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8000fa8:	f10d 0106 	add.w	r1, sp, #6
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	4798      	blx	r3
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	7043      	strb	r3, [r0, #1]
 8000fb4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	f000 8135 	beq.w	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8000fbe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 8130 	beq.w	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	bf28      	it	cs
 8000fcc:	461a      	movcs	r2, r3
 8000fce:	4601      	mov	r1, r0
 8000fd0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8000fd4:	e11c      	b.n	8001210 <USBD_SetupStage.lto_priv.103+0x434>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	f040 80a9 	bne.w	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	f040 80a6 	bne.w	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8000fe2:	f890 10e2 	ldrb.w	r1, [r0, #226]	; 0xe2
 8000fe6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8000fea:	2903      	cmp	r1, #3
 8000fec:	f000 809f 	beq.w	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8000ff0:	6901      	ldr	r1, [r0, #16]
 8000ff2:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
 8000ff6:	f363 120a 	bfi	r2, r3, #4, #7
 8000ffa:	680b      	ldr	r3, [r1, #0]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	600a      	str	r2, [r1, #0]
 8001000:	f001 f828 	bl	8002054 <USBD_CtlSendStatus>
 8001004:	b10d      	cbz	r5, 800100a <USBD_SetupStage.lto_priv.103+0x22e>
 8001006:	2302      	movs	r3, #2
 8001008:	e000      	b.n	800100c <USBD_SetupStage.lto_priv.103+0x230>
 800100a:	2301      	movs	r3, #1
 800100c:	f884 30e2 	strb.w	r3, [r4, #226]	; 0xe2
 8001010:	e10a      	b.n	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8001012:	b2d9      	uxtb	r1, r3
 8001014:	4d87      	ldr	r5, [pc, #540]	; (8001234 <USBD_SetupStage.lto_priv.103+0x458>)
 8001016:	2901      	cmp	r1, #1
 8001018:	7029      	strb	r1, [r5, #0]
 800101a:	f200 8088 	bhi.w	800112e <USBD_SetupStage.lto_priv.103+0x352>
 800101e:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 8001022:	2b02      	cmp	r3, #2
 8001024:	d002      	beq.n	800102c <USBD_SetupStage.lto_priv.103+0x250>
 8001026:	2b03      	cmp	r3, #3
 8001028:	d00e      	beq.n	8001048 <USBD_SetupStage.lto_priv.103+0x26c>
 800102a:	e080      	b.n	800112e <USBD_SetupStage.lto_priv.103+0x352>
 800102c:	b141      	cbz	r1, 8001040 <USBD_SetupStage.lto_priv.103+0x264>
 800102e:	2101      	movs	r1, #1
 8001030:	2303      	movs	r3, #3
 8001032:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
 8001036:	f880 30e2 	strb.w	r3, [r0, #226]	; 0xe2
 800103a:	4620      	mov	r0, r4
 800103c:	f001 fab0 	bl	80025a0 <USBD_SetCfg>
 8001040:	4620      	mov	r0, r4
 8001042:	f001 f807 	bl	8002054 <USBD_CtlSendStatus>
 8001046:	e0ef      	b.n	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8001048:	b949      	cbnz	r1, 800105e <USBD_SetupStage.lto_priv.103+0x282>
 800104a:	2302      	movs	r3, #2
 800104c:	f880 30e2 	strb.w	r3, [r0, #226]	; 0xe2
 8001050:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 8001054:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4798      	blx	r3
 800105c:	e7f0      	b.n	8001040 <USBD_SetupStage.lto_priv.103+0x264>
 800105e:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
 8001062:	2901      	cmp	r1, #1
 8001064:	d0ec      	beq.n	8001040 <USBD_SetupStage.lto_priv.103+0x264>
 8001066:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4798      	blx	r3
 800106e:	7829      	ldrb	r1, [r5, #0]
 8001070:	f884 10e0 	strb.w	r1, [r4, #224]	; 0xe0
 8001074:	e7e1      	b.n	800103a <USBD_SetupStage.lto_priv.103+0x25e>
 8001076:	2a01      	cmp	r2, #1
 8001078:	d159      	bne.n	800112e <USBD_SetupStage.lto_priv.103+0x352>
 800107a:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 800107e:	2b02      	cmp	r3, #2
 8001080:	d004      	beq.n	800108c <USBD_SetupStage.lto_priv.103+0x2b0>
 8001082:	2b03      	cmp	r3, #3
 8001084:	d153      	bne.n	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8001086:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 800108a:	e0c1      	b.n	8001210 <USBD_SetupStage.lto_priv.103+0x434>
 800108c:	496a      	ldr	r1, [pc, #424]	; (8001238 <USBD_SetupStage.lto_priv.103+0x45c>)
 800108e:	e0bf      	b.n	8001210 <USBD_SetupStage.lto_priv.103+0x434>
 8001090:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 8001094:	3b02      	subs	r3, #2
 8001096:	2b01      	cmp	r3, #1
 8001098:	d849      	bhi.n	800112e <USBD_SetupStage.lto_priv.103+0x352>
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <USBD_SetupStage.lto_priv.103+0x460>)
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 80010a4:	b10a      	cbz	r2, 80010aa <USBD_SetupStage.lto_priv.103+0x2ce>
 80010a6:	2203      	movs	r2, #3
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	2202      	movs	r2, #2
 80010ac:	4963      	ldr	r1, [pc, #396]	; (800123c <USBD_SetupStage.lto_priv.103+0x460>)
 80010ae:	e0af      	b.n	8001210 <USBD_SetupStage.lto_priv.103+0x434>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d108      	bne.n	80010c6 <USBD_SetupStage.lto_priv.103+0x2ea>
 80010b4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80010b8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 80010bc:	a902      	add	r1, sp, #8
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4620      	mov	r0, r4
 80010c2:	4798      	blx	r3
 80010c4:	e7bc      	b.n	8001040 <USBD_SetupStage.lto_priv.103+0x264>
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	f040 80ae 	bne.w	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 80010cc:	f015 0fff 	tst.w	r5, #255	; 0xff
 80010d0:	f040 80aa 	bne.w	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 80010d4:	6903      	ldr	r3, [r0, #16]
 80010d6:	0a2d      	lsrs	r5, r5, #8
 80010d8:	3d01      	subs	r5, #1
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2d04      	cmp	r5, #4
 80010de:	d80f      	bhi.n	8001100 <USBD_SetupStage.lto_priv.103+0x324>
 80010e0:	e8df f005 	tbb	[pc, r5]
 80010e4:	09070503 	.word	0x09070503
 80010e8:	0b          	.byte	0x0b
 80010e9:	00          	.byte	0x00
 80010ea:	2201      	movs	r2, #1
 80010ec:	e006      	b.n	80010fc <USBD_SetupStage.lto_priv.103+0x320>
 80010ee:	2202      	movs	r2, #2
 80010f0:	e004      	b.n	80010fc <USBD_SetupStage.lto_priv.103+0x320>
 80010f2:	2203      	movs	r2, #3
 80010f4:	e002      	b.n	80010fc <USBD_SetupStage.lto_priv.103+0x320>
 80010f6:	2204      	movs	r2, #4
 80010f8:	e000      	b.n	80010fc <USBD_SetupStage.lto_priv.103+0x320>
 80010fa:	2205      	movs	r2, #5
 80010fc:	f362 1306 	bfi	r3, r2, #4, #3
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <USBD_SetupStage.lto_priv.103+0x464>)
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
 800110a:	e799      	b.n	8001040 <USBD_SetupStage.lto_priv.103+0x264>
 800110c:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
 8001110:	3a02      	subs	r2, #2
 8001112:	2a01      	cmp	r2, #1
 8001114:	d80b      	bhi.n	800112e <USBD_SetupStage.lto_priv.103+0x352>
 8001116:	2b01      	cmp	r3, #1
 8001118:	f040 8086 	bne.w	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 800111c:	2300      	movs	r3, #0
 800111e:	e7c9      	b.n	80010b4 <USBD_SetupStage.lto_priv.103+0x2d8>
 8001120:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 8001124:	2b03      	cmp	r3, #3
 8001126:	d177      	bne.n	8001218 <USBD_SetupStage.lto_priv.103+0x43c>
 8001128:	b2ed      	uxtb	r5, r5
 800112a:	2d0a      	cmp	r5, #10
 800112c:	d902      	bls.n	8001134 <USBD_SetupStage.lto_priv.103+0x358>
 800112e:	a902      	add	r1, sp, #8
 8001130:	4620      	mov	r0, r4
 8001132:	e072      	b.n	800121a <USBD_SetupStage.lto_priv.103+0x43e>
 8001134:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 8001138:	a902      	add	r1, sp, #8
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4798      	blx	r3
 800113e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d170      	bne.n	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8001146:	e77b      	b.n	8001040 <USBD_SetupStage.lto_priv.103+0x264>
 8001148:	2e01      	cmp	r6, #1
 800114a:	b2e9      	uxtb	r1, r5
 800114c:	d00f      	beq.n	800116e <USBD_SetupStage.lto_priv.103+0x392>
 800114e:	d33c      	bcc.n	80011ca <USBD_SetupStage.lto_priv.103+0x3ee>
 8001150:	2e03      	cmp	r6, #3
 8001152:	d169      	bne.n	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8001154:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
 8001158:	2a02      	cmp	r2, #2
 800115a:	d03d      	beq.n	80011d8 <USBD_SetupStage.lto_priv.103+0x3fc>
 800115c:	2a03      	cmp	r2, #3
 800115e:	d15b      	bne.n	8001218 <USBD_SetupStage.lto_priv.103+0x43c>
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1a9      	bne.n	80010b8 <USBD_SetupStage.lto_priv.103+0x2dc>
 8001164:	064a      	lsls	r2, r1, #25
 8001166:	d0a7      	beq.n	80010b8 <USBD_SetupStage.lto_priv.103+0x2dc>
 8001168:	f7ff fe10 	bl	8000d8c <DCD_EP_Stall>
 800116c:	e7a4      	b.n	80010b8 <USBD_SetupStage.lto_priv.103+0x2dc>
 800116e:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
 8001172:	2a02      	cmp	r2, #2
 8001174:	d030      	beq.n	80011d8 <USBD_SetupStage.lto_priv.103+0x3fc>
 8001176:	2a03      	cmp	r2, #3
 8001178:	d14e      	bne.n	8001218 <USBD_SetupStage.lto_priv.103+0x43c>
 800117a:	2b00      	cmp	r3, #0
 800117c:	d154      	bne.n	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 800117e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8001182:	f43f af5d 	beq.w	8001040 <USBD_SetupStage.lto_priv.103+0x264>
 8001186:	b26d      	sxtb	r5, r5
 8001188:	2d00      	cmp	r5, #0
 800118a:	f04f 0228 	mov.w	r2, #40	; 0x28
 800118e:	bfb5      	itete	lt
 8001190:	fb02 0103 	mlalt	r1, r2, r3, r0
 8001194:	fb02 0101 	mlage	r1, r2, r1, r0
 8001198:	31ec      	addlt	r1, #236	; 0xec
 800119a:	f501 7133 	addge.w	r1, r1, #716	; 0x2cc
 800119e:	2200      	movs	r2, #0
 80011a0:	708a      	strb	r2, [r1, #2]
 80011a2:	0fea      	lsrs	r2, r5, #31
 80011a4:	700b      	strb	r3, [r1, #0]
 80011a6:	704a      	strb	r2, [r1, #1]
 80011a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80011ac:	2d00      	cmp	r5, #0
 80011ae:	bfb4      	ite	lt
 80011b0:	699a      	ldrlt	r2, [r3, #24]
 80011b2:	6c9a      	ldrge	r2, [r3, #72]	; 0x48
 80011b4:	78c9      	ldrb	r1, [r1, #3]
 80011b6:	6813      	ldr	r3, [r2, #0]
 80011b8:	3902      	subs	r1, #2
 80011ba:	f36f 5355 	bfc	r3, #21, #1
 80011be:	2901      	cmp	r1, #1
 80011c0:	bf98      	it	ls
 80011c2:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	e776      	b.n	80010b8 <USBD_SetupStage.lto_priv.103+0x2dc>
 80011ca:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d002      	beq.n	80011d8 <USBD_SetupStage.lto_priv.103+0x3fc>
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d003      	beq.n	80011de <USBD_SetupStage.lto_priv.103+0x402>
 80011d6:	e01f      	b.n	8001218 <USBD_SetupStage.lto_priv.103+0x43c>
 80011d8:	064b      	lsls	r3, r1, #25
 80011da:	d025      	beq.n	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 80011dc:	e022      	b.n	8001224 <USBD_SetupStage.lto_priv.103+0x448>
 80011de:	f015 0f80 	tst.w	r5, #128	; 0x80
 80011e2:	f04f 0028 	mov.w	r0, #40	; 0x28
 80011e6:	4a17      	ldr	r2, [pc, #92]	; (8001244 <USBD_SetupStage.lto_priv.103+0x468>)
 80011e8:	d00d      	beq.n	8001206 <USBD_SetupStage.lto_priv.103+0x42a>
 80011ea:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80011ee:	fb00 4103 	mla	r1, r0, r3, r4
 80011f2:	f891 30ee 	ldrb.w	r3, [r1, #238]	; 0xee
 80011f6:	b10b      	cbz	r3, 80011fc <USBD_SetupStage.lto_priv.103+0x420>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <USBD_SetupStage.lto_priv.103+0x422>
 80011fc:	2300      	movs	r3, #0
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4910      	ldr	r1, [pc, #64]	; (8001244 <USBD_SetupStage.lto_priv.103+0x468>)
 8001202:	2202      	movs	r2, #2
 8001204:	e004      	b.n	8001210 <USBD_SetupStage.lto_priv.103+0x434>
 8001206:	fb00 4101 	mla	r1, r0, r1, r4
 800120a:	f891 32ce 	ldrb.w	r3, [r1, #718]	; 0x2ce
 800120e:	e7f2      	b.n	80011f6 <USBD_SetupStage.lto_priv.103+0x41a>
 8001210:	4620      	mov	r0, r4
 8001212:	f000 ff2d 	bl	8002070 <USBD_CtlSendData>
 8001216:	e007      	b.n	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8001218:	a902      	add	r1, sp, #8
 800121a:	f000 ff36 	bl	800208a <USBD_CtlError>
 800121e:	e003      	b.n	8001228 <USBD_SetupStage.lto_priv.103+0x44c>
 8001220:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001224:	f7ff fdb2 	bl	8000d8c <DCD_EP_Stall>
 8001228:	2000      	movs	r0, #0
 800122a:	b005      	add	sp, #20
 800122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122e:	bf00      	nop
 8001230:	2000234c 	.word	0x2000234c
 8001234:	200024b8 	.word	0x200024b8
 8001238:	200024c4 	.word	0x200024c4
 800123c:	200024bc 	.word	0x200024bc
 8001240:	200025b0 	.word	0x200025b0
 8001244:	200024c0 	.word	0x200024c0

08001248 <USB_OTG_CoreReset.isra.1.lto_priv.123>:
 8001248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800124a:	4605      	mov	r5, r0
 800124c:	2300      	movs	r3, #0
 800124e:	4c11      	ldr	r4, [pc, #68]	; (8001294 <USB_OTG_CoreReset.isra.1.lto_priv.123+0x4c>)
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	2003      	movs	r0, #3
 8001254:	f002 f9c6 	bl	80035e4 <USB_OTG_BSP_uDelay>
 8001258:	682a      	ldr	r2, [r5, #0]
 800125a:	3c01      	subs	r4, #1
 800125c:	6913      	ldr	r3, [r2, #16]
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	d014      	beq.n	800128c <USB_OTG_CoreReset.isra.1.lto_priv.123+0x44>
 8001262:	9b01      	ldr	r3, [sp, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	daf4      	bge.n	8001252 <USB_OTG_CoreReset.isra.1.lto_priv.123+0xa>
 8001268:	9b01      	ldr	r3, [sp, #4]
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	9b01      	ldr	r3, [sp, #4]
 8001272:	6113      	str	r3, [r2, #16]
 8001274:	6829      	ldr	r1, [r5, #0]
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <USB_OTG_CoreReset.isra.1.lto_priv.123+0x4c>)
 8001278:	690a      	ldr	r2, [r1, #16]
 800127a:	3b01      	subs	r3, #1
 800127c:	9201      	str	r2, [sp, #4]
 800127e:	d002      	beq.n	8001286 <USB_OTG_CoreReset.isra.1.lto_priv.123+0x3e>
 8001280:	9a01      	ldr	r2, [sp, #4]
 8001282:	07d2      	lsls	r2, r2, #31
 8001284:	d4f8      	bmi.n	8001278 <USB_OTG_CoreReset.isra.1.lto_priv.123+0x30>
 8001286:	2003      	movs	r0, #3
 8001288:	f002 f9ac 	bl	80035e4 <USB_OTG_BSP_uDelay>
 800128c:	2000      	movs	r0, #0
 800128e:	b003      	add	sp, #12
 8001290:	bd30      	pop	{r4, r5, pc}
 8001292:	bf00      	nop
 8001294:	00030d41 	.word	0x00030d41

08001298 <USB_OTG_EP0_OutStart>:
 8001298:	b082      	sub	sp, #8
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	23c0      	movs	r3, #192	; 0xc0
 80012a0:	f88d 3003 	strb.w	r3, [sp, #3]
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	2201      	movs	r2, #1
 80012aa:	f362 03c4 	bfi	r3, r2, #3, #2
 80012ae:	f88d 3002 	strb.w	r3, [sp, #2]
 80012b2:	2318      	movs	r3, #24
 80012b4:	f88d 3000 	strb.w	r3, [sp]
 80012b8:	9a00      	ldr	r2, [sp, #0]
 80012ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80012bc:	611a      	str	r2, [r3, #16]
 80012be:	78c3      	ldrb	r3, [r0, #3]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d108      	bne.n	80012d6 <USB_OTG_EP0_OutStart+0x3e>
 80012c4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80012c6:	f200 42ac 	addw	r2, r0, #1196	; 0x4ac
 80012ca:	615a      	str	r2, [r3, #20]
 80012cc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	b002      	add	sp, #8
 80012d8:	4770      	bx	lr

080012da <USB_OTG_EP0StartXfer>:
 80012da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012dc:	784f      	ldrb	r7, [r1, #1]
 80012de:	694e      	ldr	r6, [r1, #20]
 80012e0:	2f01      	cmp	r7, #1
 80012e2:	d13b      	bne.n	800135c <USB_OTG_EP0StartXfer+0x82>
 80012e4:	6985      	ldr	r5, [r0, #24]
 80012e6:	682c      	ldr	r4, [r5, #0]
 80012e8:	692b      	ldr	r3, [r5, #16]
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80012f2:	b936      	cbnz	r6, 8001302 <USB_OTG_EP0StartXfer+0x28>
 80012f4:	f366 0206 	bfi	r2, r6, #0, #7
 80012f8:	f88d 2000 	strb.w	r2, [sp]
 80012fc:	f367 03c4 	bfi	r3, r7, #3, #2
 8001300:	e00e      	b.n	8001320 <USB_OTG_EP0StartXfer+0x46>
 8001302:	688f      	ldr	r7, [r1, #8]
 8001304:	42be      	cmp	r6, r7
 8001306:	bf8c      	ite	hi
 8001308:	f367 0206 	bfihi	r2, r7, #0, #7
 800130c:	f366 0206 	bfils	r2, r6, #0, #7
 8001310:	f88d 2000 	strb.w	r2, [sp]
 8001314:	f04f 0201 	mov.w	r2, #1
 8001318:	bf88      	it	hi
 800131a:	614f      	strhi	r7, [r1, #20]
 800131c:	f362 03c4 	bfi	r3, r2, #3, #2
 8001320:	f88d 3002 	strb.w	r3, [sp, #2]
 8001324:	9b00      	ldr	r3, [sp, #0]
 8001326:	612b      	str	r3, [r5, #16]
 8001328:	78c3      	ldrb	r3, [r0, #3]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d105      	bne.n	800133a <USB_OTG_EP0StartXfer+0x60>
 800132e:	780b      	ldrb	r3, [r1, #0]
 8001330:	690a      	ldr	r2, [r1, #16]
 8001332:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800133e:	602c      	str	r4, [r5, #0]
 8001340:	78c3      	ldrb	r3, [r0, #3]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d136      	bne.n	80013b4 <USB_OTG_EP0StartXfer+0xda>
 8001346:	694b      	ldr	r3, [r1, #20]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d033      	beq.n	80013b4 <USB_OTG_EP0StartXfer+0xda>
 800134c:	6900      	ldr	r0, [r0, #16]
 800134e:	7809      	ldrb	r1, [r1, #0]
 8001350:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001352:	2301      	movs	r3, #1
 8001354:	408b      	lsls	r3, r1
 8001356:	4313      	orrs	r3, r2
 8001358:	6343      	str	r3, [r0, #52]	; 0x34
 800135a:	e02b      	b.n	80013b4 <USB_OTG_EP0StartXfer+0xda>
 800135c:	780d      	ldrb	r5, [r1, #0]
 800135e:	688f      	ldr	r7, [r1, #8]
 8001360:	3510      	adds	r5, #16
 8001362:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	681c      	ldr	r4, [r3, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001374:	b106      	cbz	r6, 8001378 <USB_OTG_EP0StartXfer+0x9e>
 8001376:	614f      	str	r7, [r1, #20]
 8001378:	f367 0206 	bfi	r2, r7, #0, #7
 800137c:	f88d 2000 	strb.w	r2, [sp]
 8001380:	2201      	movs	r2, #1
 8001382:	f362 03c4 	bfi	r3, r2, #3, #2
 8001386:	f88d 3002 	strb.w	r3, [sp, #2]
 800138a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800138e:	68ab      	ldr	r3, [r5, #8]
 8001390:	9a00      	ldr	r2, [sp, #0]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	78c3      	ldrb	r3, [r0, #3]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d105      	bne.n	80013a6 <USB_OTG_EP0StartXfer+0xcc>
 800139a:	780b      	ldrb	r3, [r1, #0]
 800139c:	690a      	ldr	r2, [r1, #16]
 800139e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80013a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	780b      	ldrb	r3, [r1, #0]
 80013a8:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80013ac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013b0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80013b2:	601c      	str	r4, [r3, #0]
 80013b4:	2000      	movs	r0, #0
 80013b6:	b003      	add	sp, #12
 80013b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ba <USB_OTG_EPActivate>:
 80013ba:	b530      	push	{r4, r5, lr}
 80013bc:	784c      	ldrb	r4, [r1, #1]
 80013be:	2200      	movs	r2, #0
 80013c0:	2c01      	cmp	r4, #1
 80013c2:	780b      	ldrb	r3, [r1, #0]
 80013c4:	d107      	bne.n	80013d6 <USB_OTG_EPActivate+0x1c>
 80013c6:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80013ca:	fa04 f303 	lsl.w	r3, r4, r3
 80013ce:	69ad      	ldr	r5, [r5, #24]
 80013d0:	f363 020f 	bfi	r2, r3, #0, #16
 80013d4:	e007      	b.n	80013e6 <USB_OTG_EPActivate+0x2c>
 80013d6:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80013da:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80013dc:	2401      	movs	r4, #1
 80013de:	fa04 f303 	lsl.w	r3, r4, r3
 80013e2:	f363 421f 	bfi	r2, r3, #16, #16
 80013e6:	682b      	ldr	r3, [r5, #0]
 80013e8:	041c      	lsls	r4, r3, #16
 80013ea:	d40d      	bmi.n	8001408 <USB_OTG_EPActivate+0x4e>
 80013ec:	688c      	ldr	r4, [r1, #8]
 80013ee:	f364 030a 	bfi	r3, r4, #0, #11
 80013f2:	78cc      	ldrb	r4, [r1, #3]
 80013f4:	f364 4393 	bfi	r3, r4, #18, #2
 80013f8:	88cc      	ldrh	r4, [r1, #6]
 80013fa:	f364 5399 	bfi	r3, r4, #22, #4
 80013fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001406:	602b      	str	r3, [r5, #0]
 8001408:	780b      	ldrb	r3, [r1, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	6903      	ldr	r3, [r0, #16]
 800140e:	d105      	bne.n	800141c <USB_OTG_EPActivate+0x62>
 8001410:	7ac1      	ldrb	r1, [r0, #11]
 8001412:	b919      	cbnz	r1, 800141c <USB_OTG_EPActivate+0x62>
 8001414:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001416:	430a      	orrs	r2, r1
 8001418:	63da      	str	r2, [r3, #60]	; 0x3c
 800141a:	e002      	b.n	8001422 <USB_OTG_EPActivate+0x68>
 800141c:	69d9      	ldr	r1, [r3, #28]
 800141e:	430a      	orrs	r2, r1
 8001420:	61da      	str	r2, [r3, #28]
 8001422:	2000      	movs	r0, #0
 8001424:	bd30      	pop	{r4, r5, pc}
	...

08001428 <NVIC_Init.part.0.lto_priv.93>:
  *         function should be called before.
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
 8001428:	b510      	push	{r4, lr}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <NVIC_Init.part.0.lto_priv.93+0x48>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800142c:	7844      	ldrb	r4, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	43d2      	mvns	r2, r2
 8001432:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001436:	f1c2 0304 	rsb	r3, r2, #4
 800143a:	b2db      	uxtb	r3, r3
 800143c:	fa04 f303 	lsl.w	r3, r4, r3
 8001440:	b2d9      	uxtb	r1, r3
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001442:	230f      	movs	r3, #15
 8001444:	4113      	asrs	r3, r2
 8001446:	7882      	ldrb	r2, [r0, #2]
 8001448:	4013      	ands	r3, r2
 800144a:	430b      	orrs	r3, r1

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800144c:	7802      	ldrb	r2, [r0, #0]
 800144e:	4909      	ldr	r1, [pc, #36]	; (8001474 <NVIC_Init.part.0.lto_priv.93+0x4c>)
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);

    tmppriority = tmppriority << 0x04;
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	b2db      	uxtb	r3, r3

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001454:	440a      	add	r2, r1
 8001456:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800145a:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800145c:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800145e:	0958      	lsrs	r0, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001468:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 800146c:	bd10      	pop	{r4, pc}
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	e000e100 	.word	0xe000e100

08001478 <Get_RGB_LED_Max_Value>:
 8001478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800147c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800147e:	3001      	adds	r0, #1
 8001480:	b280      	uxth	r0, r0
 8001482:	4770      	bx	lr

08001484 <Get_RGB_LED_Values>:
 8001484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800148a:	8002      	strh	r2, [r0, #0]
 800148c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800148e:	8042      	strh	r2, [r0, #2]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	8083      	strh	r3, [r0, #4]
 8001494:	4770      	bx	lr
	...

08001498 <Led_Set_Value>:
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <Led_Set_Value+0x40>)
 800149a:	2318      	movs	r3, #24
 800149c:	fb03 2000 	mla	r0, r3, r0, r2
 80014a0:	7d83      	ldrb	r3, [r0, #22]
 80014a2:	07da      	lsls	r2, r3, #31
 80014a4:	d517      	bpl.n	80014d6 <Led_Set_Value+0x3e>
 80014a6:	075b      	lsls	r3, r3, #29
 80014a8:	6902      	ldr	r2, [r0, #16]
 80014aa:	8a80      	ldrh	r0, [r0, #20]
 80014ac:	d405      	bmi.n	80014ba <Led_Set_Value+0x22>
 80014ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	3301      	adds	r3, #1
 80014b6:	1a59      	subs	r1, r3, r1
 80014b8:	b289      	uxth	r1, r1
 80014ba:	b908      	cbnz	r0, 80014c0 <Led_Set_Value+0x28>
 80014bc:	6351      	str	r1, [r2, #52]	; 0x34
 80014be:	4770      	bx	lr
 80014c0:	2804      	cmp	r0, #4
 80014c2:	d101      	bne.n	80014c8 <Led_Set_Value+0x30>
 80014c4:	6391      	str	r1, [r2, #56]	; 0x38
 80014c6:	4770      	bx	lr
 80014c8:	2808      	cmp	r0, #8
 80014ca:	d101      	bne.n	80014d0 <Led_Set_Value+0x38>
 80014cc:	63d1      	str	r1, [r2, #60]	; 0x3c
 80014ce:	4770      	bx	lr
 80014d0:	280c      	cmp	r0, #12
 80014d2:	bf08      	it	eq
 80014d4:	6411      	streq	r1, [r2, #64]	; 0x40
 80014d6:	4770      	bx	lr
 80014d8:	200024e8 	.word	0x200024e8

080014dc <Set_RGB_LED_Values>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	460d      	mov	r5, r1
 80014e0:	4614      	mov	r4, r2
 80014e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e6:	6398      	str	r0, [r3, #56]	; 0x38
 80014e8:	63d9      	str	r1, [r3, #60]	; 0x3c
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
 80014ec:	4601      	mov	r1, r0
 80014ee:	2006      	movs	r0, #6
 80014f0:	f7ff ffd2 	bl	8001498 <Led_Set_Value>
 80014f4:	4629      	mov	r1, r5
 80014f6:	2007      	movs	r0, #7
 80014f8:	f7ff ffce 	bl	8001498 <Led_Set_Value>
 80014fc:	4621      	mov	r1, r4
 80014fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001502:	2005      	movs	r0, #5
 8001504:	f7ff bfc8 	b.w	8001498 <Led_Set_Value>

08001508 <addressToSectorIndex>:
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <addressToSectorIndex+0x4c>)
 800150a:	4298      	cmp	r0, r3
 800150c:	d911      	bls.n	8001532 <addressToSectorIndex+0x2a>
 800150e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001512:	4298      	cmp	r0, r3
 8001514:	d90f      	bls.n	8001536 <addressToSectorIndex+0x2e>
 8001516:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800151a:	4298      	cmp	r0, r3
 800151c:	d90d      	bls.n	800153a <addressToSectorIndex+0x32>
 800151e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001522:	4298      	cmp	r0, r3
 8001524:	d90b      	bls.n	800153e <addressToSectorIndex+0x36>
 8001526:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800152a:	4298      	cmp	r0, r3
 800152c:	d80b      	bhi.n	8001546 <addressToSectorIndex+0x3e>
 800152e:	2005      	movs	r0, #5
 8001530:	e006      	b.n	8001540 <addressToSectorIndex+0x38>
 8001532:	2001      	movs	r0, #1
 8001534:	e004      	b.n	8001540 <addressToSectorIndex+0x38>
 8001536:	2002      	movs	r0, #2
 8001538:	e002      	b.n	8001540 <addressToSectorIndex+0x38>
 800153a:	2003      	movs	r0, #3
 800153c:	e000      	b.n	8001540 <addressToSectorIndex+0x38>
 800153e:	2004      	movs	r0, #4
 8001540:	3801      	subs	r0, #1
 8001542:	b280      	uxth	r0, r0
 8001544:	4770      	bx	lr
 8001546:	f100 4077 	add.w	r0, r0, #4143972352	; 0xf7000000
 800154a:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
 800154e:	0c40      	lsrs	r0, r0, #17
 8001550:	3005      	adds	r0, #5
 8001552:	4770      	bx	lr
 8001554:	08003fff 	.word	0x08003fff

08001558 <Compute_CRC32>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <Compute_CRC32+0x54>)
 800155a:	b530      	push	{r4, r5, lr}
 800155c:	4615      	mov	r5, r2
 800155e:	2301      	movs	r3, #1
 8001560:	6093      	str	r3, [r2, #8]
 8001562:	f021 0303 	bic.w	r3, r1, #3
 8001566:	4403      	add	r3, r0
 8001568:	4298      	cmp	r0, r3
 800156a:	d005      	beq.n	8001578 <Compute_CRC32+0x20>
 800156c:	f850 4b04 	ldr.w	r4, [r0], #4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	fa94 f4a4 	rbit	r4, r4
 8001574:	602c      	str	r4, [r5, #0]
 8001576:	e7f7      	b.n	8001568 <Compute_CRC32+0x10>
 8001578:	6810      	ldr	r0, [r2, #0]
 800157a:	fa90 f0a0 	rbit	r0, r0
 800157e:	f001 0103 	and.w	r1, r1, #3
 8001582:	4419      	add	r1, r3
 8001584:	428b      	cmp	r3, r1
 8001586:	d00e      	beq.n	80015a6 <Compute_CRC32+0x4e>
 8001588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800158c:	4050      	eors	r0, r2
 800158e:	2208      	movs	r2, #8
 8001590:	f010 0f01 	tst.w	r0, #1
 8001594:	ea4f 0450 	mov.w	r4, r0, lsr #1
 8001598:	bf16      	itet	ne
 800159a:	4805      	ldrne	r0, [pc, #20]	; (80015b0 <Compute_CRC32+0x58>)
 800159c:	4620      	moveq	r0, r4
 800159e:	4060      	eorne	r0, r4
 80015a0:	3a01      	subs	r2, #1
 80015a2:	d1f5      	bne.n	8001590 <Compute_CRC32+0x38>
 80015a4:	e7ee      	b.n	8001584 <Compute_CRC32+0x2c>
 80015a6:	43c0      	mvns	r0, r0
 80015a8:	bd30      	pop	{r4, r5, pc}
 80015aa:	bf00      	nop
 80015ac:	40023000 	.word	0x40023000
 80015b0:	edb88320 	.word	0xedb88320

080015b4 <FLASH_CheckCopyMemory>:
 80015b4:	b570      	push	{r4, r5, r6, lr}
 80015b6:	9e04      	ldr	r6, [sp, #16]
 80015b8:	460c      	mov	r4, r1
 80015ba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80015be:	2800      	cmp	r0, #0
 80015c0:	d14d      	bne.n	800165e <FLASH_CheckCopyMemory+0xaa>
 80015c2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80015c6:	d34a      	bcc.n	800165e <FLASH_CheckCopyMemory+0xaa>
 80015c8:	1e71      	subs	r1, r6, #1
 80015ca:	4421      	add	r1, r4
 80015cc:	f1b1 6f01 	cmp.w	r1, #135266304	; 0x8100000
 80015d0:	d845      	bhi.n	800165e <FLASH_CheckCopyMemory+0xaa>
 80015d2:	2a00      	cmp	r2, #0
 80015d4:	d143      	bne.n	800165e <FLASH_CheckCopyMemory+0xaa>
 80015d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015da:	d340      	bcc.n	800165e <FLASH_CheckCopyMemory+0xaa>
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4432      	add	r2, r6
 80015e0:	f1b2 6f01 	cmp.w	r2, #135266304	; 0x8100000
 80015e4:	d83b      	bhi.n	800165e <FLASH_CheckCopyMemory+0xaa>
 80015e6:	f015 0f0e 	tst.w	r5, #14
 80015ea:	d101      	bne.n	80015f0 <FLASH_CheckCopyMemory+0x3c>
 80015ec:	2000      	movs	r0, #0
 80015ee:	bd70      	pop	{r4, r5, r6, pc}
 80015f0:	6821      	ldr	r1, [r4, #0]
 80015f2:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <FLASH_CheckCopyMemory+0xb0>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80015fa:	bf14      	ite	ne
 80015fc:	4621      	movne	r1, r4
 80015fe:	f504 71c2 	addeq.w	r1, r4, #388	; 0x184
 8001602:	b111      	cbz	r1, 800160a <FLASH_CheckCopyMemory+0x56>
 8001604:	6848      	ldr	r0, [r1, #4]
 8001606:	680a      	ldr	r2, [r1, #0]
 8001608:	1a81      	subs	r1, r0, r2
 800160a:	f015 0f0a 	tst.w	r5, #10
 800160e:	d002      	beq.n	8001616 <FLASH_CheckCopyMemory+0x62>
 8001610:	1d0a      	adds	r2, r1, #4
 8001612:	4296      	cmp	r6, r2
 8001614:	d323      	bcc.n	800165e <FLASH_CheckCopyMemory+0xaa>
 8001616:	6820      	ldr	r0, [r4, #0]
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <FLASH_CheckCopyMemory+0xb0>)
 800161a:	4002      	ands	r2, r0
 800161c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001620:	bf14      	ite	ne
 8001622:	4622      	movne	r2, r4
 8001624:	f504 72c2 	addeq.w	r2, r4, #388	; 0x184
 8001628:	7b90      	ldrb	r0, [r2, #14]
 800162a:	2801      	cmp	r0, #1
 800162c:	d002      	beq.n	8001634 <FLASH_CheckCopyMemory+0x80>
 800162e:	8996      	ldrh	r6, [r2, #12]
 8001630:	2e06      	cmp	r6, #6
 8001632:	d114      	bne.n	800165e <FLASH_CheckCopyMemory+0xaa>
 8001634:	076e      	lsls	r6, r5, #29
 8001636:	d502      	bpl.n	800163e <FLASH_CheckCopyMemory+0x8a>
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d10f      	bne.n	800165e <FLASH_CheckCopyMemory+0xaa>
 800163e:	072a      	lsls	r2, r5, #28
 8001640:	d503      	bpl.n	800164a <FLASH_CheckCopyMemory+0x96>
 8001642:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001646:	4283      	cmp	r3, r0
 8001648:	d109      	bne.n	800165e <FLASH_CheckCopyMemory+0xaa>
 800164a:	07ab      	lsls	r3, r5, #30
 800164c:	d5ce      	bpl.n	80015ec <FLASH_CheckCopyMemory+0x38>
 800164e:	b131      	cbz	r1, 800165e <FLASH_CheckCopyMemory+0xaa>
 8001650:	5865      	ldr	r5, [r4, r1]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8001652:	ba2d      	rev	r5, r5
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff ff7f 	bl	8001558 <Compute_CRC32>
 800165a:	4285      	cmp	r5, r0
 800165c:	d0c6      	beq.n	80015ec <FLASH_CheckCopyMemory+0x38>
 800165e:	2001      	movs	r0, #1
 8001660:	bd70      	pop	{r4, r5, r6, pc}
 8001662:	bf00      	nop
 8001664:	2ff10000 	.word	0x2ff10000

08001668 <Save_SystemFlags>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800166a:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800166e:	b672      	cpsid	i
 8001670:	4c10      	ldr	r4, [pc, #64]	; (80016b4 <Save_SystemFlags+0x4c>)
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <Save_SystemFlags+0x50>)
 8001674:	6825      	ldr	r5, [r4, #0]
 8001676:	429d      	cmp	r5, r3
 8001678:	d117      	bne.n	80016aa <Save_SystemFlags+0x42>
 800167a:	6861      	ldr	r1, [r4, #4]
 800167c:	2005      	movs	r0, #5
 800167e:	f001 fcbf 	bl	8003000 <RTC_WriteBackupRegister>
 8001682:	68a1      	ldr	r1, [r4, #8]
 8001684:	2006      	movs	r0, #6
 8001686:	f001 fcbb 	bl	8003000 <RTC_WriteBackupRegister>
 800168a:	68e1      	ldr	r1, [r4, #12]
 800168c:	2007      	movs	r0, #7
 800168e:	f001 fcb7 	bl	8003000 <RTC_WriteBackupRegister>
 8001692:	6921      	ldr	r1, [r4, #16]
 8001694:	2008      	movs	r0, #8
 8001696:	f001 fcb3 	bl	8003000 <RTC_WriteBackupRegister>
 800169a:	6961      	ldr	r1, [r4, #20]
 800169c:	2009      	movs	r0, #9
 800169e:	f001 fcaf 	bl	8003000 <RTC_WriteBackupRegister>
 80016a2:	4629      	mov	r1, r5
 80016a4:	2004      	movs	r0, #4
 80016a6:	f001 fcab 	bl	8003000 <RTC_WriteBackupRegister>
  __disable_irq();
  return is;
}

void HAL_enable_irq(int is) {
    if ((is & 1) == 0) {
 80016aa:	07f3      	lsls	r3, r6, #31
 80016ac:	d400      	bmi.n	80016b0 <Save_SystemFlags+0x48>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80016ae:	b662      	cpsie	i
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
 80016b2:	bf00      	nop
 80016b4:	200024c8 	.word	0x200024c8
 80016b8:	1adeacc0 	.word	0x1adeacc0

080016bc <Finish_Update>:
 80016bc:	b508      	push	{r3, lr}
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <Finish_Update+0x30>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	739a      	strb	r2, [r3, #14]
 80016c4:	f06f 022f 	mvn.w	r2, #47	; 0x2f
 80016c8:	73da      	strb	r2, [r3, #15]
 80016ca:	2200      	movs	r2, #0
 80016cc:	721a      	strb	r2, [r3, #8]
 80016ce:	2250      	movs	r2, #80	; 0x50
 80016d0:	725a      	strb	r2, [r3, #9]
 80016d2:	f7ff ffc9 	bl	8001668 <Save_SystemFlags>
 80016d6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80016da:	200a      	movs	r0, #10
 80016dc:	f001 fc90 	bl	8003000 <RTC_WriteBackupRegister>
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <Finish_Update+0x34>)
 80016e2:	f7ff fb4a 	bl	8000d7a <DCD_DevDisconnect>
 80016e6:	f000 fc05 	bl	8001ef4 <NVIC_SystemReset.lto_priv.96.lto_priv.99>
 80016ea:	bf00      	nop
 80016ec:	200024c8 	.word	0x200024c8
 80016f0:	200036ec 	.word	0x200036ec

080016f4 <FACTORY_Flash_Reset>:
 80016f4:	b508      	push	{r3, lr}
 80016f6:	480a      	ldr	r0, [pc, #40]	; (8001720 <FACTORY_Flash_Reset+0x2c>)
 80016f8:	f001 ffce 	bl	8003698 <FLASH_ApplyFactoryResetImage>
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <FACTORY_Flash_Reset+0x30>)
 80016fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001702:	731a      	strb	r2, [r3, #12]
 8001704:	735a      	strb	r2, [r3, #13]
 8001706:	b930      	cbnz	r0, 8001716 <FACTORY_Flash_Reset+0x22>
 8001708:	225a      	movs	r2, #90	; 0x5a
 800170a:	7298      	strb	r0, [r3, #10]
 800170c:	72d8      	strb	r0, [r3, #11]
 800170e:	7418      	strb	r0, [r3, #16]
 8001710:	745a      	strb	r2, [r3, #17]
 8001712:	f7ff ffd3 	bl	80016bc <Finish_Update>
 8001716:	f7ff ffa7 	bl	8001668 <Save_SystemFlags>
 800171a:	2000      	movs	r0, #0
 800171c:	bd08      	pop	{r3, pc}
 800171e:	bf00      	nop
 8001720:	08001b31 	.word	0x08001b31
 8001724:	200024c8 	.word	0x200024c8

08001728 <Load_SystemFlags>:
 8001728:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800172a:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800172e:	b672      	cpsid	i
 8001730:	2004      	movs	r0, #4
 8001732:	f001 fc55 	bl	8002fe0 <RTC_ReadBackupRegister>
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <Load_SystemFlags+0x98>)
 8001738:	4c22      	ldr	r4, [pc, #136]	; (80017c4 <Load_SystemFlags+0x9c>)
 800173a:	4298      	cmp	r0, r3
 800173c:	d010      	beq.n	8001760 <Load_SystemFlags+0x38>
 800173e:	2220      	movs	r2, #32
 8001740:	21ff      	movs	r1, #255	; 0xff
 8001742:	4620      	mov	r0, r4
 8001744:	f001 fce8 	bl	8003118 <memset>
 8001748:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 800174c:	7023      	strb	r3, [r4, #0]
 800174e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001752:	7063      	strb	r3, [r4, #1]
 8001754:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8001758:	70a3      	strb	r3, [r4, #2]
 800175a:	231a      	movs	r3, #26
 800175c:	70e3      	strb	r3, [r4, #3]
 800175e:	e02a      	b.n	80017b6 <Load_SystemFlags+0x8e>
 8001760:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8001764:	7023      	strb	r3, [r4, #0]
 8001766:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800176a:	7063      	strb	r3, [r4, #1]
 800176c:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8001770:	70a3      	strb	r3, [r4, #2]
 8001772:	2005      	movs	r0, #5
 8001774:	231a      	movs	r3, #26
 8001776:	70e3      	strb	r3, [r4, #3]
 8001778:	f001 fc32 	bl	8002fe0 <RTC_ReadBackupRegister>
 800177c:	80a0      	strh	r0, [r4, #4]
 800177e:	0c00      	lsrs	r0, r0, #16
 8001780:	80e0      	strh	r0, [r4, #6]
 8001782:	2006      	movs	r0, #6
 8001784:	f001 fc2c 	bl	8002fe0 <RTC_ReadBackupRegister>
 8001788:	8120      	strh	r0, [r4, #8]
 800178a:	0c00      	lsrs	r0, r0, #16
 800178c:	8160      	strh	r0, [r4, #10]
 800178e:	2007      	movs	r0, #7
 8001790:	f001 fc26 	bl	8002fe0 <RTC_ReadBackupRegister>
 8001794:	81a0      	strh	r0, [r4, #12]
 8001796:	0c00      	lsrs	r0, r0, #16
 8001798:	81e0      	strh	r0, [r4, #14]
 800179a:	2008      	movs	r0, #8
 800179c:	f001 fc20 	bl	8002fe0 <RTC_ReadBackupRegister>
 80017a0:	0a03      	lsrs	r3, r0, #8
 80017a2:	7420      	strb	r0, [r4, #16]
 80017a4:	7463      	strb	r3, [r4, #17]
 80017a6:	0c03      	lsrs	r3, r0, #16
 80017a8:	0e00      	lsrs	r0, r0, #24
 80017aa:	74e0      	strb	r0, [r4, #19]
 80017ac:	2009      	movs	r0, #9
 80017ae:	74a3      	strb	r3, [r4, #18]
 80017b0:	f001 fc16 	bl	8002fe0 <RTC_ReadBackupRegister>
 80017b4:	6160      	str	r0, [r4, #20]
 80017b6:	07eb      	lsls	r3, r5, #31
 80017b8:	d400      	bmi.n	80017bc <Load_SystemFlags+0x94>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80017ba:	b662      	cpsie	i
 80017bc:	bd38      	pop	{r3, r4, r5, pc}
 80017be:	bf00      	nop
 80017c0:	1adeacc0 	.word	0x1adeacc0
 80017c4:	200024c8 	.word	0x200024c8

080017c8 <BUTTON_EXTI_Config>:
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	4e27      	ldr	r6, [pc, #156]	; (8001868 <BUTTON_EXTI_Config+0xa0>)
 80017cc:	0140      	lsls	r0, r0, #5
 80017ce:	1832      	adds	r2, r6, r0
 80017d0:	7d93      	ldrb	r3, [r2, #22]
  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80017d2:	f04f 0e0f 	mov.w	lr, #15

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80017d6:	f003 0403 	and.w	r4, r3, #3
 80017da:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80017de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017e2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80017e6:	689d      	ldr	r5, [r3, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80017e8:	00a4      	lsls	r4, r4, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80017ea:	fa0e fe04 	lsl.w	lr, lr, r4
 80017ee:	ea25 050e 	bic.w	r5, r5, lr
 80017f2:	7d17      	ldrb	r7, [r2, #20]
 80017f4:	609d      	str	r5, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80017f6:	689d      	ldr	r5, [r3, #8]
 80017f8:	fa07 f404 	lsl.w	r4, r7, r4
 80017fc:	432c      	orrs	r4, r5
 80017fe:	609c      	str	r4, [r3, #8]
 8001800:	8a54      	ldrh	r4, [r2, #18]
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <BUTTON_EXTI_Config+0xa4>)
 8001804:	615c      	str	r4, [r3, #20]
 8001806:	8a55      	ldrh	r5, [r2, #18]
 8001808:	43ec      	mvns	r4, r5
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800180a:	b321      	cbz	r1, 8001856 <BUTTON_EXTI_Config+0x8e>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	7f12      	ldrb	r2, [r2, #28]
 8001810:	4021      	ands	r1, r4
 8001812:	6019      	str	r1, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001814:	6859      	ldr	r1, [r3, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001816:	2a10      	cmp	r2, #16

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001818:	ea01 0104 	and.w	r1, r1, r4
 800181c:	6059      	str	r1, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	ea41 0105 	orr.w	r1, r1, r5
 8001824:	6019      	str	r1, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	ea01 0104 	and.w	r1, r1, r4
 800182c:	6099      	str	r1, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800182e:	68d9      	ldr	r1, [r3, #12]
 8001830:	ea04 0401 	and.w	r4, r4, r1
 8001834:	60dc      	str	r4, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001836:	d106      	bne.n	8001846 <BUTTON_EXTI_Config+0x7e>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	432a      	orrs	r2, r5
 800183c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4315      	orrs	r5, r2
 8001842:	60dd      	str	r5, [r3, #12]
 8001844:	e00a      	b.n	800185c <BUTTON_EXTI_Config+0x94>
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001846:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800184a:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4315      	orrs	r5, r2
 8001852:	601d      	str	r5, [r3, #0]
 8001854:	e002      	b.n	800185c <BUTTON_EXTI_Config+0x94>
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4014      	ands	r4, r2
 800185a:	601c      	str	r4, [r3, #0]
 800185c:	4430      	add	r0, r6
 800185e:	8a42      	ldrh	r2, [r0, #18]
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <BUTTON_EXTI_Config+0xa4>)
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001866:	bf00      	nop
 8001868:	20002470 	.word	0x20002470
 800186c:	40013c00 	.word	0x40013c00

08001870 <Timer_Configure_Pwm.lto_priv.125>:
 8001870:	b510      	push	{r4, lr}
 8001872:	bb71      	cbnz	r1, 80018d2 <Timer_Configure_Pwm.lto_priv.125+0x62>
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001874:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001876:	4c63      	ldr	r4, [pc, #396]	; (8001a04 <Timer_Configure_Pwm.lto_priv.125+0x194>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	8403      	strh	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001882:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001884:	8881      	ldrh	r1, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001886:	8b02      	ldrh	r2, [r0, #24]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001888:	42a0      	cmp	r0, r4
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800188a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800188e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8001892:	ea4f 4212 	mov.w	r2, r2, lsr #16

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001896:	b29b      	uxth	r3, r3
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001898:	b289      	uxth	r1, r1

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800189a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;

  if((TIMx == TIM1) || (TIMx == TIM8))
 800189e:	d008      	beq.n	80018b2 <Timer_Configure_Pwm.lto_priv.125+0x42>
 80018a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018a4:	42a0      	cmp	r0, r4
 80018a6:	d004      	beq.n	80018b2 <Timer_Configure_Pwm.lto_priv.125+0x42>
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80018a8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80018ac:	f043 0303 	orr.w	r3, r3, #3
 80018b0:	e006      	b.n	80018c0 <Timer_Configure_Pwm.lto_priv.125+0x50>
 80018b2:	f023 030e 	bic.w	r3, r3, #14

    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80018b6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80018ba:	f043 0303 	orr.w	r3, r3, #3

    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80018be:	b289      	uxth	r1, r1
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018c0:	8081      	strh	r1, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018c2:	8302      	strh	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80018c4:	2200      	movs	r2, #0
 80018c6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018c8:	8403      	strh	r3, [r0, #32]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80018ca:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80018cc:	f023 0308 	bic.w	r3, r3, #8
 80018d0:	e02f      	b.n	8001932 <Timer_Configure_Pwm.lto_priv.125+0xc2>
 80018d2:	2904      	cmp	r1, #4
 80018d4:	d131      	bne.n	800193a <Timer_Configure_Pwm.lto_priv.125+0xca>
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80018d6:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);

  if((TIMx == TIM1) || (TIMx == TIM8))
 80018d8:	4c4a      	ldr	r4, [pc, #296]	; (8001a04 <Timer_Configure_Pwm.lto_priv.125+0x194>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80018da:	f023 0310 	bic.w	r3, r3, #16
 80018de:	041b      	lsls	r3, r3, #16
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	8403      	strh	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018e4:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018e6:	8881      	ldrh	r1, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018e8:	8b02      	ldrh	r2, [r0, #24]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);

  if((TIMx == TIM1) || (TIMx == TIM8))
 80018ea:	42a0      	cmp	r0, r4
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80018ec:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80018f0:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80018f4:	ea4f 4212 	mov.w	r2, r2, lsr #16

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018f8:	b29b      	uxth	r3, r3
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018fa:	b289      	uxth	r1, r1
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80018fc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001900:	d008      	beq.n	8001914 <Timer_Configure_Pwm.lto_priv.125+0xa4>
 8001902:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001906:	42a0      	cmp	r0, r4
 8001908:	d004      	beq.n	8001914 <Timer_Configure_Pwm.lto_priv.125+0xa4>

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800190a:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800190e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001912:	e006      	b.n	8001922 <Timer_Configure_Pwm.lto_priv.125+0xb2>
 8001914:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001918:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800191c:	f043 0330 	orr.w	r3, r3, #48	; 0x30

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001920:	b289      	uxth	r1, r1
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001922:	8081      	strh	r1, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001924:	8302      	strh	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001926:	2200      	movs	r2, #0
 8001928:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800192a:	8403      	strh	r3, [r0, #32]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800192c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800192e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001936:	8303      	strh	r3, [r0, #24]
 8001938:	e05d      	b.n	80019f6 <Timer_Configure_Pwm.lto_priv.125+0x186>
 800193a:	2908      	cmp	r1, #8
 800193c:	d12e      	bne.n	800199c <Timer_Configure_Pwm.lto_priv.125+0x12c>
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800193e:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001940:	4c30      	ldr	r4, [pc, #192]	; (8001a04 <Timer_Configure_Pwm.lto_priv.125+0x194>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	8403      	strh	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800194c:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800194e:	8881      	ldrh	r1, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001950:	8b82      	ldrh	r2, [r0, #28]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001952:	42a0      	cmp	r0, r4
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;
 8001954:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001958:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800195c:	ea4f 4212 	mov.w	r2, r2, lsr #16

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001960:	b29b      	uxth	r3, r3
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001962:	b289      	uxth	r1, r1

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001964:	f042 0260 	orr.w	r2, r2, #96	; 0x60
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001968:	d008      	beq.n	800197c <Timer_Configure_Pwm.lto_priv.125+0x10c>
 800196a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800196e:	42a0      	cmp	r0, r4
 8001970:	d004      	beq.n	800197c <Timer_Configure_Pwm.lto_priv.125+0x10c>
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001972:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001976:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800197a:	e006      	b.n	800198a <Timer_Configure_Pwm.lto_priv.125+0x11a>
 800197c:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001980:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001984:	f443 7340 	orr.w	r3, r3, #768	; 0x300

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001988:	b289      	uxth	r1, r1
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800198a:	8081      	strh	r1, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800198c:	8382      	strh	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800198e:	2200      	movs	r2, #0
 8001990:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001992:	8403      	strh	r3, [r0, #32]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001994:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001996:	f023 0308 	bic.w	r3, r3, #8
 800199a:	e029      	b.n	80019f0 <Timer_Configure_Pwm.lto_priv.125+0x180>
 800199c:	290c      	cmp	r1, #12
 800199e:	d12a      	bne.n	80019f6 <Timer_Configure_Pwm.lto_priv.125+0x186>
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80019a0:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);

  if((TIMx == TIM1) || (TIMx == TIM8))
 80019a2:	4c18      	ldr	r4, [pc, #96]	; (8001a04 <Timer_Configure_Pwm.lto_priv.125+0x194>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80019a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	0c1b      	lsrs	r3, r3, #16
 80019ac:	8403      	strh	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019ae:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019b0:	8881      	ldrh	r1, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019b2:	8b82      	ldrh	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80019b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80019b8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80019bc:	0412      	lsls	r2, r2, #16

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80019be:	041b      	lsls	r3, r3, #16
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80019c0:	0c12      	lsrs	r2, r2, #16

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80019c2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);

  if((TIMx == TIM1) || (TIMx == TIM8))
 80019c4:	42a0      	cmp	r0, r4
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019c6:	b289      	uxth	r1, r1
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80019c8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80019cc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000

  if((TIMx == TIM1) || (TIMx == TIM8))
 80019d0:	d003      	beq.n	80019da <Timer_Configure_Pwm.lto_priv.125+0x16a>
 80019d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019d6:	42a0      	cmp	r0, r4
 80019d8:	d102      	bne.n	80019e0 <Timer_Configure_Pwm.lto_priv.125+0x170>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80019da:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80019de:	b289      	uxth	r1, r1
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019e0:	8081      	strh	r1, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80019e2:	8382      	strh	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80019e4:	2200      	movs	r2, #0
 80019e6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019e8:	8403      	strh	r3, [r0, #32]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80019ea:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80019ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80019f4:	8383      	strh	r3, [r0, #28]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80019f6:	8803      	ldrh	r3, [r0, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fe:	8003      	strh	r3, [r0, #0]
 8001a00:	bd10      	pop	{r4, pc}
 8001a02:	bf00      	nop
 8001a04:	40010000 	.word	0x40010000

08001a08 <Timer_Configure.lto_priv.126>:
 8001a08:	8803      	ldrh	r3, [r0, #0]
 8001a0a:	b510      	push	{r4, lr}
 8001a0c:	07db      	lsls	r3, r3, #31
 8001a0e:	d469      	bmi.n	8001ae4 <Timer_Configure.lto_priv.126+0xdc>
 8001a10:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <Timer_Configure.lto_priv.126+0x104>)
 8001a12:	4298      	cmp	r0, r3
 8001a14:	d106      	bne.n	8001a24 <Timer_Configure.lto_priv.126+0x1c>
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001a16:	4a3e      	ldr	r2, [pc, #248]	; (8001b10 <Timer_Configure.lto_priv.126+0x108>)
 8001a18:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a20:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <Timer_Configure.lto_priv.126+0x10c>)
 8001a22:	e020      	b.n	8001a66 <Timer_Configure.lto_priv.126+0x5e>
 8001a24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a28:	d104      	bne.n	8001a34 <Timer_Configure.lto_priv.126+0x2c>
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001a2a:	4a39      	ldr	r2, [pc, #228]	; (8001b10 <Timer_Configure.lto_priv.126+0x108>)
 8001a2c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	e016      	b.n	8001a62 <Timer_Configure.lto_priv.126+0x5a>
 8001a34:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <Timer_Configure.lto_priv.126+0x110>)
 8001a36:	4298      	cmp	r0, r3
 8001a38:	d104      	bne.n	8001a44 <Timer_Configure.lto_priv.126+0x3c>
 8001a3a:	4a35      	ldr	r2, [pc, #212]	; (8001b10 <Timer_Configure.lto_priv.126+0x108>)
 8001a3c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	e00e      	b.n	8001a62 <Timer_Configure.lto_priv.126+0x5a>
 8001a44:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <Timer_Configure.lto_priv.126+0x114>)
 8001a46:	4298      	cmp	r0, r3
 8001a48:	d104      	bne.n	8001a54 <Timer_Configure.lto_priv.126+0x4c>
 8001a4a:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <Timer_Configure.lto_priv.126+0x108>)
 8001a4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	e006      	b.n	8001a62 <Timer_Configure.lto_priv.126+0x5a>
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <Timer_Configure.lto_priv.126+0x118>)
 8001a56:	4298      	cmp	r0, r3
 8001a58:	d104      	bne.n	8001a64 <Timer_Configure.lto_priv.126+0x5c>
 8001a5a:	4a2d      	ldr	r2, [pc, #180]	; (8001b10 <Timer_Configure.lto_priv.126+0x108>)
 8001a5c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6413      	str	r3, [r2, #64]	; 0x40
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <Timer_Configure.lto_priv.126+0x11c>)
 8001a66:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <Timer_Configure.lto_priv.126+0x120>)
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001a68:	4c28      	ldr	r4, [pc, #160]	; (8001b0c <Timer_Configure.lto_priv.126+0x104>)
 8001a6a:	fbb3 f2f2 	udiv	r2, r3, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8001a6e:	8803      	ldrh	r3, [r0, #0]
 8001a70:	3a01      	subs	r2, #1

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001a72:	42a0      	cmp	r0, r4
 8001a74:	b292      	uxth	r2, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8001a76:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001a78:	d012      	beq.n	8001aa0 <Timer_Configure.lto_priv.126+0x98>
 8001a7a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a7e:	42a0      	cmp	r0, r4
 8001a80:	d00e      	beq.n	8001aa0 <Timer_Configure.lto_priv.126+0x98>
 8001a82:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a86:	d00b      	beq.n	8001aa0 <Timer_Configure.lto_priv.126+0x98>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001a88:	f5a4 3480 	sub.w	r4, r4, #65536	; 0x10000
 8001a8c:	42a0      	cmp	r0, r4
 8001a8e:	d007      	beq.n	8001aa0 <Timer_Configure.lto_priv.126+0x98>
 8001a90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d003      	beq.n	8001aa0 <Timer_Configure.lto_priv.126+0x98>
     (TIMx == TIM4) || (TIMx == TIM5))
 8001a98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a9c:	42a0      	cmp	r0, r4
 8001a9e:	d102      	bne.n	8001aa6 <Timer_Configure.lto_priv.126+0x9e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa4:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 8001aa6:	4c21      	ldr	r4, [pc, #132]	; (8001b2c <Timer_Configure.lto_priv.126+0x124>)
 8001aa8:	42a0      	cmp	r0, r4
 8001aaa:	d006      	beq.n	8001aba <Timer_Configure.lto_priv.126+0xb2>
 8001aac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ab0:	42a0      	cmp	r0, r4
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001ab2:	bf1c      	itt	ne
 8001ab4:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8001ab8:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001aba:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001abc:	f242 730f 	movw	r3, #9999	; 0x270f
 8001ac0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <Timer_Configure.lto_priv.126+0x104>)

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001ac4:	8502      	strh	r2, [r0, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8001ac6:	4298      	cmp	r0, r3
 8001ac8:	d003      	beq.n	8001ad2 <Timer_Configure.lto_priv.126+0xca>
 8001aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ace:	4298      	cmp	r0, r3
 8001ad0:	d101      	bne.n	8001ad6 <Timer_Configure.lto_priv.126+0xce>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	8283      	strh	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001ada:	8803      	ldrh	r3, [r0, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae2:	8003      	strh	r3, [r0, #0]
 8001ae4:	b181      	cbz	r1, 8001b08 <Timer_Configure.lto_priv.126+0x100>
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001ae6:	8803      	ldrh	r3, [r0, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	8003      	strh	r3, [r0, #0]
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <Timer_Configure.lto_priv.126+0x104>)
 8001af2:	4298      	cmp	r0, r3
 8001af4:	d108      	bne.n	8001b08 <Timer_Configure.lto_priv.126+0x100>
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001af6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	07270e00 	.word	0x07270e00
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40000800 	.word	0x40000800
 8001b20:	40000c00 	.word	0x40000c00
 8001b24:	03938700 	.word	0x03938700
 8001b28:	000f4240 	.word	0x000f4240
 8001b2c:	40001000 	.word	0x40001000

08001b30 <FLASH_CopyMemory>:
 8001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b34:	b089      	sub	sp, #36	; 0x24
 8001b36:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8001b3a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8001b3c:	9402      	str	r4, [sp, #8]
 8001b3e:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8001b42:	9700      	str	r7, [sp, #0]
 8001b44:	9401      	str	r4, [sp, #4]
 8001b46:	9005      	str	r0, [sp, #20]
 8001b48:	460d      	mov	r5, r1
 8001b4a:	9206      	str	r2, [sp, #24]
 8001b4c:	461e      	mov	r6, r3
 8001b4e:	f7ff fd31 	bl	80015b4 <FLASH_CheckCopyMemory>
 8001b52:	4680      	mov	r8, r0
 8001b54:	2800      	cmp	r0, #0
 8001b56:	f040 8081 	bne.w	8001c5c <FLASH_CopyMemory+0x12c>
 8001b5a:	2f00      	cmp	r7, #0
 8001b5c:	f000 808b 	beq.w	8001c76 <FLASH_CopyMemory+0x146>
 8001b60:	9b06      	ldr	r3, [sp, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d17d      	bne.n	8001c62 <FLASH_CopyMemory+0x132>
 8001b66:	4630      	mov	r0, r6
 8001b68:	f7ff fcce 	bl	8001508 <addressToSectorIndex>
 8001b6c:	3001      	adds	r0, #1
 8001b6e:	b280      	uxth	r0, r0
 8001b70:	2804      	cmp	r0, #4
 8001b72:	bf95      	itete	ls
 8001b74:	4b42      	ldrls	r3, [pc, #264]	; (8001c80 <FLASH_CopyMemory+0x150>)
 8001b76:	0440      	lslhi	r0, r0, #17
 8001b78:	f853 4020 	ldrls.w	r4, [r3, r0, lsl #2]
 8001b7c:	f100 64ff 	addhi.w	r4, r0, #133693440	; 0x7f80000
 8001b80:	1ba4      	subs	r4, r4, r6
 8001b82:	42bc      	cmp	r4, r7
 8001b84:	bf28      	it	cs
 8001b86:	463c      	movcs	r4, r7
 8001b88:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
 8001b8c:	eb06 0904 	add.w	r9, r6, r4
 8001b90:	f109 31ff 	add.w	r1, r9, #4294967295
 8001b94:	d365      	bcc.n	8001c62 <FLASH_CopyMemory+0x132>
 8001b96:	f1b1 6f01 	cmp.w	r1, #135266304	; 0x8100000
 8001b9a:	d862      	bhi.n	8001c62 <FLASH_CopyMemory+0x132>
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	f7ff fcb3 	bl	8001508 <addressToSectorIndex>
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <FLASH_CopyMemory+0x154>)
 8001ba4:	f813 a000 	ldrb.w	sl, [r3, r0]
 8001ba8:	f1ba 0f58 	cmp.w	sl, #88	; 0x58
 8001bac:	d859      	bhi.n	8001c62 <FLASH_CopyMemory+0x132>
 8001bae:	f1b1 6f01 	cmp.w	r1, #135266304	; 0x8100000
 8001bb2:	d908      	bls.n	8001bc6 <FLASH_CopyMemory+0x96>
 8001bb4:	f001 faa2 	bl	80030fc <FLASH_Unlock>
 8001bb8:	f3c4 0210 	ubfx	r2, r4, #0, #17
 8001bbc:	0c63      	lsrs	r3, r4, #17
 8001bbe:	b312      	cbz	r2, 8001c06 <FLASH_CopyMemory+0xd6>
 8001bc0:	f103 0b01 	add.w	fp, r3, #1
 8001bc4:	e020      	b.n	8001c08 <FLASH_CopyMemory+0xd8>
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	fa02 f000 	lsl.w	r0, r2, r0
 8001bcc:	fa1f fb80 	uxth.w	fp, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	f7ff fc99 	bl	8001508 <addressToSectorIndex>
 8001bd6:	f1bb 0f00 	cmp.w	fp, #0
 8001bda:	d0eb      	beq.n	8001bb4 <FLASH_CopyMemory+0x84>
 8001bdc:	4082      	lsls	r2, r0
 8001bde:	0052      	lsls	r2, r2, #1
 8001be0:	b292      	uxth	r2, r2
 8001be2:	ea12 0f0b 	tst.w	r2, fp
 8001be6:	d1e5      	bne.n	8001bb4 <FLASH_CopyMemory+0x84>
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <FLASH_CopyMemory+0x158>)
 8001bea:	8819      	ldrh	r1, [r3, #0]
 8001bec:	ea1b 0f01 	tst.w	fp, r1
 8001bf0:	d104      	bne.n	8001bfc <FLASH_CopyMemory+0xcc>
 8001bf2:	4658      	mov	r0, fp
 8001bf4:	9207      	str	r2, [sp, #28]
 8001bf6:	f001 fd21 	bl	800363c <FLASH_WriteProtection_Disable.part.4.lto_priv.95>
 8001bfa:	9a07      	ldr	r2, [sp, #28]
 8001bfc:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8001c00:	fa1f fb83 	uxth.w	fp, r3
 8001c04:	e7ed      	b.n	8001be2 <FLASH_CopyMemory+0xb2>
 8001c06:	469b      	mov	fp, r3
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));

  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8001c08:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <FLASH_CopyMemory+0x15c>)
 8001c0a:	21f3      	movs	r1, #243	; 0xf3
 8001c0c:	60d1      	str	r1, [r2, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	455a      	cmp	r2, fp
 8001c12:	d00a      	beq.n	8001c2a <FLASH_CopyMemory+0xfa>
 8001c14:	2102      	movs	r1, #2
 8001c16:	eb0a 00c2 	add.w	r0, sl, r2, lsl #3
 8001c1a:	9207      	str	r2, [sp, #28]
 8001c1c:	f001 fa30 	bl	8003080 <FLASH_EraseSector>
 8001c20:	2808      	cmp	r0, #8
 8001c22:	d11e      	bne.n	8001c62 <FLASH_CopyMemory+0x132>
 8001c24:	9a07      	ldr	r2, [sp, #28]
 8001c26:	3201      	adds	r2, #1
 8001c28:	e7f2      	b.n	8001c10 <FLASH_CopyMemory+0xe0>
 8001c2a:	f001 fa5f 	bl	80030ec <FLASH_Lock>
 8001c2e:	f001 fa65 	bl	80030fc <FLASH_Unlock>
 8001c32:	eb05 0a04 	add.w	sl, r5, r4
 8001c36:	1b76      	subs	r6, r6, r5
 8001c38:	45aa      	cmp	sl, r5
 8001c3a:	eb06 0005 	add.w	r0, r6, r5
 8001c3e:	d903      	bls.n	8001c48 <FLASH_CopyMemory+0x118>
 8001c40:	9b05      	ldr	r3, [sp, #20]
 8001c42:	b98b      	cbnz	r3, 8001c68 <FLASH_CopyMemory+0x138>
 8001c44:	6829      	ldr	r1, [r5, #0]
 8001c46:	e010      	b.n	8001c6a <FLASH_CopyMemory+0x13a>
 8001c48:	2501      	movs	r5, #1
 8001c4a:	e000      	b.n	8001c4e <FLASH_CopyMemory+0x11e>
 8001c4c:	2500      	movs	r5, #0
 8001c4e:	f001 fa4d 	bl	80030ec <FLASH_Lock>
 8001c52:	b135      	cbz	r5, 8001c62 <FLASH_CopyMemory+0x132>
 8001c54:	1b3f      	subs	r7, r7, r4
 8001c56:	464e      	mov	r6, r9
 8001c58:	4655      	mov	r5, sl
 8001c5a:	e77e      	b.n	8001b5a <FLASH_CopyMemory+0x2a>
 8001c5c:	f04f 0801 	mov.w	r8, #1
 8001c60:	e009      	b.n	8001c76 <FLASH_CopyMemory+0x146>
 8001c62:	f04f 0802 	mov.w	r8, #2
 8001c66:	e006      	b.n	8001c76 <FLASH_CopyMemory+0x146>
 8001c68:	2100      	movs	r1, #0
 8001c6a:	f001 f9eb 	bl	8003044 <FLASH_ProgramWord>
 8001c6e:	2808      	cmp	r0, #8
 8001c70:	d1ec      	bne.n	8001c4c <FLASH_CopyMemory+0x11c>
 8001c72:	3504      	adds	r5, #4
 8001c74:	e7e0      	b.n	8001c38 <FLASH_CopyMemory+0x108>
 8001c76:	4640      	mov	r0, r8
 8001c78:	b009      	add	sp, #36	; 0x24
 8001c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c7e:	bf00      	nop
 8001c80:	080037c0 	.word	0x080037c0
 8001c84:	080037b4 	.word	0x080037b4
 8001c88:	40023c16 	.word	0x40023c16
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <DCT_If_CheckAdd>:
 8001c90:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8001c94:	bf34      	ite	cc
 8001c96:	2000      	movcc	r0, #0
 8001c98:	2001      	movcs	r0, #1
 8001c9a:	4770      	bx	lr

08001c9c <FLASH_If_Init>:
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	4770      	bx	lr

08001ca0 <DCT_If_DeInit>:
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	4770      	bx	lr

08001ca4 <DCT_If_Verify>:
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	4770      	bx	lr

08001ca8 <DCT_If_Erase>:
 8001ca8:	2000      	movs	r0, #0
 8001caa:	4770      	bx	lr

08001cac <DCT_If_Init>:
 8001cac:	2000      	movs	r0, #0
 8001cae:	4770      	bx	lr

08001cb0 <FLASH_If_CheckAdd>:
 8001cb0:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8001cb4:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8001cb8:	bf34      	ite	cc
 8001cba:	2000      	movcc	r0, #0
 8001cbc:	2001      	movcs	r0, #1
 8001cbe:	4770      	bx	lr

08001cc0 <FLASH_If_Verify>:
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b530      	push	{r4, r5, lr}
 8001cc4:	4c06      	ldr	r4, [pc, #24]	; (8001ce0 <FLASH_If_Verify+0x20>)
 8001cc6:	1a1a      	subs	r2, r3, r0
 8001cc8:	4291      	cmp	r1, r2
 8001cca:	d906      	bls.n	8001cda <FLASH_If_Verify+0x1a>
 8001ccc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001cd0:	58a2      	ldr	r2, [r4, r2]
 8001cd2:	42aa      	cmp	r2, r5
 8001cd4:	d0f7      	beq.n	8001cc6 <FLASH_If_Verify+0x6>
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	bd30      	pop	{r4, r5, pc}
 8001cda:	2000      	movs	r0, #0
 8001cdc:	bd30      	pop	{r4, r5, pc}
 8001cde:	bf00      	nop
 8001ce0:	200025c0 	.word	0x200025c0

08001ce4 <FLASH_If_Read>:
 8001ce4:	4770      	bx	lr

08001ce6 <FLASH_If_DeInit>:
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	4770      	bx	lr
	...

08001cec <USBD_DFU_GetOtherCfgDesc.lto_priv.116>:
 8001cec:	2324      	movs	r3, #36	; 0x24
 8001cee:	800b      	strh	r3, [r1, #0]
 8001cf0:	4800      	ldr	r0, [pc, #0]	; (8001cf4 <USBD_DFU_GetOtherCfgDesc.lto_priv.116+0x8>)
 8001cf2:	4770      	bx	lr
 8001cf4:	20002380 	.word	0x20002380

08001cf8 <USBD_DFU_GetCfgDesc.lto_priv.115>:
 8001cf8:	2324      	movs	r3, #36	; 0x24
 8001cfa:	800b      	strh	r3, [r1, #0]
 8001cfc:	4800      	ldr	r0, [pc, #0]	; (8001d00 <USBD_DFU_GetCfgDesc.lto_priv.115+0x8>)
 8001cfe:	4770      	bx	lr
 8001d00:	20002356 	.word	0x20002356

08001d04 <EP0_RxReady.lto_priv.114>:
 8001d04:	2000      	movs	r0, #0
 8001d06:	4770      	bx	lr

08001d08 <usbd_dfu_Init.lto_priv.110>:
 8001d08:	b508      	push	{r3, lr}
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <usbd_dfu_Init.lto_priv.110+0x20>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	b103      	cbz	r3, 8001d12 <usbd_dfu_Init.lto_priv.110+0xa>
 8001d10:	4798      	blx	r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <usbd_dfu_Init.lto_priv.110+0x24>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	b103      	cbz	r3, 8001d1a <usbd_dfu_Init.lto_priv.110+0x12>
 8001d18:	4798      	blx	r3
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <usbd_dfu_Init.lto_priv.110+0x28>)
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	7013      	strb	r3, [r2, #0]
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <usbd_dfu_Init.lto_priv.110+0x2c>)
 8001d22:	2000      	movs	r0, #0
 8001d24:	7113      	strb	r3, [r2, #4]
 8001d26:	bd08      	pop	{r3, pc}
 8001d28:	20002448 	.word	0x20002448
 8001d2c:	2000241c 	.word	0x2000241c
 8001d30:	200035c0 	.word	0x200035c0
 8001d34:	20003bc4 	.word	0x20003bc4

08001d38 <USBD_IsoOUTIncomplete.lto_priv.109>:
 8001d38:	b508      	push	{r3, lr}
 8001d3a:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	4798      	blx	r3
 8001d42:	2000      	movs	r0, #0
 8001d44:	bd08      	pop	{r3, pc}

08001d46 <USBD_IsoINIncomplete.lto_priv.108>:
 8001d46:	b508      	push	{r3, lr}
 8001d48:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4798      	blx	r3
 8001d50:	2000      	movs	r0, #0
 8001d52:	bd08      	pop	{r3, pc}

08001d54 <USBD_SOF.lto_priv.104>:
 8001d54:	b508      	push	{r3, lr}
 8001d56:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	b103      	cbz	r3, 8001d60 <USBD_SOF.lto_priv.104+0xc>
 8001d5e:	4798      	blx	r3
 8001d60:	2000      	movs	r0, #0
 8001d62:	bd08      	pop	{r3, pc}

08001d64 <USBD_Suspend.lto_priv.106>:
 8001d64:	b508      	push	{r3, lr}
 8001d66:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 8001d6a:	f880 30e3 	strb.w	r3, [r0, #227]	; 0xe3
 8001d6e:	2304      	movs	r3, #4
 8001d70:	f880 30e2 	strb.w	r3, [r0, #226]	; 0xe2
 8001d74:	f8d0 34c8 	ldr.w	r3, [r0, #1224]	; 0x4c8
 8001d78:	b10b      	cbz	r3, 8001d7e <USBD_Suspend.lto_priv.106+0x1a>
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4798      	blx	r3
 8001d7e:	2000      	movs	r0, #0
 8001d80:	bd08      	pop	{r3, pc}

08001d82 <USBD_Resume.lto_priv.107>:
 8001d82:	b510      	push	{r4, lr}
 8001d84:	f8d0 34c8 	ldr.w	r3, [r0, #1224]	; 0x4c8
 8001d88:	4604      	mov	r4, r0
 8001d8a:	b10b      	cbz	r3, 8001d90 <USBD_Resume.lto_priv.107+0xe>
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	4798      	blx	r3
 8001d90:	2303      	movs	r3, #3
 8001d92:	f884 30e2 	strb.w	r3, [r4, #226]	; 0xe2
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd10      	pop	{r4, pc}

08001d9a <DCT_If_Read>:
 8001d9a:	f001 ba23 	b.w	80031e4 <dct_read_app_data>
	...

08001da0 <DCT_If_Write>:
 8001da0:	460a      	mov	r2, r1
 8001da2:	b508      	push	{r3, lr}
 8001da4:	4601      	mov	r1, r0
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <DCT_If_Write+0x14>)
 8001da8:	f001 f9fe 	bl	80031a8 <dct_write_app_data>
 8001dac:	3000      	adds	r0, #0
 8001dae:	bf18      	it	ne
 8001db0:	2001      	movne	r0, #1
 8001db2:	bd08      	pop	{r3, pc}
 8001db4:	200025c0 	.word	0x200025c0

08001db8 <USBD_DFU_GetUsrStringDesc.lto_priv.117>:
 8001db8:	290f      	cmp	r1, #15
 8001dba:	b508      	push	{r3, lr}
 8001dbc:	d808      	bhi.n	8001dd0 <USBD_DFU_GetUsrStringDesc.lto_priv.117+0x18>
 8001dbe:	1f8b      	subs	r3, r1, #6
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <USBD_DFU_GetUsrStringDesc.lto_priv.117+0x1c>)
 8001dc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001dc8:	f001 fb4e 	bl	8003468 <USBD_GetString.constprop.14>
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <USBD_DFU_GetUsrStringDesc.lto_priv.117+0x20>)
 8001dce:	bd08      	pop	{r3, pc}
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	bd08      	pop	{r3, pc}
 8001dd4:	080037d8 	.word	0x080037d8
 8001dd8:	200035ec 	.word	0x200035ec

08001ddc <USBD_DataInStage.lto_priv.102>:
 8001ddc:	b538      	push	{r3, r4, r5, lr}
 8001dde:	4604      	mov	r4, r0
 8001de0:	2900      	cmp	r1, #0
 8001de2:	d14f      	bne.n	8001e84 <USBD_DataInStage.lto_priv.102+0xa8>
 8001de4:	f890 30e1 	ldrb.w	r3, [r0, #225]	; 0xe1
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d13f      	bne.n	8001e6c <USBD_DataInStage.lto_priv.102+0x90>
 8001dec:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
 8001df0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d911      	bls.n	8001e1c <USBD_DataInStage.lto_priv.102+0x40>
 8001df8:	78c1      	ldrb	r1, [r0, #3]
 8001dfa:	1ad2      	subs	r2, r2, r3
 8001dfc:	2901      	cmp	r1, #1
 8001dfe:	bf08      	it	eq
 8001e00:	f8d0 10f8 	ldreq.w	r1, [r0, #248]	; 0xf8
 8001e04:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 8001e08:	bf04      	itt	eq
 8001e0a:	185b      	addeq	r3, r3, r1
 8001e0c:	f8c0 30f8 	streq.w	r3, [r0, #248]	; 0xf8
 8001e10:	b292      	uxth	r2, r2
 8001e12:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 8001e16:	f001 fb5f 	bl	80034d8 <DCD_EP_Tx.constprop.6>
 8001e1a:	e027      	b.n	8001e6c <USBD_DataInStage.lto_priv.102+0x90>
 8001e1c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8001e20:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e24:	fb03 2515 	mls	r5, r3, r5, r2
 8001e28:	b95d      	cbnz	r5, 8001e42 <USBD_DataInStage.lto_priv.102+0x66>
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d809      	bhi.n	8001e42 <USBD_DataInStage.lto_priv.102+0x66>
 8001e2e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d205      	bcs.n	8001e42 <USBD_DataInStage.lto_priv.102+0x66>
 8001e36:	462a      	mov	r2, r5
 8001e38:	f001 fb4e 	bl	80034d8 <DCD_EP_Tx.constprop.6>
 8001e3c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8001e40:	e014      	b.n	8001e6c <USBD_DataInStage.lto_priv.102+0x90>
 8001e42:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	b12b      	cbz	r3, 8001e56 <USBD_DataInStage.lto_priv.102+0x7a>
 8001e4a:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
 8001e4e:	2a03      	cmp	r2, #3
 8001e50:	d101      	bne.n	8001e56 <USBD_DataInStage.lto_priv.102+0x7a>
 8001e52:	4620      	mov	r0, r4
 8001e54:	4798      	blx	r3
 8001e56:	2305      	movs	r3, #5
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4620      	mov	r0, r4
 8001e62:	f001 fb21 	bl	80034a8 <DCD_EP_PrepareRx.constprop.7>
 8001e66:	4620      	mov	r0, r4
 8001e68:	f7ff fa16 	bl	8001298 <USB_OTG_EP0_OutStart>
 8001e6c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d110      	bne.n	8001e96 <USBD_DataInStage.lto_priv.102+0xba>
 8001e74:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <USBD_DataInStage.lto_priv.102+0xc0>)
 8001e76:	6923      	ldr	r3, [r4, #16]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
 8001e82:	e008      	b.n	8001e96 <USBD_DataInStage.lto_priv.102+0xba>
 8001e84:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	b123      	cbz	r3, 8001e96 <USBD_DataInStage.lto_priv.102+0xba>
 8001e8c:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
 8001e90:	2a03      	cmp	r2, #3
 8001e92:	d100      	bne.n	8001e96 <USBD_DataInStage.lto_priv.102+0xba>
 8001e94:	4798      	blx	r3
 8001e96:	2000      	movs	r0, #0
 8001e98:	bd38      	pop	{r3, r4, r5, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200025b0 	.word	0x200025b0

08001ea0 <USBD_Reset.lto_priv.105>:
 8001ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	2500      	movs	r5, #0
 8001ea6:	2740      	movs	r7, #64	; 0x40
 8001ea8:	f500 7133 	add.w	r1, r0, #716	; 0x2cc
 8001eac:	2601      	movs	r6, #1
 8001eae:	f880 52cc 	strb.w	r5, [r0, #716]	; 0x2cc
 8001eb2:	f880 52cd 	strb.w	r5, [r0, #717]	; 0x2cd
 8001eb6:	f8c0 72d4 	str.w	r7, [r0, #724]	; 0x2d4
 8001eba:	f880 52cf 	strb.w	r5, [r0, #719]	; 0x2cf
 8001ebe:	f7ff fa7c 	bl	80013ba <USB_OTG_EPActivate>
 8001ec2:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
 8001ec6:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
 8001eca:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
 8001ece:	f884 50ef 	strb.w	r5, [r4, #239]	; 0xef
 8001ed2:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
 8001ed6:	f104 01ec 	add.w	r1, r4, #236	; 0xec
 8001eda:	4620      	mov	r0, r4
 8001edc:	f7ff fa6d 	bl	80013ba <USB_OTG_EPActivate>
 8001ee0:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
 8001ee4:	f884 60e2 	strb.w	r6, [r4, #226]	; 0xe2
 8001ee8:	b113      	cbz	r3, 8001ef0 <USBD_Reset.lto_priv.105+0x50>
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	78a0      	ldrb	r0, [r4, #2]
 8001eee:	4798      	blx	r3
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ef4 <NVIC_SystemReset.lto_priv.96.lto_priv.99>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 8001ef4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ef8:	4904      	ldr	r1, [pc, #16]	; (8001f0c <NVIC_SystemReset.lto_priv.96.lto_priv.99+0x18>)
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <NVIC_SystemReset.lto_priv.96.lto_priv.99+0x1c>)
 8001efc:	68ca      	ldr	r2, [r1, #12]
 8001efe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001f02:	4313      	orrs	r3, r2
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 8001f04:	60cb      	str	r3, [r1, #12]
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	e7fe      	b.n	8001f0a <NVIC_SystemReset.lto_priv.96.lto_priv.99+0x16>
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	05fa0004 	.word	0x05fa0004

08001f14 <SystemInit>:
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <SystemInit+0xc0>)
 8001f16:	2100      	movs	r1, #0
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	6099      	str	r1, [r3, #8]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <SystemInit+0xc4>)
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	60d9      	str	r1, [r3, #12]
 8001f3e:	9100      	str	r1, [sp, #0]
 8001f40:	9101      	str	r1, [sp, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	9a00      	ldr	r2, [sp, #0]
 8001f54:	3201      	adds	r2, #1
 8001f56:	9200      	str	r2, [sp, #0]
 8001f58:	9a01      	ldr	r2, [sp, #4]
 8001f5a:	b91a      	cbnz	r2, 8001f64 <SystemInit+0x50>
 8001f5c:	9a00      	ldr	r2, [sp, #0]
 8001f5e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001f62:	d1f2      	bne.n	8001f4a <SystemInit+0x36>
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <SystemInit+0xc0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8001f6c:	bf18      	it	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	9b01      	ldr	r3, [sp, #4]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <SystemInit+0x70>
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <SystemInit+0xc8>)
 8001f7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <SystemInit+0xc0>)
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <SystemInit+0xcc>)
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SystemInit+0xc0>)
 8001faa:	0189      	lsls	r1, r1, #6
 8001fac:	d5fb      	bpl.n	8001fa6 <SystemInit+0x92>
 8001fae:	f240 7103 	movw	r1, #1795	; 0x703
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <SystemInit+0xd0>)
 8001fb4:	6019      	str	r1, [r3, #0]
 8001fb6:	6893      	ldr	r3, [r2, #8]
 8001fb8:	f023 0303 	bic.w	r3, r3, #3
 8001fbc:	6093      	str	r3, [r2, #8]
 8001fbe:	6893      	ldr	r3, [r2, #8]
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	6093      	str	r3, [r2, #8]
 8001fc6:	6893      	ldr	r3, [r2, #8]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d1fa      	bne.n	8001fc6 <SystemInit+0xb2>
 8001fd0:	e7d2      	b.n	8001f78 <SystemInit+0x64>
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	24003010 	.word	0x24003010
 8001fdc:	e000ed00 	.word	0xe000ed00
 8001fe0:	05403c1a 	.word	0x05403c1a
 8001fe4:	40023c00 	.word	0x40023c00

08001fe8 <MAL_CheckAdd.lto_priv.94>:
 8001fe8:	b508      	push	{r3, lr}
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <MAL_CheckAdd.lto_priv.94+0x18>)
 8001fec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	b11b      	cbz	r3, 8001ffc <MAL_CheckAdd.lto_priv.94+0x14>
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4798      	blx	r3
 8001ff8:	b2c0      	uxtb	r0, r0
 8001ffa:	bd08      	pop	{r3, pc}
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	bd08      	pop	{r3, pc}
 8002000:	08003930 	.word	0x08003930

08002004 <MAL_DeInit>:
 8002004:	b508      	push	{r3, lr}
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <MAL_DeInit+0x18>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	b103      	cbz	r3, 800200e <MAL_DeInit+0xa>
 800200c:	4798      	blx	r3
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <MAL_DeInit+0x1c>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	b103      	cbz	r3, 8002016 <MAL_DeInit+0x12>
 8002014:	4798      	blx	r3
 8002016:	2000      	movs	r0, #0
 8002018:	bd08      	pop	{r3, pc}
 800201a:	bf00      	nop
 800201c:	20002448 	.word	0x20002448
 8002020:	2000241c 	.word	0x2000241c

08002024 <usbd_dfu_DeInit.lto_priv.111>:
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <usbd_dfu_DeInit.lto_priv.111+0x20>)
 8002026:	2302      	movs	r3, #2
 8002028:	b510      	push	{r4, lr}
 800202a:	7013      	strb	r3, [r2, #0]
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <usbd_dfu_DeInit.lto_priv.111+0x24>)
 800202e:	2400      	movs	r4, #0
 8002030:	7113      	strb	r3, [r2, #4]
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <usbd_dfu_DeInit.lto_priv.111+0x28>)
 8002034:	601c      	str	r4, [r3, #0]
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <usbd_dfu_DeInit.lto_priv.111+0x2c>)
 8002038:	601c      	str	r4, [r3, #0]
 800203a:	f7ff ffe3 	bl	8002004 <MAL_DeInit>
 800203e:	4620      	mov	r0, r4
 8002040:	bd10      	pop	{r4, pc}
 8002042:	bf00      	nop
 8002044:	200035c0 	.word	0x200035c0
 8002048:	20003bc4 	.word	0x20003bc4
 800204c:	200025b8 	.word	0x200025b8
 8002050:	200025ac 	.word	0x200025ac

08002054 <USBD_CtlSendStatus>:
 8002054:	b510      	push	{r4, lr}
 8002056:	4604      	mov	r4, r0
 8002058:	2304      	movs	r3, #4
 800205a:	2200      	movs	r2, #0
 800205c:	f880 30e1 	strb.w	r3, [r0, #225]	; 0xe1
 8002060:	4611      	mov	r1, r2
 8002062:	f001 fa39 	bl	80034d8 <DCD_EP_Tx.constprop.6>
 8002066:	4620      	mov	r0, r4
 8002068:	f7ff f916 	bl	8001298 <USB_OTG_EP0_OutStart>
 800206c:	2000      	movs	r0, #0
 800206e:	bd10      	pop	{r4, pc}

08002070 <USBD_CtlSendData>:
 8002070:	4603      	mov	r3, r0
 8002072:	b510      	push	{r4, lr}
 8002074:	2402      	movs	r4, #2
 8002076:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800207a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800207e:	f880 40e1 	strb.w	r4, [r0, #225]	; 0xe1
 8002082:	f001 fa29 	bl	80034d8 <DCD_EP_Tx.constprop.6>
 8002086:	2000      	movs	r0, #0
 8002088:	bd10      	pop	{r4, pc}

0800208a <USBD_CtlError>:
 800208a:	b510      	push	{r4, lr}
 800208c:	4604      	mov	r4, r0
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	f7fe fe7c 	bl	8000d8c <DCD_EP_Stall>
 8002094:	4620      	mov	r0, r4
 8002096:	2100      	movs	r1, #0
 8002098:	f7fe fe78 	bl	8000d8c <DCD_EP_Stall>
 800209c:	4620      	mov	r0, r4
 800209e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020a2:	f7ff b8f9 	b.w	8001298 <USB_OTG_EP0_OutStart>
	...

080020a8 <EP0_TxSent.lto_priv.113>:
 80020a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ac:	4b5c      	ldr	r3, [pc, #368]	; (8002220 <EP0_TxSent.lto_priv.113+0x178>)
 80020ae:	4680      	mov	r8, r0
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	461f      	mov	r7, r3
 80020b4:	2a04      	cmp	r2, #4
 80020b6:	f040 8098 	bne.w	80021ea <EP0_TxSent.lto_priv.113+0x142>
 80020ba:	4e5a      	ldr	r6, [pc, #360]	; (8002224 <EP0_TxSent.lto_priv.113+0x17c>)
 80020bc:	4d5a      	ldr	r5, [pc, #360]	; (8002228 <EP0_TxSent.lto_priv.113+0x180>)
 80020be:	6833      	ldr	r3, [r6, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d14d      	bne.n	8002160 <EP0_TxSent.lto_priv.113+0xb8>
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <EP0_TxSent.lto_priv.113+0x184>)
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	b91a      	cbnz	r2, 80020d2 <EP0_TxSent.lto_priv.113+0x2a>
 80020ca:	682b      	ldr	r3, [r5, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d13c      	bne.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 80020d0:	e083      	b.n	80021da <EP0_TxSent.lto_priv.113+0x132>
 80020d2:	2a21      	cmp	r2, #33	; 0x21
 80020d4:	d10f      	bne.n	80020f6 <EP0_TxSent.lto_priv.113+0x4e>
 80020d6:	682a      	ldr	r2, [r5, #0]
 80020d8:	2a05      	cmp	r2, #5
 80020da:	d136      	bne.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 80020dc:	78da      	ldrb	r2, [r3, #3]
 80020de:	7899      	ldrb	r1, [r3, #2]
 80020e0:	0412      	lsls	r2, r2, #16
 80020e2:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 80020e6:	785a      	ldrb	r2, [r3, #1]
 80020e8:	791b      	ldrb	r3, [r3, #4]
 80020ea:	440a      	add	r2, r1
 80020ec:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 80020f0:	4a4f      	ldr	r2, [pc, #316]	; (8002230 <EP0_TxSent.lto_priv.113+0x188>)
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	e071      	b.n	80021da <EP0_TxSent.lto_priv.113+0x132>
 80020f6:	2a41      	cmp	r2, #65	; 0x41
 80020f8:	d127      	bne.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 80020fa:	682a      	ldr	r2, [r5, #0]
 80020fc:	2a05      	cmp	r2, #5
 80020fe:	d124      	bne.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 8002100:	78da      	ldrb	r2, [r3, #3]
 8002102:	789c      	ldrb	r4, [r3, #2]
 8002104:	0412      	lsls	r2, r2, #16
 8002106:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 800210a:	785c      	ldrb	r4, [r3, #1]
 800210c:	4422      	add	r2, r4
 800210e:	791c      	ldrb	r4, [r3, #4]
 8002110:	4b47      	ldr	r3, [pc, #284]	; (8002230 <EP0_TxSent.lto_priv.113+0x188>)
 8002112:	eb02 6404 	add.w	r4, r2, r4, lsl #24
 8002116:	601c      	str	r4, [r3, #0]
 8002118:	4b46      	ldr	r3, [pc, #280]	; (8002234 <EP0_TxSent.lto_priv.113+0x18c>)
 800211a:	4621      	mov	r1, r4
 800211c:	f8d3 9000 	ldr.w	r9, [r3]
 8002120:	4648      	mov	r0, r9
 8002122:	f7ff ff61 	bl	8001fe8 <MAL_CheckAdd.lto_priv.94>
 8002126:	b980      	cbnz	r0, 800214a <EP0_TxSent.lto_priv.113+0xa2>
 8002128:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 800212c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002130:	d30b      	bcc.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 8002132:	f1b9 0f01 	cmp.w	r9, #1
 8002136:	d808      	bhi.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <EP0_TxSent.lto_priv.113+0x190>)
 800213a:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	b11b      	cbz	r3, 800214a <EP0_TxSent.lto_priv.113+0xa2>
 8002142:	4620      	mov	r0, r4
 8002144:	4798      	blx	r3
 8002146:	2800      	cmp	r0, #0
 8002148:	d047      	beq.n	80021da <EP0_TxSent.lto_priv.113+0x132>
 800214a:	2300      	movs	r3, #0
 800214c:	f88d 3000 	strb.w	r3, [sp]
 8002150:	4669      	mov	r1, sp
 8002152:	2301      	movs	r3, #1
 8002154:	4640      	mov	r0, r8
 8002156:	f8ad 3006 	strh.w	r3, [sp, #6]
 800215a:	f7ff ff96 	bl	800208a <USBD_CtlError>
 800215e:	e03c      	b.n	80021da <EP0_TxSent.lto_priv.113+0x132>
 8002160:	2b01      	cmp	r3, #1
 8002162:	d93a      	bls.n	80021da <EP0_TxSent.lto_priv.113+0x132>
 8002164:	4a32      	ldr	r2, [pc, #200]	; (8002230 <EP0_TxSent.lto_priv.113+0x188>)
 8002166:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 8002170:	eb02 3903 	add.w	r9, r2, r3, lsl #12
 8002174:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <EP0_TxSent.lto_priv.113+0x18c>)
 8002176:	4649      	mov	r1, r9
 8002178:	681c      	ldr	r4, [r3, #0]
 800217a:	f8d5 a000 	ldr.w	sl, [r5]
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff32 	bl	8001fe8 <MAL_CheckAdd.lto_priv.94>
 8002184:	2800      	cmp	r0, #0
 8002186:	d1e0      	bne.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 8002188:	f109 4378 	add.w	r3, r9, #4160749568	; 0xf8000000
 800218c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002190:	d3db      	bcc.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 8002192:	2c01      	cmp	r4, #1
 8002194:	d8d9      	bhi.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 8002196:	4b28      	ldr	r3, [pc, #160]	; (8002238 <EP0_TxSent.lto_priv.113+0x190>)
 8002198:	f853 b024 	ldr.w	fp, [r3, r4, lsl #2]
 800219c:	f8db 3010 	ldr.w	r3, [fp, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0d2      	beq.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 80021a4:	2403      	movs	r4, #3
 80021a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80021aa:	4651      	mov	r1, sl
 80021ac:	4648      	mov	r0, r9
 80021ae:	4798      	blx	r3
 80021b0:	b930      	cbnz	r0, 80021c0 <EP0_TxSent.lto_priv.113+0x118>
 80021b2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80021b6:	4651      	mov	r1, sl
 80021b8:	4648      	mov	r0, r9
 80021ba:	4798      	blx	r3
 80021bc:	b940      	cbnz	r0, 80021d0 <EP0_TxSent.lto_priv.113+0x128>
 80021be:	e00c      	b.n	80021da <EP0_TxSent.lto_priv.113+0x132>
 80021c0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80021c4:	4651      	mov	r1, sl
 80021c6:	4648      	mov	r0, r9
 80021c8:	4798      	blx	r3
 80021ca:	2800      	cmp	r0, #0
 80021cc:	d0f1      	beq.n	80021b2 <EP0_TxSent.lto_priv.113+0x10a>
 80021ce:	e7bc      	b.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 80021d0:	1e63      	subs	r3, r4, #1
 80021d2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80021d6:	d1e6      	bne.n	80021a6 <EP0_TxSent.lto_priv.113+0xfe>
 80021d8:	e7b7      	b.n	800214a <EP0_TxSent.lto_priv.113+0xa2>
 80021da:	2300      	movs	r3, #0
 80021dc:	4a17      	ldr	r2, [pc, #92]	; (800223c <EP0_TxSent.lto_priv.113+0x194>)
 80021de:	602b      	str	r3, [r5, #0]
 80021e0:	6033      	str	r3, [r6, #0]
 80021e2:	2303      	movs	r3, #3
 80021e4:	703b      	strb	r3, [r7, #0]
 80021e6:	7113      	strb	r3, [r2, #4]
 80021e8:	e015      	b.n	8002216 <EP0_TxSent.lto_priv.113+0x16e>
 80021ea:	2a07      	cmp	r2, #7
 80021ec:	d113      	bne.n	8002216 <EP0_TxSent.lto_priv.113+0x16e>
 80021ee:	4a14      	ldr	r2, [pc, #80]	; (8002240 <EP0_TxSent.lto_priv.113+0x198>)
 80021f0:	2100      	movs	r1, #0
 80021f2:	6011      	str	r1, [r2, #0]
 80021f4:	4a13      	ldr	r2, [pc, #76]	; (8002244 <EP0_TxSent.lto_priv.113+0x19c>)
 80021f6:	7f52      	ldrb	r2, [r2, #29]
 80021f8:	f012 0f04 	tst.w	r2, #4
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <EP0_TxSent.lto_priv.113+0x194>)
 80021fe:	d003      	beq.n	8002208 <EP0_TxSent.lto_priv.113+0x160>
 8002200:	2106      	movs	r1, #6
 8002202:	7019      	strb	r1, [r3, #0]
 8002204:	7111      	strb	r1, [r2, #4]
 8002206:	e006      	b.n	8002216 <EP0_TxSent.lto_priv.113+0x16e>
 8002208:	2108      	movs	r1, #8
 800220a:	7019      	strb	r1, [r3, #0]
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <EP0_TxSent.lto_priv.113+0x1a0>)
 800220e:	7111      	strb	r1, [r2, #4]
 8002210:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	2000      	movs	r0, #0
 8002218:	b003      	add	sp, #12
 800221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800221e:	bf00      	nop
 8002220:	200035c0 	.word	0x200035c0
 8002224:	200025b8 	.word	0x200025b8
 8002228:	200025ac 	.word	0x200025ac
 800222c:	200025c0 	.word	0x200025c0
 8002230:	2000237c 	.word	0x2000237c
 8002234:	200025bc 	.word	0x200025bc
 8002238:	08003930 	.word	0x08003930
 800223c:	20003bc4 	.word	0x20003bc4
 8002240:	200025b4 	.word	0x200025b4
 8002244:	20002356 	.word	0x20002356
 8002248:	200025a8 	.word	0x200025a8

0800224c <usbd_dfu_Setup.lto_priv.112>:
 800224c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002250:	f64e 62c1 	movw	r2, #61121	; 0xeec1
 8002254:	880b      	ldrh	r3, [r1, #0]
 8002256:	4605      	mov	r5, r0
 8002258:	4293      	cmp	r3, r2
 800225a:	d102      	bne.n	8002262 <usbd_dfu_Setup.lto_priv.112+0x16>
 800225c:	888b      	ldrh	r3, [r1, #4]
 800225e:	2b05      	cmp	r3, #5
 8002260:	e005      	b.n	800226e <usbd_dfu_Setup.lto_priv.112+0x22>
 8002262:	f64e 62c0 	movw	r2, #61120	; 0xeec0
 8002266:	4293      	cmp	r3, r2
 8002268:	d117      	bne.n	800229a <usbd_dfu_Setup.lto_priv.112+0x4e>
 800226a:	888b      	ldrh	r3, [r1, #4]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d114      	bne.n	800229a <usbd_dfu_Setup.lto_priv.112+0x4e>
 8002270:	888b      	ldrh	r3, [r1, #4]
 8002272:	2b04      	cmp	r3, #4
 8002274:	d102      	bne.n	800227c <usbd_dfu_Setup.lto_priv.112+0x30>
 8002276:	88ca      	ldrh	r2, [r1, #6]
 8002278:	49a7      	ldr	r1, [pc, #668]	; (8002518 <usbd_dfu_Setup.lto_priv.112+0x2cc>)
 800227a:	e09b      	b.n	80023b4 <usbd_dfu_Setup.lto_priv.112+0x168>
 800227c:	2b05      	cmp	r3, #5
 800227e:	f040 8184 	bne.w	800258a <usbd_dfu_Setup.lto_priv.112+0x33e>
 8002282:	788c      	ldrb	r4, [r1, #2]
 8002284:	88ca      	ldrh	r2, [r1, #6]
 8002286:	b90c      	cbnz	r4, 800228c <usbd_dfu_Setup.lto_priv.112+0x40>
 8002288:	49a4      	ldr	r1, [pc, #656]	; (800251c <usbd_dfu_Setup.lto_priv.112+0x2d0>)
 800228a:	e173      	b.n	8002574 <usbd_dfu_Setup.lto_priv.112+0x328>
 800228c:	2400      	movs	r4, #0
 800228e:	9401      	str	r4, [sp, #4]
 8002290:	9402      	str	r4, [sp, #8]
 8002292:	f8ad 400c 	strh.w	r4, [sp, #12]
 8002296:	a901      	add	r1, sp, #4
 8002298:	e16c      	b.n	8002574 <usbd_dfu_Setup.lto_priv.112+0x328>
 800229a:	780c      	ldrb	r4, [r1, #0]
 800229c:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 80022a0:	f000 8152 	beq.w	8002548 <usbd_dfu_Setup.lto_priv.112+0x2fc>
 80022a4:	2c20      	cmp	r4, #32
 80022a6:	f040 8172 	bne.w	800258e <usbd_dfu_Setup.lto_priv.112+0x342>
 80022aa:	784c      	ldrb	r4, [r1, #1]
 80022ac:	2c06      	cmp	r4, #6
 80022ae:	f200 812e 	bhi.w	800250e <usbd_dfu_Setup.lto_priv.112+0x2c2>
 80022b2:	e8df f014 	tbh	[pc, r4, lsl #1]
 80022b6:	00fc      	.short	0x00fc
 80022b8:	00300007 	.word	0x00300007
 80022bc:	00d00098 	.word	0x00d00098
 80022c0:	00e400e1 	.word	0x00e400e1
 80022c4:	88ca      	ldrh	r2, [r1, #6]
 80022c6:	4b96      	ldr	r3, [pc, #600]	; (8002520 <usbd_dfu_Setup.lto_priv.112+0x2d4>)
 80022c8:	b1c2      	cbz	r2, 80022fc <usbd_dfu_Setup.lto_priv.112+0xb0>
 80022ca:	7818      	ldrb	r0, [r3, #0]
 80022cc:	2802      	cmp	r0, #2
 80022ce:	d001      	beq.n	80022d4 <usbd_dfu_Setup.lto_priv.112+0x88>
 80022d0:	2805      	cmp	r0, #5
 80022d2:	d176      	bne.n	80023c2 <usbd_dfu_Setup.lto_priv.112+0x176>
 80022d4:	8848      	ldrh	r0, [r1, #2]
 80022d6:	4993      	ldr	r1, [pc, #588]	; (8002524 <usbd_dfu_Setup.lto_priv.112+0x2d8>)
 80022d8:	f8c5 22ec 	str.w	r2, [r5, #748]	; 0x2ec
 80022dc:	6008      	str	r0, [r1, #0]
 80022de:	4992      	ldr	r1, [pc, #584]	; (8002528 <usbd_dfu_Setup.lto_priv.112+0x2dc>)
 80022e0:	f8c5 22e8 	str.w	r2, [r5, #744]	; 0x2e8
 80022e4:	600a      	str	r2, [r1, #0]
 80022e6:	2103      	movs	r1, #3
 80022e8:	7019      	strb	r1, [r3, #0]
 80022ea:	4b90      	ldr	r3, [pc, #576]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 80022ec:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
 80022f0:	7119      	strb	r1, [r3, #4]
 80022f2:	4628      	mov	r0, r5
 80022f4:	498e      	ldr	r1, [pc, #568]	; (8002530 <usbd_dfu_Setup.lto_priv.112+0x2e4>)
 80022f6:	f001 f8d7 	bl	80034a8 <DCD_EP_PrepareRx.constprop.7>
 80022fa:	e148      	b.n	800258e <usbd_dfu_Setup.lto_priv.112+0x342>
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	2a05      	cmp	r2, #5
 8002300:	d001      	beq.n	8002306 <usbd_dfu_Setup.lto_priv.112+0xba>
 8002302:	2a02      	cmp	r2, #2
 8002304:	d15d      	bne.n	80023c2 <usbd_dfu_Setup.lto_priv.112+0x176>
 8002306:	4a8b      	ldr	r2, [pc, #556]	; (8002534 <usbd_dfu_Setup.lto_priv.112+0x2e8>)
 8002308:	2101      	movs	r1, #1
 800230a:	6011      	str	r1, [r2, #0]
 800230c:	2206      	movs	r2, #6
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	4b86      	ldr	r3, [pc, #536]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 8002312:	711a      	strb	r2, [r3, #4]
 8002314:	e13b      	b.n	800258e <usbd_dfu_Setup.lto_priv.112+0x342>
 8002316:	88cf      	ldrh	r7, [r1, #6]
 8002318:	4b81      	ldr	r3, [pc, #516]	; (8002520 <usbd_dfu_Setup.lto_priv.112+0x2d4>)
 800231a:	2f00      	cmp	r7, #0
 800231c:	d05d      	beq.n	80023da <usbd_dfu_Setup.lto_priv.112+0x18e>
 800231e:	7818      	ldrb	r0, [r3, #0]
 8002320:	4a80      	ldr	r2, [pc, #512]	; (8002524 <usbd_dfu_Setup.lto_priv.112+0x2d8>)
 8002322:	2802      	cmp	r0, #2
 8002324:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8002528 <usbd_dfu_Setup.lto_priv.112+0x2dc>
 8002328:	d001      	beq.n	800232e <usbd_dfu_Setup.lto_priv.112+0xe2>
 800232a:	2809      	cmp	r0, #9
 800232c:	d14d      	bne.n	80023ca <usbd_dfu_Setup.lto_priv.112+0x17e>
 800232e:	884e      	ldrh	r6, [r1, #2]
 8002330:	f8c8 7000 	str.w	r7, [r8]
 8002334:	6016      	str	r6, [r2, #0]
 8002336:	4a7d      	ldr	r2, [pc, #500]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 8002338:	b97e      	cbnz	r6, 800235a <usbd_dfu_Setup.lto_priv.112+0x10e>
 800233a:	2f03      	cmp	r7, #3
 800233c:	497c      	ldr	r1, [pc, #496]	; (8002530 <usbd_dfu_Setup.lto_priv.112+0x2e4>)
 800233e:	bf98      	it	ls
 8002340:	2409      	movls	r4, #9
 8002342:	701c      	strb	r4, [r3, #0]
 8002344:	2321      	movs	r3, #33	; 0x21
 8002346:	7114      	strb	r4, [r2, #4]
 8002348:	704b      	strb	r3, [r1, #1]
 800234a:	2203      	movs	r2, #3
 800234c:	2341      	movs	r3, #65	; 0x41
 800234e:	4628      	mov	r0, r5
 8002350:	700e      	strb	r6, [r1, #0]
 8002352:	708b      	strb	r3, [r1, #2]
 8002354:	f7ff fe8c 	bl	8002070 <USBD_CtlSendData>
 8002358:	e0d7      	b.n	800250a <usbd_dfu_Setup.lto_priv.112+0x2be>
 800235a:	2e01      	cmp	r6, #1
 800235c:	d02e      	beq.n	80023bc <usbd_dfu_Setup.lto_priv.112+0x170>
 800235e:	2109      	movs	r1, #9
 8002360:	7019      	strb	r1, [r3, #0]
 8002362:	4b75      	ldr	r3, [pc, #468]	; (8002538 <usbd_dfu_Setup.lto_priv.112+0x2ec>)
 8002364:	7111      	strb	r1, [r2, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	2801      	cmp	r0, #1
 800236a:	d907      	bls.n	800237c <usbd_dfu_Setup.lto_priv.112+0x130>
 800236c:	2100      	movs	r1, #0
 800236e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002372:	486f      	ldr	r0, [pc, #444]	; (8002530 <usbd_dfu_Setup.lto_priv.112+0x2e4>)
 8002374:	f000 fed0 	bl	8003118 <memset>
 8002378:	496d      	ldr	r1, [pc, #436]	; (8002530 <usbd_dfu_Setup.lto_priv.112+0x2e4>)
 800237a:	e019      	b.n	80023b0 <usbd_dfu_Setup.lto_priv.112+0x164>
 800237c:	4b6f      	ldr	r3, [pc, #444]	; (800253c <usbd_dfu_Setup.lto_priv.112+0x2f0>)
 800237e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002382:	6963      	ldr	r3, [r4, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f1      	beq.n	800236c <usbd_dfu_Setup.lto_priv.112+0x120>
 8002388:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <usbd_dfu_Setup.lto_priv.112+0x2f4>)
 800238a:	f506 267f 	add.w	r6, r6, #1044480	; 0xff000
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f606 76fe 	addw	r6, r6, #4094	; 0xffe
 8002394:	eb03 3606 	add.w	r6, r3, r6, lsl #12
 8002398:	4631      	mov	r1, r6
 800239a:	f7ff fe25 	bl	8001fe8 <MAL_CheckAdd.lto_priv.94>
 800239e:	2800      	cmp	r0, #0
 80023a0:	d1e4      	bne.n	800236c <usbd_dfu_Setup.lto_priv.112+0x120>
 80023a2:	6963      	ldr	r3, [r4, #20]
 80023a4:	4639      	mov	r1, r7
 80023a6:	4630      	mov	r0, r6
 80023a8:	4798      	blx	r3
 80023aa:	2800      	cmp	r0, #0
 80023ac:	d0de      	beq.n	800236c <usbd_dfu_Setup.lto_priv.112+0x120>
 80023ae:	4601      	mov	r1, r0
 80023b0:	f8b8 2000 	ldrh.w	r2, [r8]
 80023b4:	4628      	mov	r0, r5
 80023b6:	f7ff fe5b 	bl	8002070 <USBD_CtlSendData>
 80023ba:	e0e8      	b.n	800258e <usbd_dfu_Setup.lto_priv.112+0x342>
 80023bc:	200f      	movs	r0, #15
 80023be:	7018      	strb	r0, [r3, #0]
 80023c0:	7110      	strb	r0, [r2, #4]
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7ff fe61 	bl	800208a <USBD_CtlError>
 80023c8:	e0e1      	b.n	800258e <usbd_dfu_Setup.lto_priv.112+0x342>
 80023ca:	2400      	movs	r4, #0
 80023cc:	4628      	mov	r0, r5
 80023ce:	f8c8 4000 	str.w	r4, [r8]
 80023d2:	6014      	str	r4, [r2, #0]
 80023d4:	f7ff fe59 	bl	800208a <USBD_CtlError>
 80023d8:	e0da      	b.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	4b53      	ldr	r3, [pc, #332]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 80023e0:	463c      	mov	r4, r7
 80023e2:	711a      	strb	r2, [r3, #4]
 80023e4:	e0d4      	b.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 80023e6:	4b4e      	ldr	r3, [pc, #312]	; (8002520 <usbd_dfu_Setup.lto_priv.112+0x2d4>)
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	2a06      	cmp	r2, #6
 80023ec:	d01f      	beq.n	800242e <usbd_dfu_Setup.lto_priv.112+0x1e2>
 80023ee:	2a07      	cmp	r2, #7
 80023f0:	d02a      	beq.n	8002448 <usbd_dfu_Setup.lto_priv.112+0x1fc>
 80023f2:	2a03      	cmp	r2, #3
 80023f4:	d12c      	bne.n	8002450 <usbd_dfu_Setup.lto_priv.112+0x204>
 80023f6:	4a4c      	ldr	r2, [pc, #304]	; (8002528 <usbd_dfu_Setup.lto_priv.112+0x2dc>)
 80023f8:	6811      	ldr	r1, [r2, #0]
 80023fa:	4a4c      	ldr	r2, [pc, #304]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 80023fc:	b199      	cbz	r1, 8002426 <usbd_dfu_Setup.lto_priv.112+0x1da>
 80023fe:	2104      	movs	r1, #4
 8002400:	7019      	strb	r1, [r3, #0]
 8002402:	4b48      	ldr	r3, [pc, #288]	; (8002524 <usbd_dfu_Setup.lto_priv.112+0x2d8>)
 8002404:	7111      	strb	r1, [r2, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	494b      	ldr	r1, [pc, #300]	; (8002538 <usbd_dfu_Setup.lto_priv.112+0x2ec>)
 800240a:	4b4d      	ldr	r3, [pc, #308]	; (8002540 <usbd_dfu_Setup.lto_priv.112+0x2f4>)
 800240c:	b92a      	cbnz	r2, 800241a <usbd_dfu_Setup.lto_priv.112+0x1ce>
 800240e:	4848      	ldr	r0, [pc, #288]	; (8002530 <usbd_dfu_Setup.lto_priv.112+0x2e4>)
 8002410:	7800      	ldrb	r0, [r0, #0]
 8002412:	2841      	cmp	r0, #65	; 0x41
 8002414:	d101      	bne.n	800241a <usbd_dfu_Setup.lto_priv.112+0x1ce>
 8002416:	6808      	ldr	r0, [r1, #0]
 8002418:	e001      	b.n	800241e <usbd_dfu_Setup.lto_priv.112+0x1d2>
 800241a:	6808      	ldr	r0, [r1, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	f001 f870 	bl	8003504 <MAL_GetStatus.constprop.3>
 8002424:	e014      	b.n	8002450 <usbd_dfu_Setup.lto_priv.112+0x204>
 8002426:	2105      	movs	r1, #5
 8002428:	7019      	strb	r1, [r3, #0]
 800242a:	7111      	strb	r1, [r2, #4]
 800242c:	e010      	b.n	8002450 <usbd_dfu_Setup.lto_priv.112+0x204>
 800242e:	4a41      	ldr	r2, [pc, #260]	; (8002534 <usbd_dfu_Setup.lto_priv.112+0x2e8>)
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	2a01      	cmp	r2, #1
 8002434:	d103      	bne.n	800243e <usbd_dfu_Setup.lto_priv.112+0x1f2>
 8002436:	2207      	movs	r2, #7
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	2205      	movs	r2, #5
 800243c:	e006      	b.n	800244c <usbd_dfu_Setup.lto_priv.112+0x200>
 800243e:	b93a      	cbnz	r2, 8002450 <usbd_dfu_Setup.lto_priv.112+0x204>
 8002440:	4a40      	ldr	r2, [pc, #256]	; (8002544 <usbd_dfu_Setup.lto_priv.112+0x2f8>)
 8002442:	7f52      	ldrb	r2, [r2, #29]
 8002444:	0752      	lsls	r2, r2, #29
 8002446:	d503      	bpl.n	8002450 <usbd_dfu_Setup.lto_priv.112+0x204>
 8002448:	2202      	movs	r2, #2
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	4b37      	ldr	r3, [pc, #220]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 800244e:	711a      	strb	r2, [r3, #4]
 8002450:	2206      	movs	r2, #6
 8002452:	4936      	ldr	r1, [pc, #216]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 8002454:	e7ae      	b.n	80023b4 <usbd_dfu_Setup.lto_priv.112+0x168>
 8002456:	4a32      	ldr	r2, [pc, #200]	; (8002520 <usbd_dfu_Setup.lto_priv.112+0x2d4>)
 8002458:	7813      	ldrb	r3, [r2, #0]
 800245a:	2b0a      	cmp	r3, #10
 800245c:	4b33      	ldr	r3, [pc, #204]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 800245e:	d105      	bne.n	800246c <usbd_dfu_Setup.lto_priv.112+0x220>
 8002460:	2102      	movs	r1, #2
 8002462:	2400      	movs	r4, #0
 8002464:	7011      	strb	r1, [r2, #0]
 8002466:	701c      	strb	r4, [r3, #0]
 8002468:	7119      	strb	r1, [r3, #4]
 800246a:	e091      	b.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 800246c:	210a      	movs	r1, #10
 800246e:	7011      	strb	r1, [r2, #0]
 8002470:	220e      	movs	r2, #14
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	7119      	strb	r1, [r3, #4]
 8002476:	e08a      	b.n	800258e <usbd_dfu_Setup.lto_priv.112+0x342>
 8002478:	2201      	movs	r2, #1
 800247a:	4929      	ldr	r1, [pc, #164]	; (8002520 <usbd_dfu_Setup.lto_priv.112+0x2d4>)
 800247c:	e79a      	b.n	80023b4 <usbd_dfu_Setup.lto_priv.112+0x168>
 800247e:	4928      	ldr	r1, [pc, #160]	; (8002520 <usbd_dfu_Setup.lto_priv.112+0x2d4>)
 8002480:	780a      	ldrb	r2, [r1, #0]
 8002482:	2a09      	cmp	r2, #9
 8002484:	f200 8083 	bhi.w	800258e <usbd_dfu_Setup.lto_priv.112+0x342>
 8002488:	f44f 731b 	mov.w	r3, #620	; 0x26c
 800248c:	40d3      	lsrs	r3, r2
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	f083 0401 	eor.w	r4, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d079      	beq.n	800258e <usbd_dfu_Setup.lto_priv.112+0x342>
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 800249c:	2202      	movs	r2, #2
 800249e:	701c      	strb	r4, [r3, #0]
 80024a0:	711a      	strb	r2, [r3, #4]
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <usbd_dfu_Setup.lto_priv.112+0x2d8>)
 80024a4:	700a      	strb	r2, [r1, #0]
 80024a6:	601c      	str	r4, [r3, #0]
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <usbd_dfu_Setup.lto_priv.112+0x2dc>)
 80024aa:	601c      	str	r4, [r3, #0]
 80024ac:	e070      	b.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 80024ae:	481c      	ldr	r0, [pc, #112]	; (8002520 <usbd_dfu_Setup.lto_priv.112+0x2d4>)
 80024b0:	7802      	ldrb	r2, [r0, #0]
 80024b2:	2a09      	cmp	r2, #9
 80024b4:	d80f      	bhi.n	80024d6 <usbd_dfu_Setup.lto_priv.112+0x28a>
 80024b6:	f44f 731b 	mov.w	r3, #620	; 0x26c
 80024ba:	40d3      	lsrs	r3, r2
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	f083 0201 	eor.w	r2, r3, #1
 80024c4:	b13b      	cbz	r3, 80024d6 <usbd_dfu_Setup.lto_priv.112+0x28a>
 80024c6:	2302      	movs	r3, #2
 80024c8:	7003      	strb	r3, [r0, #0]
 80024ca:	4818      	ldr	r0, [pc, #96]	; (800252c <usbd_dfu_Setup.lto_priv.112+0x2e0>)
 80024cc:	7103      	strb	r3, [r0, #4]
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <usbd_dfu_Setup.lto_priv.112+0x2d8>)
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <usbd_dfu_Setup.lto_priv.112+0x2dc>)
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <usbd_dfu_Setup.lto_priv.112+0x2f8>)
 80024d8:	7f9b      	ldrb	r3, [r3, #30]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80024e2:	b163      	cbz	r3, 80024fe <usbd_dfu_Setup.lto_priv.112+0x2b2>
 80024e4:	4628      	mov	r0, r5
 80024e6:	f7fe fc48 	bl	8000d7a <DCD_DevDisconnect>
 80024ea:	692a      	ldr	r2, [r5, #16]
 80024ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024f0:	6853      	ldr	r3, [r2, #4]
 80024f2:	f36f 0341 	bfc	r3, #1, #1
 80024f6:	6053      	str	r3, [r2, #4]
 80024f8:	f001 f874 	bl	80035e4 <USB_OTG_BSP_uDelay>
 80024fc:	e048      	b.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 80024fe:	884b      	ldrh	r3, [r1, #2]
 8002500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002504:	4358      	muls	r0, r3
 8002506:	f001 f86d 	bl	80035e4 <USB_OTG_BSP_uDelay>
 800250a:	4634      	mov	r4, r6
 800250c:	e040      	b.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 800250e:	4628      	mov	r0, r5
 8002510:	f7ff fdbb 	bl	800208a <USBD_CtlError>
 8002514:	e039      	b.n	800258a <usbd_dfu_Setup.lto_priv.112+0x33e>
 8002516:	bf00      	nop
 8002518:	080038d6 	.word	0x080038d6
 800251c:	080037e0 	.word	0x080037e0
 8002520:	200035c0 	.word	0x200035c0
 8002524:	200025b8 	.word	0x200025b8
 8002528:	200025ac 	.word	0x200025ac
 800252c:	20003bc4 	.word	0x20003bc4
 8002530:	200025c0 	.word	0x200025c0
 8002534:	200025b4 	.word	0x200025b4
 8002538:	200025bc 	.word	0x200025bc
 800253c:	08003930 	.word	0x08003930
 8002540:	2000237c 	.word	0x2000237c
 8002544:	20002356 	.word	0x20002356
 8002548:	784b      	ldrb	r3, [r1, #1]
 800254a:	2b0a      	cmp	r3, #10
 800254c:	d010      	beq.n	8002570 <usbd_dfu_Setup.lto_priv.112+0x324>
 800254e:	2b0b      	cmp	r3, #11
 8002550:	d014      	beq.n	800257c <usbd_dfu_Setup.lto_priv.112+0x330>
 8002552:	2b06      	cmp	r3, #6
 8002554:	d11c      	bne.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 8002556:	884b      	ldrh	r3, [r1, #2]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	2b21      	cmp	r3, #33	; 0x21
 800255c:	d105      	bne.n	800256a <usbd_dfu_Setup.lto_priv.112+0x31e>
 800255e:	88ca      	ldrh	r2, [r1, #6]
 8002560:	490d      	ldr	r1, [pc, #52]	; (8002598 <usbd_dfu_Setup.lto_priv.112+0x34c>)
 8002562:	2a09      	cmp	r2, #9
 8002564:	bf28      	it	cs
 8002566:	2209      	movcs	r2, #9
 8002568:	e004      	b.n	8002574 <usbd_dfu_Setup.lto_priv.112+0x328>
 800256a:	4621      	mov	r1, r4
 800256c:	4622      	mov	r2, r4
 800256e:	e001      	b.n	8002574 <usbd_dfu_Setup.lto_priv.112+0x328>
 8002570:	490a      	ldr	r1, [pc, #40]	; (800259c <usbd_dfu_Setup.lto_priv.112+0x350>)
 8002572:	2201      	movs	r2, #1
 8002574:	4628      	mov	r0, r5
 8002576:	f7ff fd7b 	bl	8002070 <USBD_CtlSendData>
 800257a:	e009      	b.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 800257c:	788b      	ldrb	r3, [r1, #2]
 800257e:	2b01      	cmp	r3, #1
 8002580:	f63f af1f 	bhi.w	80023c2 <usbd_dfu_Setup.lto_priv.112+0x176>
 8002584:	4a05      	ldr	r2, [pc, #20]	; (800259c <usbd_dfu_Setup.lto_priv.112+0x350>)
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	e002      	b.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 800258a:	2402      	movs	r4, #2
 800258c:	e000      	b.n	8002590 <usbd_dfu_Setup.lto_priv.112+0x344>
 800258e:	2400      	movs	r4, #0
 8002590:	4620      	mov	r0, r4
 8002592:	b004      	add	sp, #16
 8002594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002598:	20002371 	.word	0x20002371
 800259c:	200025bc 	.word	0x200025bc

080025a0 <USBD_SetCfg>:
 80025a0:	b510      	push	{r4, lr}
 80025a2:	4604      	mov	r4, r0
 80025a4:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4798      	blx	r3
 80025ac:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
 80025b0:	b10b      	cbz	r3, 80025b6 <USBD_SetCfg+0x16>
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4798      	blx	r3
 80025b6:	2000      	movs	r0, #0
 80025b8:	bd10      	pop	{r4, pc}
	...

080025bc <FLASH_If_Write>:
 80025bc:	078b      	lsls	r3, r1, #30
 80025be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c2:	4607      	mov	r7, r0
 80025c4:	460e      	mov	r6, r1
 80025c6:	d007      	beq.n	80025d8 <FLASH_If_Write+0x1c>
 80025c8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80025cc:	400b      	ands	r3, r1
 80025ce:	460a      	mov	r2, r1
 80025d0:	3304      	adds	r3, #4
 80025d2:	4913      	ldr	r1, [pc, #76]	; (8002620 <FLASH_If_Write+0x64>)
 80025d4:	20ff      	movs	r0, #255	; 0xff
 80025d6:	e009      	b.n	80025ec <FLASH_If_Write+0x30>
 80025d8:	f000 fd90 	bl	80030fc <FLASH_Unlock>
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <FLASH_If_Write+0x68>)
 80025de:	22f3      	movs	r2, #243	; 0xf3
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	2408      	movs	r4, #8
 80025e4:	2500      	movs	r5, #0
 80025e6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8002620 <FLASH_If_Write+0x64>
 80025ea:	e00c      	b.n	8002606 <FLASH_If_Write+0x4a>
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d2f3      	bcs.n	80025d8 <FLASH_If_Write+0x1c>
 80025f0:	5450      	strb	r0, [r2, r1]
 80025f2:	3201      	adds	r2, #1
 80025f4:	e7fa      	b.n	80025ec <FLASH_If_Write+0x30>
 80025f6:	2c08      	cmp	r4, #8
 80025f8:	d109      	bne.n	800260e <FLASH_If_Write+0x52>
 80025fa:	f858 1005 	ldr.w	r1, [r8, r5]
 80025fe:	f000 fd21 	bl	8003044 <FLASH_ProgramWord>
 8002602:	4604      	mov	r4, r0
 8002604:	3504      	adds	r5, #4
 8002606:	42b5      	cmp	r5, r6
 8002608:	eb05 0007 	add.w	r0, r5, r7
 800260c:	d3f3      	bcc.n	80025f6 <FLASH_If_Write+0x3a>
 800260e:	f000 fd6d 	bl	80030ec <FLASH_Lock>
 8002612:	f1b4 0008 	subs.w	r0, r4, #8
 8002616:	bf18      	it	ne
 8002618:	2001      	movne	r0, #1
 800261a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800261e:	bf00      	nop
 8002620:	200025c0 	.word	0x200025c0
 8002624:	40023c00 	.word	0x40023c00

08002628 <FLASH_If_Erase>:
 8002628:	b510      	push	{r4, lr}
 800262a:	4604      	mov	r4, r0
 800262c:	f000 fd66 	bl	80030fc <FLASH_Unlock>
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <FLASH_If_Erase+0x44>)
 8002632:	22f3      	movs	r2, #243	; 0xf3
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	4620      	mov	r0, r4
 8002638:	f7fe ff66 	bl	8001508 <addressToSectorIndex>
 800263c:	4604      	mov	r4, r0
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <FLASH_If_Erase+0x48>)
 8002640:	2001      	movs	r0, #1
 8002642:	40a0      	lsls	r0, r4
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b280      	uxth	r0, r0
 8002648:	4218      	tst	r0, r3
 800264a:	d101      	bne.n	8002650 <FLASH_If_Erase+0x28>
 800264c:	f000 fff6 	bl	800363c <FLASH_WriteProtection_Disable.part.4.lto_priv.95>
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <FLASH_If_Erase+0x4c>)
 8002652:	2102      	movs	r1, #2
 8002654:	5d18      	ldrb	r0, [r3, r4]
 8002656:	f000 fd13 	bl	8003080 <FLASH_EraseSector>
 800265a:	4604      	mov	r4, r0
 800265c:	f000 fd46 	bl	80030ec <FLASH_Lock>
 8002660:	f1b4 0008 	subs.w	r0, r4, #8
 8002664:	bf18      	it	ne
 8002666:	2001      	movne	r0, #1
 8002668:	bd10      	pop	{r4, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023c16 	.word	0x40023c16
 8002674:	080037b4 	.word	0x080037b4

08002678 <HAL_DFU_USB_Handle_Vendor_Request.lto_priv.122>:
              &DFU_USR_cb); // Passing NULL here to reduce bootloader flash requirements
}

uint8_t HAL_DFU_USB_Handle_Vendor_Request(USB_SETUP_REQ* req, uint8_t dataStage) {
    // Forward to DFU class driver
    if (req != NULL && req->bRequest == 0xee && req->wIndex == 0x0004 && req->wValue == 0x0000) {
 8002678:	4601      	mov	r1, r0
 800267a:	b158      	cbz	r0, 8002694 <HAL_DFU_USB_Handle_Vendor_Request.lto_priv.122+0x1c>
 800267c:	7843      	ldrb	r3, [r0, #1]
 800267e:	2bee      	cmp	r3, #238	; 0xee
 8002680:	d108      	bne.n	8002694 <HAL_DFU_USB_Handle_Vendor_Request.lto_priv.122+0x1c>
 8002682:	8883      	ldrh	r3, [r0, #4]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d105      	bne.n	8002694 <HAL_DFU_USB_Handle_Vendor_Request.lto_priv.122+0x1c>
 8002688:	8843      	ldrh	r3, [r0, #2]
 800268a:	b91b      	cbnz	r3, 8002694 <HAL_DFU_USB_Handle_Vendor_Request.lto_priv.122+0x1c>
        return DFU_cb.Setup(&USB_OTG_dev, req);
 800268c:	4b02      	ldr	r3, [pc, #8]	; (8002698 <HAL_DFU_USB_Handle_Vendor_Request.lto_priv.122+0x20>)
 800268e:	4803      	ldr	r0, [pc, #12]	; (800269c <HAL_DFU_USB_Handle_Vendor_Request.lto_priv.122+0x24>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	4718      	bx	r3
    }

    return USBD_FAIL;
}
 8002694:	2002      	movs	r0, #2
 8002696:	4770      	bx	lr
 8002698:	200023a4 	.word	0x200023a4
 800269c:	200036ec 	.word	0x200036ec

080026a0 <dummy.lto_priv.121>:
#else
    return (((*(__IO uint32_t*)address) & APP_START_MASK) == 0x20000000);
#endif
}

static void dummy(void* reserved) {}
 80026a0:	4770      	bx	lr

080026a2 <EXTI15_10_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80026a2:	b508      	push	{r3, lr}
    BUTTON_Irq_Handler(EXTI_Line10);
 80026a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026a8:	f000 fe0a 	bl	80032c0 <BUTTON_Irq_Handler>
    BUTTON_Irq_Handler(EXTI_Line11);
 80026ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80026b0:	f000 fe06 	bl	80032c0 <BUTTON_Irq_Handler>
    BUTTON_Irq_Handler(EXTI_Line12);
 80026b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026b8:	f000 fe02 	bl	80032c0 <BUTTON_Irq_Handler>
    BUTTON_Irq_Handler(EXTI_Line13);
 80026bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026c0:	f000 fdfe 	bl	80032c0 <BUTTON_Irq_Handler>
    BUTTON_Irq_Handler(EXTI_Line14);
 80026c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026c8:	f000 fdfa 	bl	80032c0 <BUTTON_Irq_Handler>
    BUTTON_Irq_Handler(EXTI_Line15);
}
 80026cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BUTTON_Irq_Handler(EXTI_Line10);
    BUTTON_Irq_Handler(EXTI_Line11);
    BUTTON_Irq_Handler(EXTI_Line12);
    BUTTON_Irq_Handler(EXTI_Line13);
    BUTTON_Irq_Handler(EXTI_Line14);
    BUTTON_Irq_Handler(EXTI_Line15);
 80026d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026d4:	f000 bdf4 	b.w	80032c0 <BUTTON_Irq_Handler>

080026d8 <EXTI9_5_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
 80026d8:	b508      	push	{r3, lr}
    BUTTON_Irq_Handler(EXTI_Line5);
 80026da:	2020      	movs	r0, #32
 80026dc:	f000 fdf0 	bl	80032c0 <BUTTON_Irq_Handler>
    BUTTON_Irq_Handler(EXTI_Line6);
 80026e0:	2040      	movs	r0, #64	; 0x40
 80026e2:	f000 fded 	bl	80032c0 <BUTTON_Irq_Handler>
    BUTTON_Irq_Handler(EXTI_Line7);
 80026e6:	2080      	movs	r0, #128	; 0x80
 80026e8:	f000 fdea 	bl	80032c0 <BUTTON_Irq_Handler>
    BUTTON_Irq_Handler(EXTI_Line8);
 80026ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026f0:	f000 fde6 	bl	80032c0 <BUTTON_Irq_Handler>
    BUTTON_Irq_Handler(EXTI_Line9);
}
 80026f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
    BUTTON_Irq_Handler(EXTI_Line5);
    BUTTON_Irq_Handler(EXTI_Line6);
    BUTTON_Irq_Handler(EXTI_Line7);
    BUTTON_Irq_Handler(EXTI_Line8);
    BUTTON_Irq_Handler(EXTI_Line9);
 80026f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026fc:	f000 bde0 	b.w	80032c0 <BUTTON_Irq_Handler>

08002700 <EXTI4_IRQHandler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI4_IRQHandler(void)
{
    BUTTON_Irq_Handler(EXTI_Line4);
 8002700:	2010      	movs	r0, #16
 8002702:	f000 bddd 	b.w	80032c0 <BUTTON_Irq_Handler>

08002706 <EXTI3_IRQHandler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI3_IRQHandler(void)
{
    BUTTON_Irq_Handler(EXTI_Line3);
 8002706:	2008      	movs	r0, #8
 8002708:	f000 bdda 	b.w	80032c0 <BUTTON_Irq_Handler>

0800270c <EXTI2_IRQHandler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI2_IRQHandler(void)
{
    BUTTON_Irq_Handler(EXTI_Line2);
 800270c:	2004      	movs	r0, #4
 800270e:	f000 bdd7 	b.w	80032c0 <BUTTON_Irq_Handler>

08002712 <EXTI1_IRQHandler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI1_IRQHandler(void)
{
    BUTTON_Irq_Handler(EXTI_Line1);
 8002712:	2002      	movs	r0, #2
 8002714:	f000 bdd4 	b.w	80032c0 <BUTTON_Irq_Handler>

08002718 <EXTI0_IRQHandler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI0_IRQHandler(void)
{
    BUTTON_Irq_Handler(EXTI_Line0);
 8002718:	2001      	movs	r0, #1
 800271a:	f000 bdd1 	b.w	80032c0 <BUTTON_Irq_Handler>
	...

08002720 <OTG_HS_IRQHandler>:
 * @brief  This function handles OTG_HS Handler.
 * @param  None
 * @retval None
 */
void OTG_HS_IRQHandler(void)
{
 8002720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002724:	4c8d      	ldr	r4, [pc, #564]	; (800295c <OTG_HS_IRQHandler+0x23c>)
 8002726:	b085      	sub	sp, #20
 8002728:	68e3      	ldr	r3, [r4, #12]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	07d0      	lsls	r0, r2, #31
 800272e:	f100 8246 	bmi.w	8002bbe <OTG_HS_IRQHandler+0x49e>
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f000 8240 	beq.w	8002bbe <OTG_HS_IRQHandler+0x49e>
 800273e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002742:	0719      	lsls	r1, r3, #28
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	d551      	bpl.n	80027ec <OTG_HS_IRQHandler+0xcc>
 8002748:	46a0      	mov	r8, r4
 800274a:	46a1      	mov	r9, r4
 800274c:	6923      	ldr	r3, [r4, #16]
 800274e:	f8df a214 	ldr.w	sl, [pc, #532]	; 8002964 <OTG_HS_IRQHandler+0x244>
 8002752:	699e      	ldr	r6, [r3, #24]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f104 0b48 	add.w	fp, r4, #72	; 0x48
 800275a:	401e      	ands	r6, r3
 800275c:	0c36      	lsrs	r6, r6, #16
 800275e:	2700      	movs	r7, #0
 8002760:	2e00      	cmp	r6, #0
 8002762:	d043      	beq.n	80027ec <OTG_HS_IRQHandler+0xcc>
 8002764:	07f2      	lsls	r2, r6, #31
 8002766:	d53a      	bpl.n	80027de <OTG_HS_IRQHandler+0xbe>
 8002768:	b2f9      	uxtb	r1, r7
 800276a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	689d      	ldr	r5, [r3, #8]
 8002772:	6923      	ldr	r3, [r4, #16]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	401d      	ands	r5, r3
 8002778:	07eb      	lsls	r3, r5, #31
 800277a:	d520      	bpl.n	80027be <OTG_HS_IRQHandler+0x9e>
 800277c:	f8db 3000 	ldr.w	r3, [fp]
 8002780:	2501      	movs	r5, #1
 8002782:	609d      	str	r5, [r3, #8]
 8002784:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002788:	42ab      	cmp	r3, r5
 800278a:	d109      	bne.n	80027a0 <OTG_HS_IRQHandler+0x80>
 800278c:	f8db 3000 	ldr.w	r3, [fp]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8002796:	f8d8 32d4 	ldr.w	r3, [r8, #724]	; 0x2d4
 800279a:	1a1b      	subs	r3, r3, r0
 800279c:	f8c8 32e4 	str.w	r3, [r8, #740]	; 0x2e4
 80027a0:	f8da 3000 	ldr.w	r3, [sl]
 80027a4:	486d      	ldr	r0, [pc, #436]	; (800295c <OTG_HS_IRQHandler+0x23c>)
 80027a6:	4798      	blx	r3
 80027a8:	78e3      	ldrb	r3, [r4, #3]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <OTG_HS_IRQHandler+0x9e>
 80027ae:	b937      	cbnz	r7, 80027be <OTG_HS_IRQHandler+0x9e>
 80027b0:	f899 30e1 	ldrb.w	r3, [r9, #225]	; 0xe1
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d102      	bne.n	80027be <OTG_HS_IRQHandler+0x9e>
 80027b8:	4868      	ldr	r0, [pc, #416]	; (800295c <OTG_HS_IRQHandler+0x23c>)
 80027ba:	f7fe fd6d 	bl	8001298 <USB_OTG_EP0_OutStart>
 80027be:	07a8      	lsls	r0, r5, #30
 80027c0:	bf42      	ittt	mi
 80027c2:	f8db 3000 	ldrmi.w	r3, [fp]
 80027c6:	2502      	movmi	r5, #2
 80027c8:	609d      	strmi	r5, [r3, #8]
 80027ca:	0729      	lsls	r1, r5, #28
 80027cc:	d507      	bpl.n	80027de <OTG_HS_IRQHandler+0xbe>
 80027ce:	f8da 3008 	ldr.w	r3, [sl, #8]
 80027d2:	4862      	ldr	r0, [pc, #392]	; (800295c <OTG_HS_IRQHandler+0x23c>)
 80027d4:	4798      	blx	r3
 80027d6:	f8db 3000 	ldr.w	r3, [fp]
 80027da:	2208      	movs	r2, #8
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	3701      	adds	r7, #1
 80027e0:	0876      	lsrs	r6, r6, #1
 80027e2:	f10b 0b04 	add.w	fp, fp, #4
 80027e6:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80027ea:	e7b9      	b.n	8002760 <OTG_HS_IRQHandler+0x40>
 80027ec:	9b01      	ldr	r3, [sp, #4]
 80027ee:	075a      	lsls	r2, r3, #29
 80027f0:	f140 80ba 	bpl.w	8002968 <OTG_HS_IRQHandler+0x248>
 80027f4:	4f5a      	ldr	r7, [pc, #360]	; (8002960 <OTG_HS_IRQHandler+0x240>)
 80027f6:	6923      	ldr	r3, [r4, #16]
 80027f8:	f1a7 0618 	sub.w	r6, r7, #24
 80027fc:	46b3      	mov	fp, r6
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f04f 0a00 	mov.w	sl, #0
 8002806:	ea02 0803 	and.w	r8, r2, r3
 800280a:	fa1f f888 	uxth.w	r8, r8
 800280e:	f1b8 0f00 	cmp.w	r8, #0
 8002812:	f000 80a9 	beq.w	8002968 <OTG_HS_IRQHandler+0x248>
 8002816:	f018 0f01 	tst.w	r8, #1
 800281a:	f000 8098 	beq.w	800294e <OTG_HS_IRQHandler+0x22e>
 800281e:	6922      	ldr	r2, [r4, #16]
 8002820:	fa5f f98a 	uxtb.w	r9, sl
 8002824:	6911      	ldr	r1, [r2, #16]
 8002826:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002828:	eb04 0089 	add.w	r0, r4, r9, lsl #2
 800282c:	6980      	ldr	r0, [r0, #24]
 800282e:	fa23 f309 	lsr.w	r3, r3, r9
 8002832:	01db      	lsls	r3, r3, #7
 8002834:	b2db      	uxtb	r3, r3
 8002836:	6880      	ldr	r0, [r0, #8]
 8002838:	ea43 0501 	orr.w	r5, r3, r1
 800283c:	4005      	ands	r5, r0
 800283e:	07eb      	lsls	r3, r5, #31
 8002840:	d51b      	bpl.n	800287a <OTG_HS_IRQHandler+0x15a>
 8002842:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002844:	2501      	movs	r5, #1
 8002846:	fa05 f10a 	lsl.w	r1, r5, sl
 800284a:	ea23 0301 	bic.w	r3, r3, r1
 800284e:	6353      	str	r3, [r2, #52]	; 0x34
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4649      	mov	r1, r9
 8002854:	609d      	str	r5, [r3, #8]
 8002856:	4b43      	ldr	r3, [pc, #268]	; (8002964 <OTG_HS_IRQHandler+0x244>)
 8002858:	4840      	ldr	r0, [pc, #256]	; (800295c <OTG_HS_IRQHandler+0x23c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4798      	blx	r3
 800285e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8002862:	42ab      	cmp	r3, r5
 8002864:	d109      	bne.n	800287a <OTG_HS_IRQHandler+0x15a>
 8002866:	f1ba 0f00 	cmp.w	sl, #0
 800286a:	d106      	bne.n	800287a <OTG_HS_IRQHandler+0x15a>
 800286c:	f89b 30e1 	ldrb.w	r3, [fp, #225]	; 0xe1
 8002870:	2b04      	cmp	r3, #4
 8002872:	d102      	bne.n	800287a <OTG_HS_IRQHandler+0x15a>
 8002874:	4839      	ldr	r0, [pc, #228]	; (800295c <OTG_HS_IRQHandler+0x23c>)
 8002876:	f7fe fd0f 	bl	8001298 <USB_OTG_EP0_OutStart>
 800287a:	0728      	lsls	r0, r5, #28
 800287c:	bf42      	ittt	mi
 800287e:	683b      	ldrmi	r3, [r7, #0]
 8002880:	2508      	movmi	r5, #8
 8002882:	609d      	strmi	r5, [r3, #8]
 8002884:	06e9      	lsls	r1, r5, #27
 8002886:	bf42      	ittt	mi
 8002888:	683b      	ldrmi	r3, [r7, #0]
 800288a:	2510      	movmi	r5, #16
 800288c:	609d      	strmi	r5, [r3, #8]
 800288e:	066a      	lsls	r2, r5, #25
 8002890:	bf42      	ittt	mi
 8002892:	683b      	ldrmi	r3, [r7, #0]
 8002894:	2540      	movmi	r5, #64	; 0x40
 8002896:	609d      	strmi	r5, [r3, #8]
 8002898:	07ab      	lsls	r3, r5, #30
 800289a:	bf42      	ittt	mi
 800289c:	683b      	ldrmi	r3, [r7, #0]
 800289e:	2502      	movmi	r5, #2
 80028a0:	609d      	strmi	r5, [r3, #8]
 80028a2:	062d      	lsls	r5, r5, #24
 80028a4:	d553      	bpl.n	800294e <OTG_HS_IRQHandler+0x22e>
 80028a6:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 80028aa:	f8d6 2104 	ldr.w	r2, [r6, #260]	; 0x104
 80028ae:	f109 092a 	add.w	r9, r9, #42	; 0x2a
 80028b2:	1a9a      	subs	r2, r3, r2
 80028b4:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
 80028b8:	eb0b 0989 	add.w	r9, fp, r9, lsl #2
 80028bc:	4293      	cmp	r3, r2
 80028be:	bf28      	it	cs
 80028c0:	4613      	movcs	r3, r2
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	3303      	adds	r3, #3
 80028c6:	6992      	ldr	r2, [r2, #24]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	b292      	uxth	r2, r2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d93b      	bls.n	8002948 <OTG_HS_IRQHandler+0x228>
 80028d0:	f8d6 0104 	ldr.w	r0, [r6, #260]	; 0x104
 80028d4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 80028d8:	4283      	cmp	r3, r0
 80028da:	d935      	bls.n	8002948 <OTG_HS_IRQHandler+0x228>
 80028dc:	b3a3      	cbz	r3, 8002948 <OTG_HS_IRQHandler+0x228>
 80028de:	f8d6 10f4 	ldr.w	r1, [r6, #244]	; 0xf4
 80028e2:	1a18      	subs	r0, r3, r0
 80028e4:	4288      	cmp	r0, r1
 80028e6:	bf28      	it	cs
 80028e8:	4608      	movcs	r0, r1
 80028ea:	78e2      	ldrb	r2, [r4, #3]
 80028ec:	1cc3      	adds	r3, r0, #3
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	b1ba      	cbz	r2, 8002922 <OTG_HS_IRQHandler+0x202>
 80028f2:	f8d6 10f8 	ldr.w	r1, [r6, #248]	; 0xf8
 80028f6:	f8d6 2104 	ldr.w	r2, [r6, #260]	; 0x104
 80028fa:	4401      	add	r1, r0
 80028fc:	f8c6 10f8 	str.w	r1, [r6, #248]	; 0xf8
 8002900:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
 8002904:	4402      	add	r2, r0
 8002906:	428a      	cmp	r2, r1
 8002908:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 800290c:	d319      	bcc.n	8002942 <OTG_HS_IRQHandler+0x222>
 800290e:	6921      	ldr	r1, [r4, #16]
 8002910:	f896 00ec 	ldrb.w	r0, [r6, #236]	; 0xec
 8002914:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8002916:	2301      	movs	r3, #1
 8002918:	4083      	lsls	r3, r0
 800291a:	ea22 0303 	bic.w	r3, r2, r3
 800291e:	634b      	str	r3, [r1, #52]	; 0x34
 8002920:	e012      	b.n	8002948 <OTG_HS_IRQHandler+0x228>
 8002922:	b281      	uxth	r1, r0
 8002924:	3103      	adds	r1, #3
 8002926:	f8d6 50f8 	ldr.w	r5, [r6, #248]	; 0xf8
 800292a:	f8d9 e004 	ldr.w	lr, [r9, #4]
 800292e:	ea4f 0ca1 	mov.w	ip, r1, asr #2
 8002932:	4594      	cmp	ip, r2
 8002934:	d0dd      	beq.n	80028f2 <OTG_HS_IRQHandler+0x1d2>
 8002936:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 800293a:	3201      	adds	r2, #1
 800293c:	f8ce 1000 	str.w	r1, [lr]
 8002940:	e7f7      	b.n	8002932 <OTG_HS_IRQHandler+0x212>
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	6992      	ldr	r2, [r2, #24]
 8002946:	e7c0      	b.n	80028ca <OTG_HS_IRQHandler+0x1aa>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2580      	movs	r5, #128	; 0x80
 800294c:	609d      	str	r5, [r3, #8]
 800294e:	f10a 0a01 	add.w	sl, sl, #1
 8002952:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8002956:	3704      	adds	r7, #4
 8002958:	3628      	adds	r6, #40	; 0x28
 800295a:	e758      	b.n	800280e <OTG_HS_IRQHandler+0xee>
 800295c:	200036ec 	.word	0x200036ec
 8002960:	20003704 	.word	0x20003704
 8002964:	200023d8 	.word	0x200023d8
 8002968:	f89d 7000 	ldrb.w	r7, [sp]
 800296c:	07b8      	lsls	r0, r7, #30
 800296e:	bf42      	ittt	mi
 8002970:	68e3      	ldrmi	r3, [r4, #12]
 8002972:	2202      	movmi	r2, #2
 8002974:	615a      	strmi	r2, [r3, #20]
 8002976:	9b00      	ldr	r3, [sp, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	da18      	bge.n	80029ae <OTG_HS_IRQHandler+0x28e>
 800297c:	7aa3      	ldrb	r3, [r4, #10]
 800297e:	4a91      	ldr	r2, [pc, #580]	; (8002bc4 <OTG_HS_IRQHandler+0x4a4>)
 8002980:	b143      	cbz	r3, 8002994 <OTG_HS_IRQHandler+0x274>
 8002982:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8002986:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800298a:	f36f 0341 	bfc	r3, #1, #1
 800298e:	f36f 0300 	bfc	r3, #0, #1
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	6922      	ldr	r2, [r4, #16]
 8002996:	488b      	ldr	r0, [pc, #556]	; (8002bc4 <OTG_HS_IRQHandler+0x4a4>)
 8002998:	6853      	ldr	r3, [r2, #4]
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6053      	str	r3, [r2, #4]
 80029a0:	4b89      	ldr	r3, [pc, #548]	; (8002bc8 <OTG_HS_IRQHandler+0x4a8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4798      	blx	r3
 80029a6:	68e3      	ldr	r3, [r4, #12]
 80029a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029ac:	615a      	str	r2, [r3, #20]
 80029ae:	9b00      	ldr	r3, [sp, #0]
 80029b0:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80029b4:	0729      	lsls	r1, r5, #28
 80029b6:	d52e      	bpl.n	8002a16 <OTG_HS_IRQHandler+0x2f6>
 80029b8:	2300      	movs	r3, #0
 80029ba:	f88d 300f 	strb.w	r3, [sp, #15]
 80029be:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
 80029c2:	4e80      	ldr	r6, [pc, #512]	; (8002bc4 <OTG_HS_IRQHandler+0x4a4>)
 80029c4:	f88d 300f 	strb.w	r3, [sp, #15]
 80029c8:	4b7f      	ldr	r3, [pc, #508]	; (8002bc8 <OTG_HS_IRQHandler+0x4a8>)
 80029ca:	4630      	mov	r0, r6
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4798      	blx	r3
 80029d0:	68e2      	ldr	r2, [r4, #12]
 80029d2:	6923      	ldr	r3, [r4, #16]
 80029d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	6151      	str	r1, [r2, #20]
 80029dc:	7aa2      	ldrb	r2, [r4, #10]
 80029de:	b1d2      	cbz	r2, 8002a16 <OTG_HS_IRQHandler+0x2f6>
 80029e0:	07da      	lsls	r2, r3, #31
 80029e2:	d518      	bpl.n	8002a16 <OTG_HS_IRQHandler+0x2f6>
 80029e4:	f896 30e5 	ldrb.w	r3, [r6, #229]	; 0xe5
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d114      	bne.n	8002a16 <OTG_HS_IRQHandler+0x2f6>
 80029ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d110      	bne.n	8002a16 <OTG_HS_IRQHandler+0x2f6>
 80029f4:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
 80029f8:	6813      	ldr	r3, [r2, #0]
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	f043 0303 	orr.w	r3, r3, #3
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4a6f      	ldr	r2, [pc, #444]	; (8002bcc <OTG_HS_IRQHandler+0x4ac>)
 8002a0e:	6913      	ldr	r3, [r2, #16]
 8002a10:	f043 0306 	orr.w	r3, r3, #6
 8002a14:	6113      	str	r3, [r2, #16]
 8002a16:	073b      	lsls	r3, r7, #28
 8002a18:	d506      	bpl.n	8002a28 <OTG_HS_IRQHandler+0x308>
 8002a1a:	4b6b      	ldr	r3, [pc, #428]	; (8002bc8 <OTG_HS_IRQHandler+0x4a8>)
 8002a1c:	4869      	ldr	r0, [pc, #420]	; (8002bc4 <OTG_HS_IRQHandler+0x4a4>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4798      	blx	r3
 8002a22:	68e3      	ldr	r3, [r4, #12]
 8002a24:	2208      	movs	r2, #8
 8002a26:	615a      	str	r2, [r3, #20]
 8002a28:	06fe      	lsls	r6, r7, #27
 8002a2a:	d546      	bpl.n	8002aba <OTG_HS_IRQHandler+0x39a>
 8002a2c:	68e3      	ldr	r3, [r4, #12]
 8002a2e:	4965      	ldr	r1, [pc, #404]	; (8002bc4 <OTG_HS_IRQHandler+0x4a4>)
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	f022 0210 	bic.w	r2, r2, #16
 8002a36:	619a      	str	r2, [r3, #24]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f3c3 4043 	ubfx	r0, r3, #17, #4
 8002a3e:	2802      	cmp	r0, #2
 8002a40:	f003 020f 	and.w	r2, r3, #15
 8002a44:	d00f      	beq.n	8002a66 <OTG_HS_IRQHandler+0x346>
 8002a46:	2806      	cmp	r0, #6
 8002a48:	d132      	bne.n	8002ab0 <OTG_HS_IRQHandler+0x390>
 8002a4a:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
 8002a4e:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002a52:	6806      	ldr	r6, [r0, #0]
 8002a54:	f8c1 64ac 	str.w	r6, [r1, #1196]	; 0x4ac
 8002a58:	6800      	ldr	r0, [r0, #0]
 8002a5a:	f8c1 04b0 	str.w	r0, [r1, #1200]	; 0x4b0
 8002a5e:	2028      	movs	r0, #40	; 0x28
 8002a60:	fb00 1202 	mla	r2, r0, r2, r1
 8002a64:	e01f      	b.n	8002aa6 <OTG_HS_IRQHandler+0x386>
 8002a66:	f647 70f0 	movw	r0, #32752	; 0x7ff0
 8002a6a:	4018      	ands	r0, r3
 8002a6c:	b300      	cbz	r0, 8002ab0 <OTG_HS_IRQHandler+0x390>
 8002a6e:	2028      	movs	r0, #40	; 0x28
 8002a70:	fb00 1002 	mla	r0, r0, r2, r1
 8002a74:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002a78:	f8d0 62d8 	ldr.w	r6, [r0, #728]	; 0x2d8
 8002a7c:	1cd8      	adds	r0, r3, #3
 8002a7e:	f8d1 70ac 	ldr.w	r7, [r1, #172]	; 0xac
 8002a82:	1080      	asrs	r0, r0, #2
 8002a84:	2100      	movs	r1, #0
 8002a86:	4288      	cmp	r0, r1
 8002a88:	d005      	beq.n	8002a96 <OTG_HS_IRQHandler+0x376>
 8002a8a:	f8d7 e000 	ldr.w	lr, [r7]
 8002a8e:	f846 e021 	str.w	lr, [r6, r1, lsl #2]
 8002a92:	3101      	adds	r1, #1
 8002a94:	e7f7      	b.n	8002a86 <OTG_HS_IRQHandler+0x366>
 8002a96:	2128      	movs	r1, #40	; 0x28
 8002a98:	fb01 4202 	mla	r2, r1, r2, r4
 8002a9c:	f8d2 12d8 	ldr.w	r1, [r2, #728]	; 0x2d8
 8002aa0:	4419      	add	r1, r3
 8002aa2:	f8c2 12d8 	str.w	r1, [r2, #728]	; 0x2d8
 8002aa6:	f8d2 12e4 	ldr.w	r1, [r2, #740]	; 0x2e4
 8002aaa:	440b      	add	r3, r1
 8002aac:	f8c2 32e4 	str.w	r3, [r2, #740]	; 0x2e4
 8002ab0:	68e2      	ldr	r2, [r4, #12]
 8002ab2:	6993      	ldr	r3, [r2, #24]
 8002ab4:	f043 0310 	orr.w	r3, r3, #16
 8002ab8:	6193      	str	r3, [r2, #24]
 8002aba:	06e8      	lsls	r0, r5, #27
 8002abc:	d535      	bpl.n	8002b2a <OTG_HS_IRQHandler+0x40a>
 8002abe:	6922      	ldr	r2, [r4, #16]
 8002ac0:	2600      	movs	r6, #0
 8002ac2:	6853      	ldr	r3, [r2, #4]
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6053      	str	r3, [r2, #4]
 8002acc:	f000 fd94 	bl	80035f8 <USB_OTG_FlushTxFifo.constprop.86>
 8002ad0:	4633      	mov	r3, r6
 8002ad2:	7867      	ldrb	r7, [r4, #1]
 8002ad4:	4a3e      	ldr	r2, [pc, #248]	; (8002bd0 <OTG_HS_IRQHandler+0x4b0>)
 8002ad6:	21ff      	movs	r1, #255	; 0xff
 8002ad8:	42bb      	cmp	r3, r7
 8002ada:	d206      	bcs.n	8002aea <OTG_HS_IRQHandler+0x3ca>
 8002adc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	6081      	str	r1, [r0, #8]
 8002ae4:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002ae6:	6081      	str	r1, [r0, #8]
 8002ae8:	e7f6      	b.n	8002ad8 <OTG_HS_IRQHandler+0x3b8>
 8002aea:	6923      	ldr	r3, [r4, #16]
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295
 8002af0:	619a      	str	r2, [r3, #24]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f362 060f 	bfi	r6, r2, #0, #16
 8002af8:	f362 461f 	bfi	r6, r2, #16, #16
 8002afc:	220b      	movs	r2, #11
 8002afe:	61de      	str	r6, [r3, #28]
 8002b00:	615a      	str	r2, [r3, #20]
 8002b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	6921      	ldr	r1, [r4, #16]
 8002b0a:	482e      	ldr	r0, [pc, #184]	; (8002bc4 <OTG_HS_IRQHandler+0x4a4>)
 8002b0c:	644a      	str	r2, [r1, #68]	; 0x44
 8002b0e:	680b      	ldr	r3, [r1, #0]
 8002b10:	f36f 130a 	bfc	r3, #4, #7
 8002b14:	600b      	str	r3, [r1, #0]
 8002b16:	f7fe fbbf 	bl	8001298 <USB_OTG_EP0_OutStart>
 8002b1a:	68e3      	ldr	r3, [r4, #12]
 8002b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b20:	615a      	str	r2, [r3, #20]
 8002b22:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <OTG_HS_IRQHandler+0x4a8>)
 8002b24:	4827      	ldr	r0, [pc, #156]	; (8002bc4 <OTG_HS_IRQHandler+0x4a4>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4798      	blx	r3
 8002b2a:	06a9      	lsls	r1, r5, #26
 8002b2c:	d530      	bpl.n	8002b90 <OTG_HS_IRQHandler+0x470>
 8002b2e:	6923      	ldr	r3, [r4, #16]
 8002b30:	69a1      	ldr	r1, [r4, #24]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	680b      	ldr	r3, [r1, #0]
 8002b36:	f3c2 0241 	ubfx	r2, r2, #1, #2
 8002b3a:	2a02      	cmp	r2, #2
 8002b3c:	bf06      	itte	eq
 8002b3e:	2203      	moveq	r2, #3
 8002b40:	f362 030a 	bfieq	r3, r2, #0, #11
 8002b44:	f36f 030a 	bfcne	r3, #0, #11
 8002b48:	600b      	str	r3, [r1, #0]
 8002b4a:	6922      	ldr	r2, [r4, #16]
 8002b4c:	6853      	ldr	r3, [r2, #4]
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6053      	str	r3, [r2, #4]
 8002b54:	68e1      	ldr	r1, [r4, #12]
 8002b56:	6923      	ldr	r3, [r4, #16]
 8002b58:	68ca      	ldr	r2, [r1, #12]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d009      	beq.n	8002b78 <OTG_HS_IRQHandler+0x458>
 8002b64:	d808      	bhi.n	8002b78 <OTG_HS_IRQHandler+0x458>
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d006      	beq.n	8002b78 <OTG_HS_IRQHandler+0x458>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	70a3      	strb	r3, [r4, #2]
 8002b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b72:	80a3      	strh	r3, [r4, #4]
 8002b74:	2309      	movs	r3, #9
 8002b76:	e004      	b.n	8002b82 <OTG_HS_IRQHandler+0x462>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	70a3      	strb	r3, [r4, #2]
 8002b7c:	2340      	movs	r3, #64	; 0x40
 8002b7e:	80a3      	strh	r3, [r4, #4]
 8002b80:	2305      	movs	r3, #5
 8002b82:	f363 228d 	bfi	r2, r3, #10, #4
 8002b86:	60ca      	str	r2, [r1, #12]
 8002b88:	68e3      	ldr	r3, [r4, #12]
 8002b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b8e:	615a      	str	r2, [r3, #20]
 8002b90:	9b00      	ldr	r3, [sp, #0]
 8002b92:	f3c3 4507 	ubfx	r5, r3, #16, #8
 8002b96:	06ea      	lsls	r2, r5, #27
 8002b98:	d507      	bpl.n	8002baa <OTG_HS_IRQHandler+0x48a>
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <OTG_HS_IRQHandler+0x4a8>)
 8002b9c:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <OTG_HS_IRQHandler+0x4a4>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	4798      	blx	r3
 8002ba2:	68e3      	ldr	r3, [r4, #12]
 8002ba4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ba8:	615a      	str	r2, [r3, #20]
 8002baa:	06ab      	lsls	r3, r5, #26
 8002bac:	d507      	bpl.n	8002bbe <OTG_HS_IRQHandler+0x49e>
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <OTG_HS_IRQHandler+0x4a8>)
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <OTG_HS_IRQHandler+0x4a4>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4798      	blx	r3
 8002bb6:	68e3      	ldr	r3, [r4, #12]
 8002bb8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002bbc:	615a      	str	r2, [r3, #20]
    USBD_OTG_ISR_Handler(&USB_OTG_dev);
}
 8002bbe:	b005      	add	sp, #20
 8002bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc4:	200036ec 	.word	0x200036ec
 8002bc8:	200023d8 	.word	0x200023d8
 8002bcc:	e000ed00 	.word	0xe000ed00
 8002bd0:	20003700 	.word	0x20003700

08002bd4 <TIM2_IRQHandler>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;
 8002bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bd8:	8a19      	ldrh	r1, [r3, #16]

  itenable = TIMx->DIER & TIM_IT;
 8002bda:	899a      	ldrh	r2, [r3, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002bdc:	0789      	lsls	r1, r1, #30
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;

  itenable = TIMx->DIER & TIM_IT;
 8002bde:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002be0:	d506      	bpl.n	8002bf0 <TIM2_IRQHandler+0x1c>
 8002be2:	0792      	lsls	r2, r2, #30
 8002be4:	d504      	bpl.n	8002bf0 <TIM2_IRQHandler+0x1c>
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002be6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8002bea:	821a      	strh	r2, [r3, #16]
{
    if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET)
    {
        TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);

        BUTTON_Debounce();
 8002bec:	f000 bb48 	b.w	8003280 <BUTTON_Debounce>
 8002bf0:	4770      	bx	lr
	...

08002bf4 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8002bf4:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bf6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8002bfa:	b672      	cpsid	i
 8002bfc:	491d      	ldr	r1, [pc, #116]	; (8002c74 <SysTick_Handler+0x80>)
 8002bfe:	07db      	lsls	r3, r3, #31
 8002c00:	680a      	ldr	r2, [r1, #0]
 8002c02:	f102 0201 	add.w	r2, r2, #1
 8002c06:	600a      	str	r2, [r1, #0]
 8002c08:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <SysTick_Handler+0x84>)
 8002c0a:	6851      	ldr	r1, [r2, #4]
 8002c0c:	4a1b      	ldr	r2, [pc, #108]	; (8002c7c <SysTick_Handler+0x88>)
 8002c0e:	6011      	str	r1, [r2, #0]
 8002c10:	d400      	bmi.n	8002c14 <SysTick_Handler+0x20>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8002c12:	b662      	cpsie	i
 * Output         : Timing
 * Return         : None
 *******************************************************************************/
void Timing_Decrement(void)
{
    if (TimingBUTTON != 0x00)
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <SysTick_Handler+0x8c>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	b112      	cbz	r2, 8002c20 <SysTick_Handler+0x2c>
    {
        TimingBUTTON--;
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
    }

    if (TimingLED != 0x00)
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <SysTick_Handler+0x90>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	461c      	mov	r4, r3
 8002c26:	b11a      	cbz	r2, 8002c30 <SysTick_Handler+0x3c>
    {
        TimingLED--;
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e016      	b.n	8002c5e <SysTick_Handler+0x6a>
    }
    else if(FACTORY_RESET_MODE || REFLASH_FROM_BACKUP || OTA_FLASH_AVAILABLE)
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <SysTick_Handler+0x94>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	b92b      	cbnz	r3, 8002c42 <SysTick_Handler+0x4e>
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <SysTick_Handler+0x98>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b913      	cbnz	r3, 8002c42 <SysTick_Handler+0x4e>
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <SysTick_Handler+0x9c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b11b      	cbz	r3, 8002c4a <SysTick_Handler+0x56>
 8002c42:	f000 fcab 	bl	800359c <LED_Toggle.part.4.lto_priv.118>
    {
        LED_Toggle(LED_RGB);
        TimingLED = 50;
 8002c46:	2332      	movs	r3, #50	; 0x32
 8002c48:	e008      	b.n	8002c5c <SysTick_Handler+0x68>
    }
    else if(SAFE_MODE || USB_DFU_MODE)
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <SysTick_Handler+0xa0>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b913      	cbnz	r3, 8002c56 <SysTick_Handler+0x62>
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <SysTick_Handler+0xa4>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b11b      	cbz	r3, 8002c5e <SysTick_Handler+0x6a>
 8002c56:	f000 fca1 	bl	800359c <LED_Toggle.part.4.lto_priv.118>
    {
        LED_Toggle(LED_RGB);
        TimingLED = 100;
 8002c5a:	2364      	movs	r3, #100	; 0x64
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <SysTick_Handler+0xa8>)
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	b133      	cbz	r3, 8002c72 <SysTick_Handler+0x7e>
 8002c64:	3b01      	subs	r3, #1
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	b91b      	cbnz	r3, 8002c72 <SysTick_Handler+0x7e>
 8002c6a:	f7ff f9cb 	bl	8002004 <MAL_DeInit>
 8002c6e:	f7fe fd25 	bl	80016bc <Finish_Update>
 8002c72:	bd10      	pop	{r4, pc}
 8002c74:	200035c4 	.word	0x200035c4
 8002c78:	e0001000 	.word	0xe0001000
 8002c7c:	200035d4 	.word	0x200035d4
 8002c80:	200035c8 	.word	0x200035c8
 8002c84:	200035cc 	.word	0x200035cc
 8002c88:	200035d1 	.word	0x200035d1
 8002c8c:	200035c3 	.word	0x200035c3
 8002c90:	200035c2 	.word	0x200035c2
 8002c94:	200035c1 	.word	0x200035c1
 8002c98:	200035d0 	.word	0x200035d0
 8002c9c:	200025a8 	.word	0x200025a8

08002ca0 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8002ca0:	4770      	bx	lr

08002ca2 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8002ca2:	4770      	bx	lr

08002ca4 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002ca4:	4770      	bx	lr

08002ca6 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8002ca6:	e7fe      	b.n	8002ca6 <UsageFault_Handler>

08002ca8 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002ca8:	e7fe      	b.n	8002ca8 <BusFault_Handler>

08002caa <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002caa:	e7fe      	b.n	8002caa <MemManage_Handler>

08002cac <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002cac:	e7fe      	b.n	8002cac <HardFault_Handler>

08002cae <NMI_Handler>:
 * @brief   This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8002cae:	4770      	bx	lr

08002cb0 <is_application_valid>:
 8002cb0:	6802      	ldr	r2, [r0, #0]
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <is_application_valid+0x38>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cba:	bf14      	ite	ne
 8002cbc:	4603      	movne	r3, r0
 8002cbe:	f500 73c2 	addeq.w	r3, r0, #388	; 0x184
 8002cc2:	b15b      	cbz	r3, 8002cdc <is_application_valid+0x2c>
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4282      	cmp	r2, r0
 8002cc8:	d10a      	bne.n	8002ce0 <is_application_valid+0x30>
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	f1b2 6f01 	cmp.w	r2, #135266304	; 0x8100000
 8002cd0:	d806      	bhi.n	8002ce0 <is_application_valid+0x30>
 8002cd2:	899b      	ldrh	r3, [r3, #12]
 8002cd4:	3b06      	subs	r3, #6
 8002cd6:	4258      	negs	r0, r3
 8002cd8:	4158      	adcs	r0, r3
 8002cda:	e002      	b.n	8002ce2 <is_application_valid+0x32>
 8002cdc:	4618      	mov	r0, r3
 8002cde:	e000      	b.n	8002ce2 <is_application_valid+0x32>
 8002ce0:	2000      	movs	r0, #0
#ifdef FLASH_UPDATE_MODULES
    return FLASH_isUserModuleInfoValid(FLASH_INTERNAL, address, address);
#else
    return (((*(__IO uint32_t*)address) & APP_START_MASK) == 0x20000000);
#endif
}
 8002ce2:	b2c0      	uxtb	r0, r0
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	2ff10000 	.word	0x2ff10000

08002cec <led_signal_color.lto_priv.124>:
STATIC_ASSERT(led_theme_version_has_changed, LED_SIGNAL_THEME_VERSION == 1);

#define UNPACK_COLOR_COMPONENT(_value) \
        ((((_value) & 0x0f) << 4) | ((_value) & 0x0f)) /* 0 -> 0, 1 -> 17, 2 -> 34, ..., 15 -> 255 */ \

static uint32_t led_signal_color(int signal, const uint8_t* data) {
 8002cec:	b510      	push	{r4, lr}
    data += signal * 3 + 1; // 3 bytes per signal; first byte is reserved for a version number
 8002cee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002cf2:	3001      	adds	r0, #1
    return ((uint32_t)UNPACK_COLOR_COMPONENT(*data >> 4) << 16) | // R
 8002cf4:	5c0a      	ldrb	r2, [r1, r0]

#define UNPACK_COLOR_COMPONENT(_value) \
        ((((_value) & 0x0f) << 4) | ((_value) & 0x0f)) /* 0 -> 0, 1 -> 17, 2 -> 34, ..., 15 -> 255 */ \

static uint32_t led_signal_color(int signal, const uint8_t* data) {
    data += signal * 3 + 1; // 3 bytes per signal; first byte is reserved for a version number
 8002cf6:	180c      	adds	r4, r1, r0
    return ((uint32_t)UNPACK_COLOR_COMPONENT(*data >> 4) << 16) | // R
 8002cf8:	0913      	lsrs	r3, r2, #4
            ((uint32_t)UNPACK_COLOR_COMPONENT(*data & 0x0f) << 8) | // G
            (uint32_t)UNPACK_COLOR_COMPONENT(*(data + 1) >> 4); // B
 8002cfa:	7860      	ldrb	r0, [r4, #1]
#define UNPACK_COLOR_COMPONENT(_value) \
        ((((_value) & 0x0f) << 4) | ((_value) & 0x0f)) /* 0 -> 0, 1 -> 17, 2 -> 34, ..., 15 -> 255 */ \

static uint32_t led_signal_color(int signal, const uint8_t* data) {
    data += signal * 3 + 1; // 3 bytes per signal; first byte is reserved for a version number
    return ((uint32_t)UNPACK_COLOR_COMPONENT(*data >> 4) << 16) | // R
 8002cfc:	0111      	lsls	r1, r2, #4
 8002cfe:	b2c9      	uxtb	r1, r1
 8002d00:	f002 020f 	and.w	r2, r2, #15
 8002d04:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 8002d08:	430a      	orrs	r2, r1
            ((uint32_t)UNPACK_COLOR_COMPONENT(*data & 0x0f) << 8) | // G
            (uint32_t)UNPACK_COLOR_COMPONENT(*(data + 1) >> 4); // B
 8002d0a:	0900      	lsrs	r0, r0, #4
#define UNPACK_COLOR_COMPONENT(_value) \
        ((((_value) & 0x0f) << 4) | ((_value) & 0x0f)) /* 0 -> 0, 1 -> 17, 2 -> 34, ..., 15 -> 255 */ \

static uint32_t led_signal_color(int signal, const uint8_t* data) {
    data += signal * 3 + 1; // 3 bytes per signal; first byte is reserved for a version number
    return ((uint32_t)UNPACK_COLOR_COMPONENT(*data >> 4) << 16) | // R
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d12:	ea40 1000 	orr.w	r0, r0, r0, lsl #4
            ((uint32_t)UNPACK_COLOR_COMPONENT(*data & 0x0f) << 8) | // G
            (uint32_t)UNPACK_COLOR_COMPONENT(*(data + 1) >> 4); // B
}
 8002d16:	4318      	orrs	r0, r3
 8002d18:	bd10      	pop	{r4, pc}

08002d1a <CallConstructors>:
	}
}

void CallConstructors(void)
{
	call_constructors(&link_constructors_location, &link_constructors_end);
 8002d1a:	f000 bb0f 	b.w	800333c <call_constructors.constprop.92>
	...

08002d20 <OTG_HS_WKUP_IRQHandler>:
 * @brief  This function handles OTG_HS_WKUP Handler.
 * @param  None
 * @retval None
 */
void OTG_HS_WKUP_IRQHandler(void)
{
 8002d20:	b510      	push	{r4, lr}
    if(USB_OTG_dev.cfg.low_power)
 8002d22:	4c0f      	ldr	r4, [pc, #60]	; (8002d60 <OTG_HS_WKUP_IRQHandler+0x40>)
 8002d24:	7aa3      	ldrb	r3, [r4, #10]
 8002d26:	b1ab      	cbz	r3, 8002d54 <OTG_HS_WKUP_IRQHandler+0x34>
    {
        *(uint32_t *)(0xE000ED10) &= 0xFFFFFFF9 ;
 8002d28:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <OTG_HS_WKUP_IRQHandler+0x44>)
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	f023 0306 	bic.w	r3, r3, #6
 8002d30:	6013      	str	r3, [r2, #0]
        SystemInit();
 8002d32:	f7ff f8ef 	bl	8001f14 <SystemInit>
 8002d36:	7aa3      	ldrb	r3, [r4, #10]
 8002d38:	b163      	cbz	r3, 8002d54 <OTG_HS_WKUP_IRQHandler+0x34>
 8002d3a:	6923      	ldr	r3, [r4, #16]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	07db      	lsls	r3, r3, #31
 8002d40:	d508      	bpl.n	8002d54 <OTG_HS_WKUP_IRQHandler+0x34>
 8002d42:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8002d46:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 8002d4a:	f36f 0341 	bfc	r3, #1, #1
 8002d4e:	f36f 0300 	bfc	r3, #0, #1
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <OTG_HS_WKUP_IRQHandler+0x48>)
 8002d56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d5a:	615a      	str	r2, [r3, #20]
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	bf00      	nop
 8002d60:	200036ec 	.word	0x200036ec
 8002d64:	e000ed10 	.word	0xe000ed10
 8002d68:	40013c00 	.word	0x40013c00

08002d6c <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;

  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY)
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <FLASH_GetStatus+0x30>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	03d1      	lsls	r1, r2, #15
 8002d72:	d40d      	bmi.n	8002d90 <FLASH_GetStatus+0x24>
  {
    flashstatus = FLASH_BUSY;
  }
  else
  {
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	06d2      	lsls	r2, r2, #27
 8002d78:	d40c      	bmi.n	8002d94 <FLASH_GetStatus+0x28>
    {
      flashstatus = FLASH_ERROR_WRP;
    }
    else
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	f012 0fef 	tst.w	r2, #239	; 0xef
 8002d80:	d10a      	bne.n	8002d98 <FLASH_GetStatus+0x2c>
      {
        flashstatus = FLASH_ERROR_PROGRAM;
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f013 0f02 	tst.w	r3, #2
        {
          flashstatus = FLASH_ERROR_OPERATION;
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 8002d88:	bf14      	ite	ne
 8002d8a:	2007      	movne	r0, #7
 8002d8c:	2008      	moveq	r0, #8
 8002d8e:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;

  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY)
  {
    flashstatus = FLASH_BUSY;
 8002d90:	2001      	movs	r0, #1
 8002d92:	4770      	bx	lr
  }
  else
  {
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
    {
      flashstatus = FLASH_ERROR_WRP;
 8002d94:	2005      	movs	r0, #5
 8002d96:	4770      	bx	lr
    }
    else
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
      {
        flashstatus = FLASH_ERROR_PROGRAM;
 8002d98:	2006      	movs	r0, #6
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 8002d9a:	4770      	bx	lr
 8002d9c:	40023c00 	.word	0x40023c00

08002da0 <USBD_USR_MsftStrDescriptor.lto_priv.120>:
 * @param  length : pointer to data length variable
 * @retval pointer to descriptor buffer
 */
uint8_t *  USBD_USR_MsftStrDescriptor( uint8_t speed , uint16_t *length)
{
    *length = sizeof(USBD_MsftStrDesc);
 8002da0:	2312      	movs	r3, #18
 8002da2:	800b      	strh	r3, [r1, #0]
    return (uint8_t*)USBD_MsftStrDesc;
}
 8002da4:	4800      	ldr	r0, [pc, #0]	; (8002da8 <USBD_USR_MsftStrDescriptor.lto_priv.120+0x8>)
 8002da6:	4770      	bx	lr
 8002da8:	080038fe 	.word	0x080038fe

08002dac <USBD_USR_LangIDStrDescriptor>:
 * @param  length : pointer to data length variable
 * @retval pointer to descriptor buffer
 */
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
    *length = sizeof(USBD_LangIDDesc);
 8002dac:	2304      	movs	r3, #4
 8002dae:	800b      	strh	r3, [r1, #0]
    return USBD_LangIDDesc;
}
 8002db0:	4800      	ldr	r0, [pc, #0]	; (8002db4 <USBD_USR_LangIDStrDescriptor+0x8>)
 8002db2:	4770      	bx	lr
 8002db4:	20002404 	.word	0x20002404

08002db8 <USBD_USR_DeviceDescriptor>:
 * @param  length : pointer to data length variable
 * @retval pointer to descriptor buffer
 */
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
    *length = sizeof(USBD_DeviceDesc);
 8002db8:	2312      	movs	r3, #18
 8002dba:	800b      	strh	r3, [r1, #0]
    return USBD_DeviceDesc;
}
 8002dbc:	4800      	ldr	r0, [pc, #0]	; (8002dc0 <USBD_USR_DeviceDescriptor+0x8>)
 8002dbe:	4770      	bx	lr
 8002dc0:	20002408 	.word	0x20002408

08002dc4 <init_dct_functions>:
        return NULL;
    }
    return module;
}

static void init_dct_functions() {
 8002dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dct_read_app_data_func = NULL;
 8002dc8:	4e23      	ldr	r6, [pc, #140]	; (8002e58 <init_dct_functions+0x94>)
    dct_write_app_data_func = NULL;
 8002dca:	4f24      	ldr	r7, [pc, #144]	; (8002e5c <init_dct_functions+0x98>)
    }
    return module;
}

static void init_dct_functions() {
    dct_read_app_data_func = NULL;
 8002dcc:	2400      	movs	r4, #0
    dct_write_app_data_func = NULL;
    const module_info_t* part2 = get_module(MODULE_FUNCTION_SYSTEM_PART, 2, MIN_MODULE_VERSION_SYSTEM_PART2);
 8002dce:	21c8      	movs	r1, #200	; 0xc8
 8002dd0:	2002      	movs	r0, #2
    }
    return module;
}

static void init_dct_functions() {
    dct_read_app_data_func = NULL;
 8002dd2:	6034      	str	r4, [r6, #0]
    dct_write_app_data_func = NULL;
 8002dd4:	603c      	str	r4, [r7, #0]
    const module_info_t* part2 = get_module(MODULE_FUNCTION_SYSTEM_PART, 2, MIN_MODULE_VERSION_SYSTEM_PART2);
 8002dd6:	f000 fabf 	bl	8003358 <get_module.constprop.74>
 8002dda:	46b0      	mov	r8, r6
    if (!part2) {
 8002ddc:	4605      	mov	r5, r0
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d037      	beq.n	8002e52 <init_dct_functions+0x8e>
        return;
    }
    // At the time of writing, part2 contained a complete DCT implementation. Same time, it's easy to
    // introduce an additional dependency during development, so we require part1 to be consistent as well
    const module_info_t* part1 = get_module(MODULE_FUNCTION_SYSTEM_PART, 1, part2->dependency.module_version);
 8002de2:	8a41      	ldrh	r1, [r0, #18]
 8002de4:	2001      	movs	r0, #1
 8002de6:	f000 fab7 	bl	8003358 <get_module.constprop.74>
    if (!part1) {
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d031      	beq.n	8002e52 <init_dct_functions+0x8e>
}

const void* get_module_func(const module_info_t* module, size_t dynalib_index, size_t func_index) {
    // Get dynalib table
    void*** module_table = (void***)((const char*)module + sizeof(module_info_t));
    void** dynalib = module_table[dynalib_index];
 8002dee:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    // Get function address
    void* func = dynalib[func_index];
    if (func < module->module_start_address || func >= module->module_end_address) {
 8002df0:	6829      	ldr	r1, [r5, #0]
const void* get_module_func(const module_info_t* module, size_t dynalib_index, size_t func_index) {
    // Get dynalib table
    void*** module_table = (void***)((const char*)module + sizeof(module_info_t));
    void** dynalib = module_table[dynalib_index];
    // Get function address
    void* func = dynalib[func_index];
 8002df2:	6813      	ldr	r3, [r2, #0]
    if (func < module->module_start_address || func >= module->module_end_address) {
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d304      	bcc.n	8002e02 <init_dct_functions+0x3e>
 8002df8:	686c      	ldr	r4, [r5, #4]
        return NULL;
 8002dfa:	42a3      	cmp	r3, r4
 8002dfc:	bf34      	ite	cc
 8002dfe:	461c      	movcc	r4, r3
 8002e00:	2400      	movcs	r4, #0
const void* get_module_func(const module_info_t* module, size_t dynalib_index, size_t func_index) {
    // Get dynalib table
    void*** module_table = (void***)((const char*)module + sizeof(module_info_t));
    void** dynalib = module_table[dynalib_index];
    // Get function address
    void* func = dynalib[func_index];
 8002e02:	6916      	ldr	r6, [r2, #16]
    if (func < module->module_start_address || func >= module->module_end_address) {
 8002e04:	428e      	cmp	r6, r1
 8002e06:	d304      	bcc.n	8002e12 <init_dct_functions+0x4e>
 8002e08:	686b      	ldr	r3, [r5, #4]
        return NULL;
 8002e0a:	429e      	cmp	r6, r3
 8002e0c:	bf28      	it	cs
 8002e0e:	2600      	movcs	r6, #0
 8002e10:	e000      	b.n	8002e14 <init_dct_functions+0x50>
 8002e12:	2600      	movs	r6, #0
const void* get_module_func(const module_info_t* module, size_t dynalib_index, size_t func_index) {
    // Get dynalib table
    void*** module_table = (void***)((const char*)module + sizeof(module_info_t));
    void** dynalib = module_table[dynalib_index];
    // Get function address
    void* func = dynalib[func_index];
 8002e14:	6a03      	ldr	r3, [r0, #32]
 8002e16:	681a      	ldr	r2, [r3, #0]
    if (func < module->module_start_address || func >= module->module_end_address) {
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d304      	bcc.n	8002e28 <init_dct_functions+0x64>
 8002e1e:	6843      	ldr	r3, [r0, #4]
        return NULL;
 8002e20:	429a      	cmp	r2, r3
 8002e22:	bf28      	it	cs
 8002e24:	2200      	movcs	r2, #0
 8002e26:	e000      	b.n	8002e2a <init_dct_functions+0x66>
 8002e28:	2200      	movs	r2, #0
const void* get_module_func(const module_info_t* module, size_t dynalib_index, size_t func_index) {
    // Get dynalib table
    void*** module_table = (void***)((const char*)module + sizeof(module_info_t));
    void** dynalib = module_table[dynalib_index];
    // Get function address
    void* func = dynalib[func_index];
 8002e2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e2c:	681b      	ldr	r3, [r3, #0]
    if (func < module->module_start_address || func >= module->module_end_address) {
 8002e2e:	428b      	cmp	r3, r1
 8002e30:	d305      	bcc.n	8002e3e <init_dct_functions+0x7a>
 8002e32:	686d      	ldr	r5, [r5, #4]
        return NULL;
 8002e34:	42ab      	cmp	r3, r5
 8002e36:	bf34      	ite	cc
 8002e38:	461d      	movcc	r5, r3
 8002e3a:	2500      	movcs	r5, #0
 8002e3c:	e000      	b.n	8002e40 <init_dct_functions+0x7c>
 8002e3e:	2500      	movs	r5, #0
    dct_write_app_data_func_t dct_write = get_module_func(part2, DYNALIB_INDEX_HAL_DCT, FUNC_INDEX_DCT_WRITE_APP_DATA);
    module_pre_init_func_t part1_init = get_module_func(part1, DYNALIB_INDEX_SYSTEM_MODULE_PART1,
            FUNC_INDEX_MODULE_SYSTEM_PART1_PRE_INIT);
    module_pre_init_func_t part2_init = get_module_func(part2, DYNALIB_INDEX_SYSTEM_MODULE_PART2,
            FUNC_INDEX_MODULE_SYSTEM_PART2_PRE_INIT);
    if (!dct_read || !dct_write || !part1_init || !part2_init) {
 8002e40:	b13c      	cbz	r4, 8002e52 <init_dct_functions+0x8e>
 8002e42:	b136      	cbz	r6, 8002e52 <init_dct_functions+0x8e>
 8002e44:	b12a      	cbz	r2, 8002e52 <init_dct_functions+0x8e>
 8002e46:	b125      	cbz	r5, 8002e52 <init_dct_functions+0x8e>
        return;
    }
    // Initialize static data of each module
    part1_init();
 8002e48:	4790      	blx	r2
    part2_init();
 8002e4a:	47a8      	blx	r5
    dct_read_app_data_func = dct_read;
 8002e4c:	f8c8 4000 	str.w	r4, [r8]
    dct_write_app_data_func = dct_write;
 8002e50:	603e      	str	r6, [r7, #0]
 8002e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e56:	bf00      	nop
 8002e58:	200035e0 	.word	0x200035e0
 8002e5c:	200035d8 	.word	0x200035d8

08002e60 <BUTTON_Check_State>:
        /* Enable TIM2 CC1 Interrupt */
        TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
    }
}

void BUTTON_Check_State(uint16_t button, uint8_t pressed) {
 8002e60:	b430      	push	{r4, r5}
    if (HAL_Buttons[button].exti_line && BUTTON_GetState(button) == pressed)
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <BUTTON_Check_State+0x50>)
 8002e64:	0142      	lsls	r2, r0, #5
 8002e66:	189c      	adds	r4, r3, r2
 8002e68:	8a64      	ldrh	r4, [r4, #18]
 8002e6a:	b1ac      	cbz	r4, 8002e98 <BUTTON_Check_State+0x38>
 8002e6c:	b2c4      	uxtb	r4, r0
 8002e6e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8002e72:	6865      	ldr	r5, [r4, #4]
 8002e74:	8924      	ldrh	r4, [r4, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002e76:	692d      	ldr	r5, [r5, #16]
 8002e78:	422c      	tst	r4, r5
 8002e7a:	bf14      	ite	ne
 8002e7c:	2401      	movne	r4, #1
 8002e7e:	2400      	moveq	r4, #0
 8002e80:	428c      	cmp	r4, r1
 8002e82:	d109      	bne.n	8002e98 <BUTTON_Check_State+0x38>
    {
        if (!HAL_Buttons[button].active)
 8002e84:	5c99      	ldrb	r1, [r3, r2]
 8002e86:	b909      	cbnz	r1, 8002e8c <BUTTON_Check_State+0x2c>
            HAL_Buttons[button].active = 1;
 8002e88:	2101      	movs	r1, #1
 8002e8a:	5499      	strb	r1, [r3, r2]
        HAL_Buttons[button].debounce_time += BUTTON_DEBOUNCE_INTERVAL;
 8002e8c:	4413      	add	r3, r2
 8002e8e:	8a1a      	ldrh	r2, [r3, #16]
 8002e90:	320a      	adds	r2, #10
 8002e92:	b292      	uxth	r2, r2
 8002e94:	821a      	strh	r2, [r3, #16]
 8002e96:	e009      	b.n	8002eac <BUTTON_Check_State+0x4c>
    }
    else if (HAL_Buttons[button].active)
 8002e98:	5c9b      	ldrb	r3, [r3, r2]
 8002e9a:	b13b      	cbz	r3, 8002eac <BUTTON_Check_State+0x4c>
    {
        HAL_Buttons[button].active = 0;
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <BUTTON_Check_State+0x50>)
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]
        /* Enable button Interrupt */
        BUTTON_EXTI_Config(button, ENABLE);
 8002ea2:	b2c0      	uxtb	r0, r0
 8002ea4:	2101      	movs	r1, #1
    }
}
 8002ea6:	bc30      	pop	{r4, r5}
    }
    else if (HAL_Buttons[button].active)
    {
        HAL_Buttons[button].active = 0;
        /* Enable button Interrupt */
        BUTTON_EXTI_Config(button, ENABLE);
 8002ea8:	f7fe bc8e 	b.w	80017c8 <BUTTON_EXTI_Config>
    }
}
 8002eac:	bc30      	pop	{r4, r5}
 8002eae:	4770      	bx	lr
 8002eb0:	20002470 	.word	0x20002470

08002eb4 <BUTTON_Check_Irq>:
        BUTTON_Check_Irq(BUTTON1, exti);
        BUTTON_Check_Irq(BUTTON1_MIRROR, exti);
    }
}

void BUTTON_Check_Irq(uint16_t button, uint16_t exti) {
 8002eb4:	b538      	push	{r3, r4, r5, lr}
    if (HAL_Buttons[button].exti_line == exti)
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <BUTTON_Check_Irq+0x2c>)
 8002eb8:	0143      	lsls	r3, r0, #5
 8002eba:	18d4      	adds	r4, r2, r3
 8002ebc:	8a65      	ldrh	r5, [r4, #18]
 8002ebe:	428d      	cmp	r5, r1
 8002ec0:	d10d      	bne.n	8002ede <BUTTON_Check_Irq+0x2a>
    {
        HAL_Buttons[button].debounce_time = 0x00;
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	8221      	strh	r1, [r4, #16]
        HAL_Buttons[button].active = 1;
 8002ec6:	2401      	movs	r4, #1
 8002ec8:	54d4      	strb	r4, [r2, r3]

        /* Disable button Interrupt */
        BUTTON_EXTI_Config(button, DISABLE);
 8002eca:	b2c0      	uxtb	r0, r0
 8002ecc:	f7fe fc7c 	bl	80017c8 <BUTTON_EXTI_Config>
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ed4:	8993      	ldrh	r3, [r2, #12]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	8193      	strh	r3, [r2, #12]
 8002ede:	bd38      	pop	{r3, r4, r5, pc}
 8002ee0:	20002470 	.word	0x20002470

08002ee4 <USBD_USR_ConfigStrDescriptor>:
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
 * @retval pointer to descriptor buffer
 */
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8002ee4:	b508      	push	{r3, lr}
    USBD_GetString (USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8002ee6:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <USBD_USR_ConfigStrDescriptor+0xc>)
 8002ee8:	f000 fabe 	bl	8003468 <USBD_GetString.constprop.14>
    return USBD_StrDesc;
}
 8002eec:	4801      	ldr	r0, [pc, #4]	; (8002ef4 <USBD_USR_ConfigStrDescriptor+0x10>)
 8002eee:	bd08      	pop	{r3, pc}
 8002ef0:	08003910 	.word	0x08003910
 8002ef4:	200035ec 	.word	0x200035ec

08002ef8 <USBD_USR_InterfaceStrDescriptor>:
 8002ef8:	b508      	push	{r3, lr}
 8002efa:	4802      	ldr	r0, [pc, #8]	; (8002f04 <USBD_USR_InterfaceStrDescriptor+0xc>)
 8002efc:	f000 fab4 	bl	8003468 <USBD_GetString.constprop.14>
 8002f00:	4801      	ldr	r0, [pc, #4]	; (8002f08 <USBD_USR_InterfaceStrDescriptor+0x10>)
 8002f02:	bd08      	pop	{r3, pc}
 8002f04:	08003910 	.word	0x08003910
 8002f08:	200035ec 	.word	0x200035ec

08002f0c <USBD_USR_ManufacturerStrDescriptor>:
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
 * @retval pointer to descriptor buffer
 */
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8002f0c:	b508      	push	{r3, lr}
    USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002f0e:	4802      	ldr	r0, [pc, #8]	; (8002f18 <USBD_USR_ManufacturerStrDescriptor+0xc>)
 8002f10:	f000 faaa 	bl	8003468 <USBD_GetString.constprop.14>
    return USBD_StrDesc;
}
 8002f14:	4801      	ldr	r0, [pc, #4]	; (8002f1c <USBD_USR_ManufacturerStrDescriptor+0x10>)
 8002f16:	bd08      	pop	{r3, pc}
 8002f18:	08003914 	.word	0x08003914
 8002f1c:	200035ec 	.word	0x200035ec

08002f20 <USBD_USR_ProductStrDescriptor>:
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
 * @retval pointer to descriptor buffer
 */
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8002f20:	b508      	push	{r3, lr}
    USBD_GetString (USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8002f22:	4802      	ldr	r0, [pc, #8]	; (8002f2c <USBD_USR_ProductStrDescriptor+0xc>)
 8002f24:	f000 faa0 	bl	8003468 <USBD_GetString.constprop.14>
    return USBD_StrDesc;
}
 8002f28:	4801      	ldr	r0, [pc, #4]	; (8002f30 <USBD_USR_ProductStrDescriptor+0x10>)
 8002f2a:	bd08      	pop	{r3, pc}
 8002f2c:	0800391d 	.word	0x0800391d
 8002f30:	200035ec 	.word	0x200035ec

08002f34 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002f36:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002f38:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002f3a:	2603      	movs	r6, #3
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8002f3c:	680a      	ldr	r2, [r1, #0]

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002f3e:	fa07 fc03 	lsl.w	ip, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8002f42:	ea3c 0202 	bics.w	r2, ip, r2
 8002f46:	d133      	bne.n	8002fb0 <GPIO_Init+0x7c>
 8002f48:	005a      	lsls	r2, r3, #1
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002f4a:	fa06 f402 	lsl.w	r4, r6, r2
 8002f4e:	43e4      	mvns	r4, r4
 8002f50:	6805      	ldr	r5, [r0, #0]
 8002f52:	4025      	ands	r5, r4
 8002f54:	6005      	str	r5, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002f56:	f891 e004 	ldrb.w	lr, [r1, #4]
 8002f5a:	6805      	ldr	r5, [r0, #0]
 8002f5c:	fa0e fe02 	lsl.w	lr, lr, r2
 8002f60:	ea4e 0505 	orr.w	r5, lr, r5
 8002f64:	6005      	str	r5, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002f66:	790d      	ldrb	r5, [r1, #4]
 8002f68:	3d01      	subs	r5, #1
 8002f6a:	2d01      	cmp	r5, #1
 8002f6c:	d814      	bhi.n	8002f98 <GPIO_Init+0x64>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002f6e:	6885      	ldr	r5, [r0, #8]
 8002f70:	402c      	ands	r4, r5
 8002f72:	6084      	str	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002f74:	f891 e005 	ldrb.w	lr, [r1, #5]
 8002f78:	6885      	ldr	r5, [r0, #8]
 8002f7a:	fa0e fe02 	lsl.w	lr, lr, r2
 8002f7e:	ea4e 0505 	orr.w	r5, lr, r5
 8002f82:	6085      	str	r5, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002f84:	6844      	ldr	r4, [r0, #4]
 8002f86:	ea24 040c 	bic.w	r4, r4, ip
 8002f8a:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002f8c:	798c      	ldrb	r4, [r1, #6]
 8002f8e:	6845      	ldr	r5, [r0, #4]
 8002f90:	409c      	lsls	r4, r3
 8002f92:	b2a4      	uxth	r4, r4
 8002f94:	432c      	orrs	r4, r5
 8002f96:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002f98:	68c4      	ldr	r4, [r0, #12]
 8002f9a:	fa06 f502 	lsl.w	r5, r6, r2
 8002f9e:	ea24 0405 	bic.w	r4, r4, r5
 8002fa2:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002fa4:	79cd      	ldrb	r5, [r1, #7]
 8002fa6:	68c4      	ldr	r4, [r0, #12]
 8002fa8:	fa05 f202 	lsl.w	r2, r5, r2
 8002fac:	4322      	orrs	r2, r4
 8002fae:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d1c2      	bne.n	8002f3c <GPIO_Init+0x8>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fb8 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002fb8:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8002fba:	2a01      	cmp	r2, #1
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <RCC_GetFlagStatus+0x24>)
 8002fbe:	d101      	bne.n	8002fc4 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	e003      	b.n	8002fcc <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002fc4:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8002fc6:	bf0c      	ite	eq
 8002fc8:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002fca:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8002fcc:	f000 001f 	and.w	r0, r0, #31
 8002fd0:	fa23 f000 	lsr.w	r0, r3, r0
}
 8002fd4:	f000 0001 	and.w	r0, r0, #1
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800

08002fe0 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                          specify the register.
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 8002fe0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <RTC_ReadBackupRegister+0x1c>)
 8002fe8:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 8002fea:	9b01      	ldr	r3, [sp, #4]
 8002fec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002ff0:	9001      	str	r0, [sp, #4]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002ff2:	9b01      	ldr	r3, [sp, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
}
 8002ff6:	b002      	add	sp, #8
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40002850 	.word	0x40002850

08003000 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 8003000:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <RTC_WriteBackupRegister+0x1c>)
 8003008:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 800300a:	9b01      	ldr	r3, [sp, #4]
 800300c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003010:	9001      	str	r0, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003012:	9b01      	ldr	r3, [sp, #4]
 8003014:	6019      	str	r1, [r3, #0]
}
 8003016:	b002      	add	sp, #8
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40002850 	.word	0x40002850

08003020 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{
 8003020:	b507      	push	{r0, r1, r2, lr}
  __IO FLASH_Status status = FLASH_COMPLETE;
 8003022:	2308      	movs	r3, #8
 8003024:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
  {
    status = FLASH_GetStatus();
 8003028:	f7ff fea0 	bl	8002d6c <FLASH_GetStatus>
 800302c:	f88d 0007 	strb.w	r0, [sp, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8003030:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d0f7      	beq.n	8003028 <FLASH_WaitForLastOperation+0x8>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8003038:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800303c:	b003      	add	sp, #12
 800303e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003044 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	4605      	mov	r5, r0
 8003048:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800304a:	f7ff ffe9 	bl	8003020 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800304e:	2808      	cmp	r0, #8
 8003050:	d113      	bne.n	800307a <FLASH_ProgramWord+0x36>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8003052:	4c0a      	ldr	r4, [pc, #40]	; (800307c <FLASH_ProgramWord+0x38>)
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305a:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800305c:	6923      	ldr	r3, [r4, #16]
 800305e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003062:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 8003064:	6923      	ldr	r3, [r4, #16]
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6123      	str	r3, [r4, #16]

    *(__IO uint32_t*)Address = Data;
 800306c:	602e      	str	r6, [r5, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800306e:	f7ff ffd7 	bl	8003020 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003072:	6923      	ldr	r3, [r4, #16]
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6123      	str	r3, [r4, #16]
  }
  /* Return the Program Status */
  return status;
}
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	40023c00 	.word	0x40023c00

08003080 <FLASH_EraseSector>:
  *
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if(VoltageRange == VoltageRange_1)
 8003084:	b141      	cbz	r1, 8003098 <FLASH_EraseSector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 8003086:	2901      	cmp	r1, #1
 8003088:	d008      	beq.n	800309c <FLASH_EraseSector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
 800308a:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800308c:	bf0c      	ite	eq
 800308e:	f44f 7500 	moveq.w	r5, #512	; 0x200
 8003092:	f44f 7540 	movne.w	r5, #768	; 0x300
 8003096:	e003      	b.n	80030a0 <FLASH_EraseSector+0x20>
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003098:	460d      	mov	r5, r1
 800309a:	e001      	b.n	80030a0 <FLASH_EraseSector+0x20>
  }
  else if(VoltageRange == VoltageRange_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800309c:	f44f 7580 	mov.w	r5, #256	; 0x100
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80030a0:	f7ff ffbe 	bl	8003020 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80030a4:	2808      	cmp	r0, #8
 80030a6:	d11e      	bne.n	80030e6 <FLASH_EraseSector+0x66>
  {
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80030a8:	4c0f      	ldr	r4, [pc, #60]	; (80030e8 <FLASH_EraseSector+0x68>)
 80030aa:	6923      	ldr	r3, [r4, #16]
 80030ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b0:	6123      	str	r3, [r4, #16]
    FLASH->CR |= tmp_psize;
 80030b2:	6921      	ldr	r1, [r4, #16]
 80030b4:	4329      	orrs	r1, r5
 80030b6:	6121      	str	r1, [r4, #16]
    FLASH->CR &= SECTOR_MASK;
 80030b8:	6923      	ldr	r3, [r4, #16]
 80030ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80030be:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80030c0:	6923      	ldr	r3, [r4, #16]
 80030c2:	f043 0302 	orr.w	r3, r3, #2
 80030c6:	431e      	orrs	r6, r3
 80030c8:	6126      	str	r6, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80030ca:	6923      	ldr	r3, [r4, #16]
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d0:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80030d2:	f7ff ffa5 	bl	8003020 <FLASH_WaitForLastOperation>

    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80030d6:	6923      	ldr	r3, [r4, #16]
 80030d8:	f023 0302 	bic.w	r3, r3, #2
 80030dc:	6123      	str	r3, [r4, #16]
    FLASH->CR &= SECTOR_MASK;
 80030de:	6923      	ldr	r3, [r4, #16]
 80030e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80030e4:	6123      	str	r3, [r4, #16]
  }
  /* Return the Erase Status */
  return status;
}
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
 80030e8:	40023c00 	.word	0x40023c00

080030ec <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80030ec:	4a02      	ldr	r2, [pc, #8]	; (80030f8 <FLASH_Lock+0xc>)
 80030ee:	6913      	ldr	r3, [r2, #16]
 80030f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030f4:	6113      	str	r3, [r2, #16]
 80030f6:	4770      	bx	lr
 80030f8:	40023c00 	.word	0x40023c00

080030fc <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <FLASH_Unlock+0x14>)
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	2a00      	cmp	r2, #0
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8003102:	bfbf      	itttt	lt
 8003104:	4a03      	ldrlt	r2, [pc, #12]	; (8003114 <FLASH_Unlock+0x18>)
 8003106:	605a      	strlt	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8003108:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 800310c:	605a      	strlt	r2, [r3, #4]
 800310e:	4770      	bx	lr
 8003110:	40023c00 	.word	0x40023c00
 8003114:	45670123 	.word	0x45670123

08003118 <memset>:
  }
  return 0;
}

void* memset(void* s, int c, size_t n) {
    uint8_t* p = s;
 8003118:	4603      	mov	r3, r0
    uint8_t v = c & 0xff;
 800311a:	b2c9      	uxtb	r1, r1
 800311c:	4402      	add	r2, r0
    while (n--) {
 800311e:	4293      	cmp	r3, r2
 8003120:	d002      	beq.n	8003128 <memset+0x10>
        *p++ = v;
 8003122:	f803 1b01 	strb.w	r1, [r3], #1
 8003126:	e7fa      	b.n	800311e <memset+0x6>
    }
    return s;
}
 8003128:	4770      	bx	lr

0800312a <memcpy>:
   return 0;
}

// Naive memXXX functions

void* memcpy(void *dest, const void *src, size_t n) {
 800312a:	b510      	push	{r4, lr}
 800312c:	1e43      	subs	r3, r0, #1
 800312e:	440a      	add	r2, r1
    const uint8_t* p = src;
    uint8_t* q = dest;
    while (n--) {
 8003130:	4291      	cmp	r1, r2
 8003132:	d004      	beq.n	800313e <memcpy+0x14>
        *q++ = *p++;
 8003134:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003138:	f803 4f01 	strb.w	r4, [r3, #1]!
 800313c:	e7f8      	b.n	8003130 <memcpy+0x6>
    }
    return dest;
}
 800313e:	bd10      	pop	{r4, pc}

08003140 <USBD_USR_SerialStrDescriptor>:
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
 * @retval pointer to descriptor buffer
 */
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	b08e      	sub	sp, #56	; 0x38
    uint8_t deviceId[16];
    char deviceIdHex[sizeof(deviceId) * 2 + 1] = {0};
 8003144:	ac05      	add	r4, sp, #20
 8003146:	2221      	movs	r2, #33	; 0x21
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
 * @retval pointer to descriptor buffer
 */
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8003148:	460e      	mov	r6, r1
    uint8_t deviceId[16];
    char deviceIdHex[sizeof(deviceId) * 2 + 1] = {0};
 800314a:	4620      	mov	r0, r4
 800314c:	2100      	movs	r1, #0
const unsigned device_id_len = 12;

unsigned HAL_device_ID(uint8_t* dest, unsigned destLen)
{
    if (dest!=NULL && destLen!=0)
        memcpy(dest, (char*)ID1, MIN(destLen, device_id_len));
 800314e:	ad01      	add	r5, sp, #4
 8003150:	f7ff ffe2 	bl	8003118 <memset>
 8003154:	220c      	movs	r2, #12
 8003156:	4912      	ldr	r1, [pc, #72]	; (80031a0 <USBD_USR_SerialStrDescriptor+0x60>)
 8003158:	4628      	mov	r0, r5
 800315a:	f7ff ffe6 	bl	800312a <memcpy>

static inline char* bytes2hexbuf_lower_case(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
 800315e:	2300      	movs	r3, #0
    {
        out = concat_nibble_lower_case(out, (buf[i] >> 4));
 8003160:	5cea      	ldrb	r2, [r5, r3]
 8003162:	0910      	lsrs	r0, r2, #4
    }
    return hex_digit;
}

static inline char ascii_nibble_lower_case(uint8_t nibble) {
    char hex_digit = nibble + 48;
 8003164:	f100 0130 	add.w	r1, r0, #48	; 0x30
    if (57 < hex_digit) {
 8003168:	2939      	cmp	r1, #57	; 0x39
        hex_digit += 39;
 800316a:	bf88      	it	hi
 800316c:	f100 0157 	addhi.w	r1, r0, #87	; 0x57
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble_lower_case(out, (buf[i] >> 4));
        out = concat_nibble_lower_case(out, (buf[i] & 0xF));
 8003170:	f002 020f 	and.w	r2, r2, #15
    return p;
}

static inline char* concat_nibble_lower_case(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble_lower_case(nibble);
 8003174:	f804 1013 	strb.w	r1, [r4, r3, lsl #1]
    }
    return hex_digit;
}

static inline char ascii_nibble_lower_case(uint8_t nibble) {
    char hex_digit = nibble + 48;
 8003178:	f102 0130 	add.w	r1, r2, #48	; 0x30
    if (57 < hex_digit) {
 800317c:	2939      	cmp	r1, #57	; 0x39
        hex_digit += 39;
 800317e:	bf88      	it	hi
 8003180:	f102 0157 	addhi.w	r1, r2, #87	; 0x57
    return p;
}

static inline char* concat_nibble_lower_case(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble_lower_case(nibble);
 8003184:	eb04 0243 	add.w	r2, r4, r3, lsl #1

static inline char* bytes2hexbuf_lower_case(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
 8003188:	3301      	adds	r3, #1
 800318a:	2b0c      	cmp	r3, #12
    return p;
}

static inline char* concat_nibble_lower_case(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble_lower_case(nibble);
 800318c:	7051      	strb	r1, [r2, #1]

static inline char* bytes2hexbuf_lower_case(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
 800318e:	d1e7      	bne.n	8003160 <USBD_USR_SerialStrDescriptor+0x20>
    unsigned deviceIdLen = 0;
    deviceIdLen = HAL_device_ID(deviceId, sizeof(deviceId));
    bytes2hexbuf_lower_case(deviceId, deviceIdLen, deviceIdHex);
    USBD_GetString (deviceIdHex, USBD_StrDesc, length);
 8003190:	4620      	mov	r0, r4
 8003192:	4631      	mov	r1, r6
 8003194:	f000 f968 	bl	8003468 <USBD_GetString.constprop.14>
    return USBD_StrDesc;
}
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <USBD_USR_SerialStrDescriptor+0x64>)
 800319a:	b00e      	add	sp, #56	; 0x38
 800319c:	bd70      	pop	{r4, r5, r6, pc}
 800319e:	bf00      	nop
 80031a0:	1fff7a10 	.word	0x1fff7a10
 80031a4:	200035ec 	.word	0x200035ec

080031a8 <dct_write_app_data>:
        return dct_read_app_data_func(offset);
    }
    return NULL;
}

int dct_write_app_data(const void* data, uint32_t offset, uint32_t size) {
 80031a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!dct_funcs_inited) {
 80031ac:	4c0b      	ldr	r4, [pc, #44]	; (80031dc <dct_write_app_data+0x34>)
        return dct_read_app_data_func(offset);
    }
    return NULL;
}

int dct_write_app_data(const void* data, uint32_t offset, uint32_t size) {
 80031ae:	4605      	mov	r5, r0
    if (!dct_funcs_inited) {
 80031b0:	7823      	ldrb	r3, [r4, #0]
        return dct_read_app_data_func(offset);
    }
    return NULL;
}

int dct_write_app_data(const void* data, uint32_t offset, uint32_t size) {
 80031b2:	460e      	mov	r6, r1
 80031b4:	4617      	mov	r7, r2
    if (!dct_funcs_inited) {
 80031b6:	b91b      	cbnz	r3, 80031c0 <dct_write_app_data+0x18>
        init_dct_functions();
 80031b8:	f7ff fe04 	bl	8002dc4 <init_dct_functions>
        dct_funcs_inited = 1;
 80031bc:	2301      	movs	r3, #1
 80031be:	7023      	strb	r3, [r4, #0]
    }
    if (dct_write_app_data_func) {
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <dct_write_app_data+0x38>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b12b      	cbz	r3, 80031d2 <dct_write_app_data+0x2a>
        return dct_write_app_data_func(data, offset, size);
 80031c6:	463a      	mov	r2, r7
 80031c8:	4631      	mov	r1, r6
 80031ca:	4628      	mov	r0, r5
    }
    return -1;
}
 80031cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!dct_funcs_inited) {
        init_dct_functions();
        dct_funcs_inited = 1;
    }
    if (dct_write_app_data_func) {
        return dct_write_app_data_func(data, offset, size);
 80031d0:	4718      	bx	r3
    }
    return -1;
}
 80031d2:	f04f 30ff 	mov.w	r0, #4294967295
 80031d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031da:	bf00      	nop
 80031dc:	200035dc 	.word	0x200035dc
 80031e0:	200035d8 	.word	0x200035d8

080031e4 <dct_read_app_data>:

void load_dct_functions() {
    dct_funcs_inited = 0;
}

const void* dct_read_app_data(uint32_t offset) {
 80031e4:	b570      	push	{r4, r5, r6, lr}
    if (!dct_funcs_inited) {
 80031e6:	4c08      	ldr	r4, [pc, #32]	; (8003208 <dct_read_app_data+0x24>)

void load_dct_functions() {
    dct_funcs_inited = 0;
}

const void* dct_read_app_data(uint32_t offset) {
 80031e8:	4605      	mov	r5, r0
    if (!dct_funcs_inited) {
 80031ea:	7823      	ldrb	r3, [r4, #0]
 80031ec:	b91b      	cbnz	r3, 80031f6 <dct_read_app_data+0x12>
        init_dct_functions();
 80031ee:	f7ff fde9 	bl	8002dc4 <init_dct_functions>
        dct_funcs_inited = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	7023      	strb	r3, [r4, #0]
    }
    if (dct_read_app_data_func) {
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <dct_read_app_data+0x28>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b11b      	cbz	r3, 8003204 <dct_read_app_data+0x20>
        return dct_read_app_data_func(offset);
 80031fc:	4628      	mov	r0, r5
    }
    return NULL;
}
 80031fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (!dct_funcs_inited) {
        init_dct_functions();
        dct_funcs_inited = 1;
    }
    if (dct_read_app_data_func) {
        return dct_read_app_data_func(offset);
 8003202:	4718      	bx	r3
    }
    return NULL;
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	200035dc 	.word	0x200035dc
 800320c:	200035e0 	.word	0x200035e0

08003210 <dct_read_app_data_copy>:
        return dct_write_app_data_func(data, offset, size);
    }
    return -1;
}

int dct_read_app_data_copy(uint32_t offset, void* ptr, size_t size) {
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	460c      	mov	r4, r1
 8003214:	4615      	mov	r5, r2
    const void* data = dct_read_app_data(offset);
 8003216:	f7ff ffe5 	bl	80031e4 <dct_read_app_data>
    if (!data) {
 800321a:	4601      	mov	r1, r0
 800321c:	b128      	cbz	r0, 800322a <dct_read_app_data_copy+0x1a>
        return -1;
    }
    memcpy(ptr, data, size);
 800321e:	462a      	mov	r2, r5
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff ff82 	bl	800312a <memcpy>
    return 0;
 8003226:	2000      	movs	r0, #0
 8003228:	bd38      	pop	{r3, r4, r5, pc}
}

int dct_read_app_data_copy(uint32_t offset, void* ptr, size_t size) {
    const void* data = dct_read_app_data(offset);
    if (!data) {
        return -1;
 800322a:	f04f 30ff 	mov.w	r0, #4294967295
    }
    memcpy(ptr, data, size);
    return 0;
}
 800322e:	bd38      	pop	{r3, r4, r5, pc}

08003230 <BUTTON_Pressed_Time>:
    }

    return pressed;
}

uint16_t BUTTON_Pressed_Time(Button_TypeDef button) {
 8003230:	b538      	push	{r3, r4, r5, lr}
 8003232:	4603      	mov	r3, r0
    uint16_t pressed = 0;

    pressed = HAL_Buttons[button].debounce_time;
 8003234:	4d08      	ldr	r5, [pc, #32]	; (8003258 <BUTTON_Pressed_Time+0x28>)
 8003236:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800323a:	8a14      	ldrh	r4, [r2, #16]
 800323c:	b2a4      	uxth	r4, r4
    if (button == BUTTON1 && HAL_Buttons[BUTTON1_MIRROR].exti_line) {
 800323e:	b943      	cbnz	r3, 8003252 <BUTTON_Pressed_Time+0x22>
 8003240:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8003242:	b133      	cbz	r3, 8003252 <BUTTON_Pressed_Time+0x22>
        if (BUTTON_Pressed_Time(BUTTON1_MIRROR) > pressed)
 8003244:	2001      	movs	r0, #1
 8003246:	f7ff fff3 	bl	8003230 <BUTTON_Pressed_Time>
 800324a:	4284      	cmp	r4, r0
            pressed = BUTTON_Pressed_Time(BUTTON1_MIRROR);
 800324c:	f04f 0301 	mov.w	r3, #1
uint16_t BUTTON_Pressed_Time(Button_TypeDef button) {
    uint16_t pressed = 0;

    pressed = HAL_Buttons[button].debounce_time;
    if (button == BUTTON1 && HAL_Buttons[BUTTON1_MIRROR].exti_line) {
        if (BUTTON_Pressed_Time(BUTTON1_MIRROR) > pressed)
 8003250:	d3f1      	bcc.n	8003236 <BUTTON_Pressed_Time+0x6>
            pressed = BUTTON_Pressed_Time(BUTTON1_MIRROR);
    }

    return pressed;
}
 8003252:	4620      	mov	r0, r4
 8003254:	bd38      	pop	{r3, r4, r5, pc}
 8003256:	bf00      	nop
 8003258:	20002470 	.word	0x20002470

0800325c <BUTTON_Is_Pressed>:

    if (BUTTON_Debounce())
        TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
}

uint8_t BUTTON_Is_Pressed(Button_TypeDef button) {
 800325c:	b510      	push	{r4, lr}
    uint8_t pressed = 0;
    pressed = HAL_Buttons[button].active;
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <BUTTON_Is_Pressed+0x20>)
 8003260:	0142      	lsls	r2, r0, #5
 8003262:	5c9c      	ldrb	r4, [r3, r2]
 8003264:	b2e4      	uxtb	r4, r4

    if (button == BUTTON1 && HAL_Buttons[BUTTON1_MIRROR].exti_line) {
 8003266:	b930      	cbnz	r0, 8003276 <BUTTON_Is_Pressed+0x1a>
 8003268:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800326a:	b123      	cbz	r3, 8003276 <BUTTON_Is_Pressed+0x1a>
        pressed |= BUTTON_Is_Pressed(BUTTON1_MIRROR);
 800326c:	2001      	movs	r0, #1
 800326e:	f7ff fff5 	bl	800325c <BUTTON_Is_Pressed>
 8003272:	4320      	orrs	r0, r4
 8003274:	b2c4      	uxtb	r4, r0
    }

    return pressed;
}
 8003276:	4620      	mov	r0, r4
 8003278:	bd10      	pop	{r4, pc}
 800327a:	bf00      	nop
 800327c:	20002470 	.word	0x20002470

08003280 <BUTTON_Debounce>:
        /* Enable button Interrupt */
        BUTTON_EXTI_Config(button, ENABLE);
    }
}

int BUTTON_Debounce() {
 8003280:	b510      	push	{r4, lr}
    BUTTON_Check_State(BUTTON1, BUTTON1_PRESSED);
 8003282:	2100      	movs	r1, #0
    BUTTON_Check_State(BUTTON1_MIRROR, HAL_Buttons[BUTTON1_MIRROR].exti_trigger == EXTI_Trigger_Rising ? 1 : 0);
 8003284:	4c0d      	ldr	r4, [pc, #52]	; (80032bc <BUTTON_Debounce+0x3c>)
        BUTTON_EXTI_Config(button, ENABLE);
    }
}

int BUTTON_Debounce() {
    BUTTON_Check_State(BUTTON1, BUTTON1_PRESSED);
 8003286:	4608      	mov	r0, r1
 8003288:	f7ff fdea 	bl	8002e60 <BUTTON_Check_State>
    BUTTON_Check_State(BUTTON1_MIRROR, HAL_Buttons[BUTTON1_MIRROR].exti_trigger == EXTI_Trigger_Rising ? 1 : 0);
 800328c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003290:	2001      	movs	r0, #1
 8003292:	f1a1 0308 	sub.w	r3, r1, #8
 8003296:	4259      	negs	r1, r3
 8003298:	4159      	adcs	r1, r3
 800329a:	f7ff fde1 	bl	8002e60 <BUTTON_Check_State>

    int pressed = HAL_Buttons[BUTTON1].active + HAL_Buttons[BUTTON1_MIRROR].active;
 800329e:	7823      	ldrb	r3, [r4, #0]
 80032a0:	f894 0020 	ldrb.w	r0, [r4, #32]
    if (pressed == 0) {
 80032a4:	1818      	adds	r0, r3, r0
 80032a6:	d107      	bne.n	80032b8 <BUTTON_Debounce+0x38>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80032a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032ac:	8993      	ldrh	r3, [r2, #12]
 80032ae:	f023 0302 	bic.w	r3, r3, #2
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	8193      	strh	r3, [r2, #12]
        /* Disable TIM2 CC1 Interrupt */
        TIM_ITConfig(TIM2, TIM_IT_CC1, DISABLE);
    }

    return pressed;
}
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	bf00      	nop
 80032bc:	20002470 	.word	0x20002470

080032c0 <BUTTON_Irq_Handler>:
 * @brief  This function handles BUTTON EXTI Handler.
 * @param  None
 * @retval None
 */
void BUTTON_Irq_Handler(uint16_t exti)
{
 80032c0:	b510      	push	{r4, lr}
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <BUTTON_Irq_Handler+0x2c>)
 80032c4:	4604      	mov	r4, r0
 80032c6:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80032c8:	6959      	ldr	r1, [r3, #20]
 80032ca:	4208      	tst	r0, r1
 80032cc:	d00c      	beq.n	80032e8 <BUTTON_Irq_Handler+0x28>
 80032ce:	4210      	tst	r0, r2
 80032d0:	d00a      	beq.n	80032e8 <BUTTON_Irq_Handler+0x28>
    if (EXTI_GetITStatus(exti) != RESET)
    {
        /* Clear the EXTI line pending bit */
        EXTI_ClearITPendingBit(exti);

        BUTTON_Check_Irq(BUTTON1, exti);
 80032d2:	4601      	mov	r1, r0
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 80032d4:	6158      	str	r0, [r3, #20]
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7ff fdec 	bl	8002eb4 <BUTTON_Check_Irq>
        BUTTON_Check_Irq(BUTTON1_MIRROR, exti);
 80032dc:	4621      	mov	r1, r4
    }
}
 80032de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
        /* Clear the EXTI line pending bit */
        EXTI_ClearITPendingBit(exti);

        BUTTON_Check_Irq(BUTTON1, exti);
        BUTTON_Check_Irq(BUTTON1_MIRROR, exti);
 80032e2:	2001      	movs	r0, #1
 80032e4:	f7ff bde6 	b.w	8002eb4 <BUTTON_Check_Irq>
 80032e8:	bd10      	pop	{r4, pc}
 80032ea:	bf00      	nop
 80032ec:	40013c00 	.word	0x40013c00

080032f0 <get_module_info>:
    }
    return NULL;
}

const module_info_t* get_module_info(const module_bounds_t* bounds) {
    const module_info_t* module = FLASH_ModuleInfo(FLASH_INTERNAL, bounds->start_address);
 80032f0:	6843      	ldr	r3, [r0, #4]
 80032f2:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <get_module_info+0x30>)
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	400a      	ands	r2, r1
 80032f8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80032fc:	bf08      	it	eq
 80032fe:	f503 73c2 	addeq.w	r3, r3, #388	; 0x184
    // Check primary module info
    if (!module || module->platform_id != PLATFORM_ID || module->module_function != bounds->module_function ||
 8003302:	b14b      	cbz	r3, 8003318 <get_module_info+0x28>
 8003304:	899a      	ldrh	r2, [r3, #12]
 8003306:	2a06      	cmp	r2, #6
 8003308:	d108      	bne.n	800331c <get_module_info+0x2c>
 800330a:	89d9      	ldrh	r1, [r3, #14]
 800330c:	8982      	ldrh	r2, [r0, #12]
 800330e:	4291      	cmp	r1, r2
 8003310:	bf0c      	ite	eq
 8003312:	4618      	moveq	r0, r3
 8003314:	2000      	movne	r0, #0
 8003316:	4770      	bx	lr
            module->module_index != bounds->module_index) {
        return NULL;
 8003318:	4618      	mov	r0, r3
 800331a:	4770      	bx	lr
 800331c:	2000      	movs	r0, #0
    }
    return module;
}
 800331e:	4770      	bx	lr
 8003320:	2ff10000 	.word	0x2ff10000

08003324 <ccr_scale>:
 8003324:	b510      	push	{r4, lr}
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <ccr_scale+0x14>)
 8003328:	781c      	ldrb	r4, [r3, #0]
 800332a:	4344      	muls	r4, r0
 800332c:	2000      	movs	r0, #0
 800332e:	f7fe f8a3 	bl	8001478 <Get_RGB_LED_Max_Value>
 8003332:	4360      	muls	r0, r4
 8003334:	0c00      	lsrs	r0, r0, #16
 8003336:	bd10      	pop	{r4, pc}
 8003338:	20002444 	.word	0x20002444

0800333c <call_constructors.constprop.92>:
extern unsigned long link_constructors_location;
extern unsigned long link_constructors_end;

static void call_constructors(unsigned long *start, unsigned long *end) __attribute__((noinline));

static void call_constructors(unsigned long *start, unsigned long *end)
 800333c:	b538      	push	{r3, r4, r5, lr}
{
	unsigned long *i;
	void (*funcptr)();
	for (i = start; i < end; i++)
 800333e:	4c04      	ldr	r4, [pc, #16]	; (8003350 <call_constructors.constprop.92+0x14>)
 8003340:	4d04      	ldr	r5, [pc, #16]	; (8003354 <call_constructors.constprop.92+0x18>)
 8003342:	42ac      	cmp	r4, r5
 8003344:	d203      	bcs.n	800334e <call_constructors.constprop.92+0x12>
	{
		funcptr=(void (*)())(*i);
		funcptr();
 8003346:	f854 3b04 	ldr.w	r3, [r4], #4
 800334a:	4798      	blx	r3
 800334c:	e7f9      	b.n	8003342 <call_constructors.constprop.92+0x6>
	}
}
 800334e:	bd38      	pop	{r3, r4, r5, pc}
 8003350:	0800399c 	.word	0x0800399c
 8003354:	080039a0 	.word	0x080039a0

08003358 <get_module.constprop.74>:

static dct_read_app_data_func_t dct_read_app_data_func = NULL;
static dct_write_app_data_func_t dct_write_app_data_func = NULL;
static uint8_t dct_funcs_inited = 0;

static const module_info_t* get_module(uint8_t module_func, uint8_t module_index, uint16_t min_version) {
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	460e      	mov	r6, r1
#define MODULAR_FIRMWARE 1
#include "ota_module_bounds.c"

const module_bounds_t* get_module_bounds(uint8_t module_func, uint8_t module_index) {
    for (size_t i = 0; i < module_bounds_length; ++i) {
        const module_bounds_t* bounds = module_bounds[i];
 800335c:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <get_module.constprop.74+0x5c>)

#define MODULAR_FIRMWARE 1
#include "ota_module_bounds.c"

const module_bounds_t* get_module_bounds(uint8_t module_func, uint8_t module_index) {
    for (size_t i = 0; i < module_bounds_length; ++i) {
 800335e:	2300      	movs	r3, #0
        const module_bounds_t* bounds = module_bounds[i];
 8003360:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
        if (bounds->module_function == module_func && bounds->module_index == module_index) {
 8003364:	7b29      	ldrb	r1, [r5, #12]
 8003366:	2904      	cmp	r1, #4
 8003368:	d102      	bne.n	8003370 <get_module.constprop.74+0x18>
 800336a:	7b69      	ldrb	r1, [r5, #13]
 800336c:	4281      	cmp	r1, r0
 800336e:	d003      	beq.n	8003378 <get_module.constprop.74+0x20>

#define MODULAR_FIRMWARE 1
#include "ota_module_bounds.c"

const module_bounds_t* get_module_bounds(uint8_t module_func, uint8_t module_index) {
    for (size_t i = 0; i < module_bounds_length; ++i) {
 8003370:	3301      	adds	r3, #1
 8003372:	2b05      	cmp	r3, #5
 8003374:	d1f4      	bne.n	8003360 <get_module.constprop.74+0x8>
 8003376:	e01b      	b.n	80033b0 <get_module.constprop.74+0x58>
    const module_bounds_t* bounds = get_module_bounds(module_func, module_index);
    if (!bounds) {
        return NULL;
    }
    const module_info_t* module = get_module_info(bounds);
 8003378:	4628      	mov	r0, r5
 800337a:	f7ff ffb9 	bl	80032f0 <get_module_info>
    if (!module || module->module_version < min_version) {
 800337e:	4604      	mov	r4, r0
 8003380:	b1b0      	cbz	r0, 80033b0 <get_module.constprop.74+0x58>
 8003382:	8963      	ldrh	r3, [r4, #10]
 8003384:	42b3      	cmp	r3, r6
 8003386:	d313      	bcc.n	80033b0 <get_module.constprop.74+0x58>
}

int verify_module(const module_info_t* module, const module_bounds_t* bounds) {
    // Check module boundaries
    const uintptr_t startAddr = (uintptr_t)module->module_start_address;
    const uintptr_t endAddr = (uintptr_t)module->module_end_address;
 8003388:	e894 0009 	ldmia.w	r4, {r0, r3}
    if (endAddr < startAddr || startAddr != bounds->start_address || endAddr > bounds->end_address) {
 800338c:	4298      	cmp	r0, r3
 800338e:	d80f      	bhi.n	80033b0 <get_module.constprop.74+0x58>
 8003390:	686a      	ldr	r2, [r5, #4]
 8003392:	4290      	cmp	r0, r2
 8003394:	d10c      	bne.n	80033b0 <get_module.constprop.74+0x58>
 8003396:	68aa      	ldr	r2, [r5, #8]
 8003398:	4293      	cmp	r3, r2
 800339a:	d809      	bhi.n	80033b0 <get_module.constprop.74+0x58>
 800339c:	1a19      	subs	r1, r3, r0
 800339e:	d007      	beq.n	80033b0 <get_module.constprop.74+0x58>
 80033a0:	681d      	ldr	r5, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	ba2d      	rev	r5, r5
 80033a4:	f7fe f8d8 	bl	8001558 <Compute_CRC32>
 80033a8:	4285      	cmp	r5, r0
 80033aa:	d101      	bne.n	80033b0 <get_module.constprop.74+0x58>
 80033ac:	4620      	mov	r0, r4
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    }
    if (verify_module(module, bounds) != 0) {
        return NULL;
 80033b0:	2000      	movs	r0, #0
    }
    return module;
}
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	08003978 	.word	0x08003978

080033b8 <BUTTON_Init.constprop.55>:
 80033b8:	b530      	push	{r4, r5, lr}
 80033ba:	4605      	mov	r5, r0
 80033bc:	4c27      	ldr	r4, [pc, #156]	; (800345c <BUTTON_Init.constprop.55+0xa4>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80033be:	4a28      	ldr	r2, [pc, #160]	; (8003460 <BUTTON_Init.constprop.55+0xa8>)
 80033c0:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 80033c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80033c6:	8961      	ldrh	r1, [r4, #10]
 80033c8:	b085      	sub	sp, #20
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	8923      	ldrh	r3, [r4, #8]
 80033d0:	6860      	ldr	r0, [r4, #4]
 80033d2:	9302      	str	r3, [sp, #8]
 80033d4:	7b23      	ldrb	r3, [r4, #12]
 80033d6:	a902      	add	r1, sp, #8
 80033d8:	f88d 300c 	strb.w	r3, [sp, #12]
 80033dc:	7ba3      	ldrb	r3, [r4, #14]
 80033de:	f88d 300f 	strb.w	r3, [sp, #15]
 80033e2:	f7ff fda7 	bl	8002f34 <GPIO_Init>
 80033e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033ea:	8993      	ldrh	r3, [r2, #12]
 80033ec:	4628      	mov	r0, r5
 80033ee:	f023 0302 	bic.w	r3, r3, #2
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	8193      	strh	r3, [r2, #12]
 80033f8:	8b23      	ldrh	r3, [r4, #24]
 80033fa:	f88d 3004 	strb.w	r3, [sp, #4]
 80033fe:	8b63      	ldrh	r3, [r4, #26]
 8003400:	2401      	movs	r4, #1
 8003402:	f88d 3005 	strb.w	r3, [sp, #5]
 8003406:	4621      	mov	r1, r4
 8003408:	2300      	movs	r3, #0
 800340a:	f88d 3006 	strb.w	r3, [sp, #6]
 800340e:	f88d 4007 	strb.w	r4, [sp, #7]
 8003412:	f7fe f9d9 	bl	80017c8 <BUTTON_EXTI_Config>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003416:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800341a:	b11b      	cbz	r3, 8003424 <BUTTON_Init.constprop.55+0x6c>
 800341c:	a801      	add	r0, sp, #4
 800341e:	f7fe f803 	bl	8001428 <NVIC_Init.part.0.lto_priv.93>
 8003422:	e00a      	b.n	800343a <BUTTON_Init.constprop.55+0x82>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003424:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003428:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	409c      	lsls	r4, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003430:	f102 0320 	add.w	r3, r2, #32
 8003434:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <BUTTON_Init.constprop.55+0xac>)
 8003436:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800343a:	231c      	movs	r3, #28
 800343c:	f88d 3004 	strb.w	r3, [sp, #4]
 8003440:	2306      	movs	r3, #6
 8003442:	f88d 3005 	strb.w	r3, [sp, #5]
 8003446:	2300      	movs	r3, #0
 8003448:	f88d 3006 	strb.w	r3, [sp, #6]
 800344c:	a801      	add	r0, sp, #4
 800344e:	2301      	movs	r3, #1
 8003450:	f88d 3007 	strb.w	r3, [sp, #7]
 8003454:	f7fd ffe8 	bl	8001428 <NVIC_Init.part.0.lto_priv.93>
 8003458:	b005      	add	sp, #20
 800345a:	bd30      	pop	{r4, r5, pc}
 800345c:	20002470 	.word	0x20002470
 8003460:	40023800 	.word	0x40023800
 8003464:	e000e100 	.word	0xe000e100

08003468 <USBD_GetString.constprop.14>:
 8003468:	b530      	push	{r4, r5, lr}
 800346a:	b1c8      	cbz	r0, 80034a0 <USBD_GetString.constprop.14+0x38>
 800346c:	4602      	mov	r2, r0
 800346e:	1a13      	subs	r3, r2, r0
 8003470:	f812 4b01 	ldrb.w	r4, [r2], #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2c00      	cmp	r4, #0
 8003478:	d1f9      	bne.n	800346e <USBD_GetString.constprop.14+0x6>
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <USBD_GetString.constprop.14+0x3c>)
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	3302      	adds	r3, #2
 8003480:	800b      	strh	r3, [r1, #0]
 8003482:	7013      	strb	r3, [r2, #0]
 8003484:	2303      	movs	r3, #3
 8003486:	7053      	strb	r3, [r2, #1]
 8003488:	3801      	subs	r0, #1
 800348a:	2302      	movs	r3, #2
 800348c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003490:	b135      	cbz	r5, 80034a0 <USBD_GetString.constprop.14+0x38>
 8003492:	1c59      	adds	r1, r3, #1
 8003494:	54d5      	strb	r5, [r2, r3]
 8003496:	b2c9      	uxtb	r1, r1
 8003498:	3302      	adds	r3, #2
 800349a:	b2db      	uxtb	r3, r3
 800349c:	5454      	strb	r4, [r2, r1]
 800349e:	e7f5      	b.n	800348c <USBD_GetString.constprop.14+0x24>
 80034a0:	bd30      	pop	{r4, r5, pc}
 80034a2:	bf00      	nop
 80034a4:	200035ec 	.word	0x200035ec

080034a8 <DCD_EP_PrepareRx.constprop.7>:
 80034a8:	b510      	push	{r4, lr}
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
 80034b0:	f880 32cd 	strb.w	r3, [r0, #717]	; 0x2cd
 80034b4:	f880 32cc 	strb.w	r3, [r0, #716]	; 0x2cc
 80034b8:	78c3      	ldrb	r3, [r0, #3]
 80034ba:	f500 7433 	add.w	r4, r0, #716	; 0x2cc
 80034be:	2b01      	cmp	r3, #1
 80034c0:	bf08      	it	eq
 80034c2:	f8c0 12dc 	streq.w	r1, [r0, #732]	; 0x2dc
 80034c6:	f8c0 12d8 	str.w	r1, [r0, #728]	; 0x2d8
 80034ca:	f8c0 22e0 	str.w	r2, [r0, #736]	; 0x2e0
 80034ce:	4621      	mov	r1, r4
 80034d0:	f7fd ff03 	bl	80012da <USB_OTG_EP0StartXfer>
 80034d4:	2000      	movs	r0, #0
 80034d6:	bd10      	pop	{r4, pc}

080034d8 <DCD_EP_Tx.constprop.6>:
 80034d8:	b510      	push	{r4, lr}
 80034da:	2401      	movs	r4, #1
 80034dc:	f880 40ed 	strb.w	r4, [r0, #237]	; 0xed
 80034e0:	2400      	movs	r4, #0
 80034e2:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
 80034e6:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
 80034ea:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 80034ee:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
 80034f2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80034f6:	f100 01ec 	add.w	r1, r0, #236	; 0xec
 80034fa:	f7fd feee 	bl	80012da <USB_OTG_EP0StartXfer>
 80034fe:	4620      	mov	r0, r4
 8003500:	bd10      	pop	{r4, pc}
	...

08003504 <MAL_GetStatus.constprop.3>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4605      	mov	r5, r0
 8003508:	4614      	mov	r4, r2
 800350a:	f7fe fd6d 	bl	8001fe8 <MAL_CheckAdd.lto_priv.94>
 800350e:	b9b8      	cbnz	r0, 8003540 <MAL_GetStatus.constprop.3+0x3c>
 8003510:	2d01      	cmp	r5, #1
 8003512:	d815      	bhi.n	8003540 <MAL_GetStatus.constprop.3+0x3c>
 8003514:	490b      	ldr	r1, [pc, #44]	; (8003544 <MAL_GetStatus.constprop.3+0x40>)
 8003516:	f014 0401 	ands.w	r4, r4, #1
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <MAL_GetStatus.constprop.3+0x44>)
 800351c:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
 8003520:	d006      	beq.n	8003530 <MAL_GetStatus.constprop.3+0x2c>
 8003522:	6a11      	ldr	r1, [r2, #32]
 8003524:	0a0a      	lsrs	r2, r1, #8
 8003526:	7059      	strb	r1, [r3, #1]
 8003528:	0c09      	lsrs	r1, r1, #16
 800352a:	709a      	strb	r2, [r3, #2]
 800352c:	70d9      	strb	r1, [r3, #3]
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003532:	4620      	mov	r0, r4
 8003534:	0a11      	lsrs	r1, r2, #8
 8003536:	705a      	strb	r2, [r3, #1]
 8003538:	0c12      	lsrs	r2, r2, #16
 800353a:	7099      	strb	r1, [r3, #2]
 800353c:	70da      	strb	r2, [r3, #3]
 800353e:	bd38      	pop	{r3, r4, r5, pc}
 8003540:	2001      	movs	r0, #1
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	08003930 	.word	0x08003930
 8003548:	20003bc4 	.word	0x20003bc4

0800354c <_GLOBAL__sub_I_led_set_status_active>:
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <_GLOBAL__sub_I_led_set_status_active+0x1c>)
 800354e:	2200      	movs	r2, #0
 8003550:	4619      	mov	r1, r3
 8003552:	f841 2b04 	str.w	r2, [r1], #4
 8003556:	821a      	strh	r2, [r3, #16]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	808a      	strh	r2, [r1, #4]
 800355c:	729a      	strb	r2, [r3, #10]
 800355e:	819a      	strh	r2, [r3, #12]
 8003560:	81da      	strh	r2, [r3, #14]
 8003562:	2201      	movs	r2, #1
 8003564:	749a      	strb	r2, [r3, #18]
 8003566:	4770      	bx	lr
 8003568:	20003bcc 	.word	0x20003bcc

0800356c <Set_RGB_LED_Color>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4604      	mov	r4, r0
 8003570:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8003574:	f7ff fed6 	bl	8003324 <ccr_scale>
 8003578:	4605      	mov	r5, r0
 800357a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800357e:	f7ff fed1 	bl	8003324 <ccr_scale>
 8003582:	4606      	mov	r6, r0
 8003584:	b2e0      	uxtb	r0, r4
 8003586:	f7ff fecd 	bl	8003324 <ccr_scale>
 800358a:	4631      	mov	r1, r6
 800358c:	4602      	mov	r2, r0
 800358e:	2300      	movs	r3, #0
 8003590:	4628      	mov	r0, r5
 8003592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003596:	f7fd bfa1 	b.w	80014dc <Set_RGB_LED_Values>
	...

0800359c <LED_Toggle.part.4.lto_priv.118>:
 800359c:	b513      	push	{r0, r1, r4, lr}
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <LED_Toggle.part.4.lto_priv.118+0x3c>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b10b      	cbz	r3, 80035a8 <LED_Toggle.part.4.lto_priv.118+0xc>
 80035a4:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <LED_Toggle.part.4.lto_priv.118+0x40>)
 80035a6:	e000      	b.n	80035aa <LED_Toggle.part.4.lto_priv.118+0xe>
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <LED_Toggle.part.4.lto_priv.118+0x44>)
 80035aa:	2100      	movs	r1, #0
 80035ac:	4668      	mov	r0, sp
 80035ae:	681c      	ldr	r4, [r3, #0]
 80035b0:	f7fd ff68 	bl	8001484 <Get_RGB_LED_Values>
 80035b4:	f8bd 2000 	ldrh.w	r2, [sp]
 80035b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	b10b      	cbz	r3, 80035cc <LED_Toggle.part.4.lto_priv.118+0x30>
 80035c8:	2000      	movs	r0, #0
 80035ca:	e000      	b.n	80035ce <LED_Toggle.part.4.lto_priv.118+0x32>
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7ff ffcd 	bl	800356c <Set_RGB_LED_Color>
 80035d2:	b002      	add	sp, #8
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	bf00      	nop
 80035d8:	200035e4 	.word	0x200035e4
 80035dc:	20003bc0 	.word	0x20003bc0
 80035e0:	200035e8 	.word	0x200035e8

080035e4 <USB_OTG_BSP_uDelay>:
 80035e4:	2378      	movs	r3, #120	; 0x78
 80035e6:	4358      	muls	r0, r3
 80035e8:	2307      	movs	r3, #7
 80035ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80035ee:	2300      	movs	r3, #0
 80035f0:	3301      	adds	r3, #1
 80035f2:	4298      	cmp	r0, r3
 80035f4:	d2fc      	bcs.n	80035f0 <USB_OTG_BSP_uDelay+0xc>
 80035f6:	4770      	bx	lr

080035f8 <USB_OTG_FlushTxFifo.constprop.86>:
 80035f8:	b507      	push	{r0, r1, r2, lr}
 80035fa:	2300      	movs	r3, #0
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	9b01      	ldr	r3, [sp, #4]
 8003600:	f043 0320 	orr.w	r3, r3, #32
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	9b01      	ldr	r3, [sp, #4]
 8003608:	f360 138a 	bfi	r3, r0, #6, #5
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <USB_OTG_FlushTxFifo.constprop.86+0x3c>)
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	9b01      	ldr	r3, [sp, #4]
 8003614:	6113      	str	r3, [r2, #16]
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <USB_OTG_FlushTxFifo.constprop.86+0x40>)
 8003618:	6911      	ldr	r1, [r2, #16]
 800361a:	3b01      	subs	r3, #1
 800361c:	9101      	str	r1, [sp, #4]
 800361e:	d002      	beq.n	8003626 <USB_OTG_FlushTxFifo.constprop.86+0x2e>
 8003620:	9901      	ldr	r1, [sp, #4]
 8003622:	0689      	lsls	r1, r1, #26
 8003624:	d4f8      	bmi.n	8003618 <USB_OTG_FlushTxFifo.constprop.86+0x20>
 8003626:	2003      	movs	r0, #3
 8003628:	f7ff ffdc 	bl	80035e4 <USB_OTG_BSP_uDelay>
 800362c:	2000      	movs	r0, #0
 800362e:	b003      	add	sp, #12
 8003630:	f85d fb04 	ldr.w	pc, [sp], #4
 8003634:	200036ec 	.word	0x200036ec
 8003638:	00030d41 	.word	0x00030d41

0800363c <FLASH_WriteProtection_Disable.part.4.lto_priv.95>:
 800363c:	b538      	push	{r3, r4, r5, lr}
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <FLASH_WriteProtection_Disable.part.4.lto_priv.95+0x4c>)
 8003640:	4605      	mov	r5, r0
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	4c11      	ldr	r4, [pc, #68]	; (800368c <FLASH_WriteProtection_Disable.part.4.lto_priv.95+0x50>)
 8003646:	07d2      	lsls	r2, r2, #31
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8003648:	bf41      	itttt	mi
 800364a:	4a11      	ldrmi	r2, [pc, #68]	; (8003690 <FLASH_WriteProtection_Disable.part.4.lto_priv.95+0x54>)
 800364c:	609a      	strmi	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800364e:	f102 3244 	addmi.w	r2, r2, #1145324612	; 0x44444444
 8003652:	609a      	strmi	r2, [r3, #8]
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));

  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8003654:	22f3      	movs	r2, #243	; 0xf3
 8003656:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation();
 8003658:	f7ff fce2 	bl	8003020 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800365c:	2808      	cmp	r0, #8
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800365e:	bf08      	it	eq
 8003660:	8820      	ldrheq	r0, [r4, #0]
FLASH_Status FLASH_OB_Launch(void)
{
  FLASH_Status status = FLASH_COMPLETE;

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <FLASH_WriteProtection_Disable.part.4.lto_priv.95+0x58>)
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8003664:	bf02      	ittt	eq
 8003666:	4328      	orreq	r0, r5
 8003668:	b280      	uxtheq	r0, r0
 800366a:	8020      	strheq	r0, [r4, #0]
FLASH_Status FLASH_OB_Launch(void)
{
  FLASH_Status status = FLASH_COMPLETE;

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800366c:	7813      	ldrb	r3, [r2, #0]
 800366e:	f043 0302 	orr.w	r3, r3, #2
 8003672:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8003674:	f7ff fcd4 	bl	8003020 <FLASH_WaitForLastOperation>
  * @retval None
  */
void FLASH_OB_Lock(void)
{
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003678:	4a03      	ldr	r2, [pc, #12]	; (8003688 <FLASH_WriteProtection_Disable.part.4.lto_priv.95+0x4c>)
 800367a:	6953      	ldr	r3, [r2, #20]
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6153      	str	r3, [r2, #20]
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8003682:	8823      	ldrh	r3, [r4, #0]
 8003684:	bd38      	pop	{r3, r4, r5, pc}
 8003686:	bf00      	nop
 8003688:	40023c00 	.word	0x40023c00
 800368c:	40023c16 	.word	0x40023c16
 8003690:	08192a3b 	.word	0x08192a3b
 8003694:	40023c14 	.word	0x40023c14

08003698 <FLASH_ApplyFactoryResetImage>:
 8003698:	b510      	push	{r4, lr}
 800369a:	2214      	movs	r2, #20
 800369c:	b08a      	sub	sp, #40	; 0x28
 800369e:	eb0d 0102 	add.w	r1, sp, r2
 80036a2:	4604      	mov	r4, r0
 80036a4:	f640 3024 	movw	r0, #2852	; 0xb24
 80036a8:	f7ff fdb2 	bl	8003210 <dct_read_app_data_copy>
 80036ac:	f640 73ac 	movw	r3, #4012	; 0xfac
 80036b0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d10e      	bne.n	80036d6 <FLASH_ApplyFactoryResetImage+0x3e>
 80036b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80036bc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80036c0:	9302      	str	r3, [sp, #8]
 80036c2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80036c6:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	9b08      	ldr	r3, [sp, #32]
 80036ce:	9906      	ldr	r1, [sp, #24]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	9b07      	ldr	r3, [sp, #28]
 80036d4:	e009      	b.n	80036ea <FLASH_ApplyFactoryResetImage+0x52>
 80036d6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80036da:	2204      	movs	r2, #4
 80036dc:	230e      	movs	r3, #14
 80036de:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80036e2:	2200      	movs	r2, #0
 80036e4:	4610      	mov	r0, r2
 80036e6:	4b02      	ldr	r3, [pc, #8]	; (80036f0 <FLASH_ApplyFactoryResetImage+0x58>)
 80036e8:	4902      	ldr	r1, [pc, #8]	; (80036f4 <FLASH_ApplyFactoryResetImage+0x5c>)
 80036ea:	47a0      	blx	r4
 80036ec:	b00a      	add	sp, #40	; 0x28
 80036ee:	bd10      	pop	{r4, pc}
 80036f0:	08020000 	.word	0x08020000
 80036f4:	08080000 	.word	0x08080000

080036f8 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80036f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036fa:	e003      	b.n	8003704 <LoopCopyDataInit>

080036fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80036fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003700:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003702:	3104      	adds	r1, #4

08003704 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003704:	480a      	ldr	r0, [pc, #40]	; (8003730 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003708:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800370a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800370c:	d3f6      	bcc.n	80036fc <CopyDataInit>
  ldr  r2, =_sbss
 800370e:	4a0a      	ldr	r2, [pc, #40]	; (8003738 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003710:	e002      	b.n	8003718 <LoopFillZerobss>

08003712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003712:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003714:	f842 3b04 	str.w	r3, [r2], #4

08003718 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800371a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800371c:	d3f9      	bcc.n	8003712 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800371e:	f7fe fbf9 	bl	8001f14 <SystemInit>
.ifdef SPARK_INIT_STARTUP
/* Call the hal core configuration function. */
	bl  HAL_Core_Config
.endif
/* Call C++ constructors. */
bl  CallConstructors
 8003722:	f7ff fafa 	bl	8002d1a <CallConstructors>
  .include "spark_init.S"
/* Call the application's entry point.*/
  bl  main
 8003726:	f7fc fd39 	bl	800019c <main>
  bx  lr
 800372a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800372c:	080039a0 	.word	0x080039a0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003730:	20002300 	.word	0x20002300
  ldr  r3, =_edata
 8003734:	200024b0 	.word	0x200024b0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003738:	200024b0 	.word	0x200024b0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4

LoopFillZerobss:
  ldr  r3, = _ebss
 800373c:	20003be0 	.word	0x20003be0

08003740 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003740:	e7fe      	b.n	8003740 <ADC_IRQHandler>
	...

08003744 <module_user_mono>:
 8003744:	0000 0006 0000 0802 0000 0808 0003 0000     ................

08003754 <HAL_Leds_Default_Data>:
 8003754:	0001 0000 0000 4002 2000 0001 0001 000d     .......@. ......
	...
 800376c:	0001 0000 0000 4002 0008 0001 0002 0103     .......@........
	...
 8003784:	0001 0000 0000 4002 0002 0001 0002 0101     .......@........
	...
 800379c:	0001 0000 0000 4002 0004 0001 0002 0102     .......@........
	...

080037b4 <flashSectors.lto_priv.100>:
 80037b4:	0800 1810 2820 3830 4840 5850               .... (08@HPX

080037c0 <sectorAddresses>:
 80037c0:	0000 0800 4000 0800 8000 0800 c000 0800     .....@..........
 80037d0:	0000 0801 0000 0802                         ........

080037d8 <usbd_dfu_StringDesc>:
 80037d8:	3872 0800 38b4 0800                         r8...8..

080037e0 <USBD_DFU_MsftExtPropOsDescr>:
 80037e0:	0092 0000 0100 0005 0001 0088 0000 0007     ................
 80037f0:	0000 002a 0044 0065 0076 0069 0063 0065     ..*.D.e.v.i.c.e.
 8003800:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 8003810:	0065 0047 0055 0049 0044 0073 0000 0050     e.G.U.I.D.s...P.
 8003820:	0000 007b 0033 0037 0066 0062 0035 0066     ..{.3.7.f.b.5.f.
 8003830:	0039 0030 002d 0031 0061 0033 0034 002d     9.0.-.1.a.3.4.-.
 8003840:	0034 0039 0032 0039 002d 0039 0033 0033     4.9.2.9.-.9.3.3.
 8003850:	0062 002d 0038 0061 0032 0037 0065 0031     b.-.8.a.2.7.e.1.
 8003860:	0038 0035 0030 0030 0033 0033 007d 0000     8.5.0.0.3.3.}...
 8003870:	0000 4940 746e 7265 616e 206c 6c46 7361     ..@Internal Flas
 8003880:	2068 2020 302f 3078 3038 3030 3030 2f30     h   /0x08000000/
 8003890:	3330 302a 3631 614b 302c 2a31 3130 4b36     03*016Ka,01*016K
 80038a0:	2c67 3130 302a 3436 674b 302c 2a37 3231     g,01*064Kg,07*12
 80038b0:	4b38 0067 4440 5443 4620 616c 6873 2020     8Kg.@DCT Flash  
 80038c0:	2f20 7830 3030 3030 3030 3030 302f 2a31      /0x00000000/01*
 80038d0:	3130 4b36 0067                              016Kg.

080038d6 <USBD_DFU_MsftExtCompatIdOsDescr>:
 80038d6:	0028 0000 0100 0004 0001 0000 0000 0000     (...............
 80038e6:	0100 4957 554e 4253 0000 0000 0000 0000     ..WINUSB........
	...

080038fe <USBD_MsftStrDesc>:
 80038fe:	0312 004d 0053 0046 0054 0031 0030 0030     ..M.S.F.T.1.0.0.
 800390e:	00ee 4644 0055 6150 7472 6369 656c 5000     ..DFU.Particle.P
 800391e:	6f68 6f74 206e 4644 2055 6f4d 6564 0000     hoton DFU Mode..
	...

08003930 <tMALTab>:
 8003930:	2448 2000 241c 2000                         H$. .$. 

08003938 <module_factory>:
 8003938:	0000 0002 0000 080e 0000 0810 0105 0001     ................

08003948 <module_system_part1>:
 8003948:	0000 0004 0000 0802 0000 0806 0104 0000     ................

08003958 <module_system_part2>:
 8003958:	0000 0004 0000 0806 0000 080a 0204 0000     ................

08003968 <module_bootloader>:
 8003968:	4000 0000 0000 0800 4000 0800 0002 0000     .@.......@......

08003978 <module_bounds>:
 8003978:	3968 0800 3948 0800 3958 0800 398c 0800     h9..H9..X9...9..
 8003988:	3938 0800                                   89..

0800398c <module_user>:
 800398c:	0000 0002 0000 080a 0000 080c 0105 0000     ................

0800399c <chk_system_pre_init_end>:
 800399c:	0800354d 	.word	0x0800354d
